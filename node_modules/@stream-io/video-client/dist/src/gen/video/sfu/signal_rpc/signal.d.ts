import { Error, PeerType, TrackInfo, TrackType, VideoDimension } from '../models/models';
import { ServiceType } from '@protobuf-ts/runtime-rpc';
import type { BinaryReadOptions, BinaryWriteOptions, IBinaryReader, IBinaryWriter, PartialMessage } from '@protobuf-ts/runtime';
import { MessageType } from '@protobuf-ts/runtime';
/**
 * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest
 */
export interface StartNoiseCancellationRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse
 */
export interface StartNoiseCancellationResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 1;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest
 */
export interface StopNoiseCancellationRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse
 */
export interface StopNoiseCancellationResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 1;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendStatsRequest
 */
export interface SendStatsRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: string subscriber_stats = 2;
     */
    subscriberStats: string;
    /**
     * @generated from protobuf field: string publisher_stats = 3;
     */
    publisherStats: string;
    /**
     * @generated from protobuf field: string webrtc_version = 4;
     */
    webrtcVersion: string;
    /**
     * @generated from protobuf field: string sdk = 5;
     */
    sdk: string;
    /**
     * @generated from protobuf field: string sdk_version = 6;
     */
    sdkVersion: string;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendStatsResponse
 */
export interface SendStatsResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 1;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.ICERestartRequest
 */
export interface ICERestartRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 2;
     */
    peerType: PeerType;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.ICERestartResponse
 */
export interface ICERestartResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 1;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest
 */
export interface UpdateMuteStatesRequest {
    /**
     * @generated from protobuf field: string session_id = 1;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.signal.TrackMuteState mute_states = 3;
     */
    muteStates: TrackMuteState[];
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse
 */
export interface UpdateMuteStatesResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 4;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.TrackMuteState
 */
export interface TrackMuteState {
    /**
     * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 1;
     */
    trackType: TrackType;
    /**
     * @generated from protobuf field: bool muted = 2;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.AudioMuteChanged
 */
export interface AudioMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 1;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.VideoMuteChanged
 */
export interface VideoMuteChanged {
    /**
     * @generated from protobuf field: bool muted = 2;
     */
    muted: boolean;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest
 */
export interface UpdateSubscriptionsRequest {
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3;
     */
    tracks: TrackSubscriptionDetails[];
}
/**
 * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse
 */
export interface UpdateSubscriptionsResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 4;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.TrackSubscriptionDetails
 */
export interface TrackSubscriptionDetails {
    /**
     * @generated from protobuf field: string user_id = 1;
     */
    userId: string;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 3;
     */
    trackType: TrackType;
    /**
     * @generated from protobuf field: stream.video.sfu.models.VideoDimension dimension = 4;
     */
    dimension?: VideoDimension;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendAnswerRequest
 */
export interface SendAnswerRequest {
    /**
     * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;
     */
    peerType: PeerType;
    /**
     * @generated from protobuf field: string sdp = 2;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 3;
     */
    sessionId: string;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SendAnswerResponse
 */
export interface SendAnswerResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 4;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.ICETrickleResponse
 */
export interface ICETrickleResponse {
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 4;
     */
    error?: Error;
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SetPublisherRequest
 */
export interface SetPublisherRequest {
    /**
     * sdp offer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo tracks = 3;
     */
    tracks: TrackInfo[];
}
/**
 * @generated from protobuf message stream.video.sfu.signal.SetPublisherResponse
 */
export interface SetPublisherResponse {
    /**
     * sdp answer
     *
     * @generated from protobuf field: string sdp = 1;
     */
    sdp: string;
    /**
     * @generated from protobuf field: string session_id = 2;
     */
    sessionId: string;
    /**
     * @generated from protobuf field: bool ice_restart = 3;
     */
    iceRestart: boolean;
    /**
     * @generated from protobuf field: stream.video.sfu.models.Error error = 4;
     */
    error?: Error;
}
declare class StartNoiseCancellationRequest$Type extends MessageType<StartNoiseCancellationRequest> {
    constructor();
    create(value?: PartialMessage<StartNoiseCancellationRequest>): StartNoiseCancellationRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartNoiseCancellationRequest): StartNoiseCancellationRequest;
    internalBinaryWrite(message: StartNoiseCancellationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest
 */
export declare const StartNoiseCancellationRequest: StartNoiseCancellationRequest$Type;
declare class StartNoiseCancellationResponse$Type extends MessageType<StartNoiseCancellationResponse> {
    constructor();
    create(value?: PartialMessage<StartNoiseCancellationResponse>): StartNoiseCancellationResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StartNoiseCancellationResponse): StartNoiseCancellationResponse;
    internalBinaryWrite(message: StartNoiseCancellationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse
 */
export declare const StartNoiseCancellationResponse: StartNoiseCancellationResponse$Type;
declare class StopNoiseCancellationRequest$Type extends MessageType<StopNoiseCancellationRequest> {
    constructor();
    create(value?: PartialMessage<StopNoiseCancellationRequest>): StopNoiseCancellationRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopNoiseCancellationRequest): StopNoiseCancellationRequest;
    internalBinaryWrite(message: StopNoiseCancellationRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest
 */
export declare const StopNoiseCancellationRequest: StopNoiseCancellationRequest$Type;
declare class StopNoiseCancellationResponse$Type extends MessageType<StopNoiseCancellationResponse> {
    constructor();
    create(value?: PartialMessage<StopNoiseCancellationResponse>): StopNoiseCancellationResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StopNoiseCancellationResponse): StopNoiseCancellationResponse;
    internalBinaryWrite(message: StopNoiseCancellationResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse
 */
export declare const StopNoiseCancellationResponse: StopNoiseCancellationResponse$Type;
declare class SendStatsRequest$Type extends MessageType<SendStatsRequest> {
    constructor();
    create(value?: PartialMessage<SendStatsRequest>): SendStatsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendStatsRequest): SendStatsRequest;
    internalBinaryWrite(message: SendStatsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest
 */
export declare const SendStatsRequest: SendStatsRequest$Type;
declare class SendStatsResponse$Type extends MessageType<SendStatsResponse> {
    constructor();
    create(value?: PartialMessage<SendStatsResponse>): SendStatsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendStatsResponse): SendStatsResponse;
    internalBinaryWrite(message: SendStatsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse
 */
export declare const SendStatsResponse: SendStatsResponse$Type;
declare class ICERestartRequest$Type extends MessageType<ICERestartRequest> {
    constructor();
    create(value?: PartialMessage<ICERestartRequest>): ICERestartRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICERestartRequest): ICERestartRequest;
    internalBinaryWrite(message: ICERestartRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest
 */
export declare const ICERestartRequest: ICERestartRequest$Type;
declare class ICERestartResponse$Type extends MessageType<ICERestartResponse> {
    constructor();
    create(value?: PartialMessage<ICERestartResponse>): ICERestartResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICERestartResponse): ICERestartResponse;
    internalBinaryWrite(message: ICERestartResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse
 */
export declare const ICERestartResponse: ICERestartResponse$Type;
declare class UpdateMuteStatesRequest$Type extends MessageType<UpdateMuteStatesRequest> {
    constructor();
    create(value?: PartialMessage<UpdateMuteStatesRequest>): UpdateMuteStatesRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStatesRequest): UpdateMuteStatesRequest;
    internalBinaryWrite(message: UpdateMuteStatesRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest
 */
export declare const UpdateMuteStatesRequest: UpdateMuteStatesRequest$Type;
declare class UpdateMuteStatesResponse$Type extends MessageType<UpdateMuteStatesResponse> {
    constructor();
    create(value?: PartialMessage<UpdateMuteStatesResponse>): UpdateMuteStatesResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateMuteStatesResponse): UpdateMuteStatesResponse;
    internalBinaryWrite(message: UpdateMuteStatesResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse
 */
export declare const UpdateMuteStatesResponse: UpdateMuteStatesResponse$Type;
declare class TrackMuteState$Type extends MessageType<TrackMuteState> {
    constructor();
    create(value?: PartialMessage<TrackMuteState>): TrackMuteState;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackMuteState): TrackMuteState;
    internalBinaryWrite(message: TrackMuteState, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState
 */
export declare const TrackMuteState: TrackMuteState$Type;
declare class AudioMuteChanged$Type extends MessageType<AudioMuteChanged> {
    constructor();
    create(value?: PartialMessage<AudioMuteChanged>): AudioMuteChanged;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AudioMuteChanged): AudioMuteChanged;
    internalBinaryWrite(message: AudioMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged
 */
export declare const AudioMuteChanged: AudioMuteChanged$Type;
declare class VideoMuteChanged$Type extends MessageType<VideoMuteChanged> {
    constructor();
    create(value?: PartialMessage<VideoMuteChanged>): VideoMuteChanged;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VideoMuteChanged): VideoMuteChanged;
    internalBinaryWrite(message: VideoMuteChanged, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged
 */
export declare const VideoMuteChanged: VideoMuteChanged$Type;
declare class UpdateSubscriptionsRequest$Type extends MessageType<UpdateSubscriptionsRequest> {
    constructor();
    create(value?: PartialMessage<UpdateSubscriptionsRequest>): UpdateSubscriptionsRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsRequest): UpdateSubscriptionsRequest;
    internalBinaryWrite(message: UpdateSubscriptionsRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest
 */
export declare const UpdateSubscriptionsRequest: UpdateSubscriptionsRequest$Type;
declare class UpdateSubscriptionsResponse$Type extends MessageType<UpdateSubscriptionsResponse> {
    constructor();
    create(value?: PartialMessage<UpdateSubscriptionsResponse>): UpdateSubscriptionsResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateSubscriptionsResponse): UpdateSubscriptionsResponse;
    internalBinaryWrite(message: UpdateSubscriptionsResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse
 */
export declare const UpdateSubscriptionsResponse: UpdateSubscriptionsResponse$Type;
declare class TrackSubscriptionDetails$Type extends MessageType<TrackSubscriptionDetails> {
    constructor();
    create(value?: PartialMessage<TrackSubscriptionDetails>): TrackSubscriptionDetails;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackSubscriptionDetails): TrackSubscriptionDetails;
    internalBinaryWrite(message: TrackSubscriptionDetails, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails
 */
export declare const TrackSubscriptionDetails: TrackSubscriptionDetails$Type;
declare class SendAnswerRequest$Type extends MessageType<SendAnswerRequest> {
    constructor();
    create(value?: PartialMessage<SendAnswerRequest>): SendAnswerRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerRequest): SendAnswerRequest;
    internalBinaryWrite(message: SendAnswerRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest
 */
export declare const SendAnswerRequest: SendAnswerRequest$Type;
declare class SendAnswerResponse$Type extends MessageType<SendAnswerResponse> {
    constructor();
    create(value?: PartialMessage<SendAnswerResponse>): SendAnswerResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SendAnswerResponse): SendAnswerResponse;
    internalBinaryWrite(message: SendAnswerResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse
 */
export declare const SendAnswerResponse: SendAnswerResponse$Type;
declare class ICETrickleResponse$Type extends MessageType<ICETrickleResponse> {
    constructor();
    create(value?: PartialMessage<ICETrickleResponse>): ICETrickleResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ICETrickleResponse): ICETrickleResponse;
    internalBinaryWrite(message: ICETrickleResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse
 */
export declare const ICETrickleResponse: ICETrickleResponse$Type;
declare class SetPublisherRequest$Type extends MessageType<SetPublisherRequest> {
    constructor();
    create(value?: PartialMessage<SetPublisherRequest>): SetPublisherRequest;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherRequest): SetPublisherRequest;
    internalBinaryWrite(message: SetPublisherRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest
 */
export declare const SetPublisherRequest: SetPublisherRequest$Type;
declare class SetPublisherResponse$Type extends MessageType<SetPublisherResponse> {
    constructor();
    create(value?: PartialMessage<SetPublisherResponse>): SetPublisherResponse;
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPublisherResponse): SetPublisherResponse;
    internalBinaryWrite(message: SetPublisherResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter;
}
/**
 * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse
 */
export declare const SetPublisherResponse: SetPublisherResponse$Type;
/**
 * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer
 */
export declare const SignalServer: ServiceType;
export {};
