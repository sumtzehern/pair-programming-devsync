import { Observable, Subject } from 'rxjs';
type FunctionPatch<T> = (currentValue: T) => T;
/**
 * A value or a function which takes the current value and returns a new value.
 */
export type Patch<T> = T | FunctionPatch<T>;
/**
 * Gets the current value of an observable, or undefined if the observable has
 * not emitted a value yet.
 *
 * @param observable$ the observable to get the value from.
 */
export declare const getCurrentValue: <T>(observable$: Observable<T>) => T;
/**
 * Updates the value of the provided Subject.
 * An `update` can either be a new value or a function which takes
 * the current value and returns a new value.
 *
 * @param subject the subject to update.
 * @param update the update to apply to the subject.
 * @return the updated value.
 */
export declare const setCurrentValue: <T>(subject: Subject<T>, update: Patch<T>) => T;
/**
 * Creates a subscription and returns a function to unsubscribe.
 *
 * @param observable the observable to subscribe to.
 * @param handler the handler to call when the observable emits a value.
 */
export declare const createSubscription: <T>(observable: Observable<T>, handler: (value: T) => void) => () => void;
export {};
