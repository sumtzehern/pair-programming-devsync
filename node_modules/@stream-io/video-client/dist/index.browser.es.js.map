{"version":3,"file":"index.browser.es.js","sources":["../../src/gen/coordinator/index.ts","../../src/coordinator/connection/types.ts","../../src/gen/google/protobuf/struct.ts","../../src/gen/google/protobuf/timestamp.ts","../../src/gen/video/sfu/models/models.ts","../../src/gen/video/sfu/signal_rpc/signal.ts","../../src/gen/video/sfu/event/events.ts","../../src/types.ts","../../src/gen/video/sfu/signal_rpc/signal.client.ts","../../src/rpc/createClient.ts","../../src/helpers/platforms.ts","../../src/logger.ts","../../src/rtc/codecs.ts","../../src/rtc/Dispatcher.ts","../../src/rtc/IceTrickleBuffer.ts","../../src/rtc/helpers/iceCandidate.ts","../../src/client-details.ts","../../src/rtc/videoLayers.ts","../../src/rtc/helpers/tracks.ts","../../src/store/rxUtils.ts","../../src/sorting/comparator.ts","../../src/helpers/participantUtils.ts","../../src/sorting/participants.ts","../../src/sorting/presets.ts","../../src/store/CallState.ts","../../src/store/stateStore.ts","../../src/helpers/sdp-munging.ts","../../src/rtc/Publisher.ts","../../src/rtc/Subscriber.ts","../../src/rtc/signal.ts","../../src/coordinator/connection/utils.ts","../../src/StreamSfuClient.ts","../../src/events/call.ts","../../src/events/call-permissions.ts","../../src/events/internal.ts","../../src/events/mutes.ts","../../src/events/participant.ts","../../src/events/speaker.ts","../../src/events/callEventHandlers.ts","../../src/rtc/flows/join.ts","../../src/stats/utils.ts","../../src/stats/stateStoreStatsReporter.ts","../../src/stats/SfuStatsReporter.ts","../../src/helpers/ViewportTracker.ts","../../src/helpers/browsers.ts","../../src/helpers/DynascaleManager.ts","../../src/permissions/PermissionsContext.ts","../../src/CallType.ts","../../src/devices/devices.ts","../../src/devices/InputMediaDeviceManager.ts","../../src/devices/InputMediaDeviceManagerState.ts","../../src/devices/CameraManagerState.ts","../../src/devices/CameraManager.ts","../../src/devices/MicrophoneManagerState.ts","../../src/helpers/sound-detector.ts","../../src/helpers/RNSpeechDetector.ts","../../src/devices/MicrophoneManager.ts","../../src/devices/ScreenShareState.ts","../../src/devices/ScreenShareManager.ts","../../src/devices/SpeakerState.ts","../../src/devices/SpeakerManager.ts","../../src/Call.ts","../https","../../src/coordinator/connection/insights.ts","../../src/coordinator/connection/connection.ts","../../src/coordinator/connection/base64.ts","../../src/coordinator/connection/signing.ts","../../src/coordinator/connection/token_manager.ts","../../src/coordinator/connection/errors.ts","../../src/coordinator/connection/connection_fallback.ts","../../src/coordinator/connection/location.ts","../../src/coordinator/connection/client.ts","../../src/StreamVideoClient.ts"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n *\n * @export\n * @interface APIError\n */\nexport interface APIError {\n  /**\n   * Response HTTP status code\n   * @type {number}\n   * @memberof APIError\n   */\n  StatusCode: number;\n  /**\n   * API error code\n   * @type {number}\n   * @memberof APIError\n   */\n  code: number;\n  /**\n   * Additional error-specific information\n   * @type {Array<number>}\n   * @memberof APIError\n   */\n  details: Array<number>;\n  /**\n   * Request duration\n   * @type {string}\n   * @memberof APIError\n   */\n  duration: string;\n  /**\n   * Additional error info\n   * @type {{ [key: string]: string; }}\n   * @memberof APIError\n   */\n  exception_fields?: { [key: string]: string };\n  /**\n   * Message describing an error\n   * @type {string}\n   * @memberof APIError\n   */\n  message: string;\n  /**\n   * URL with additional information\n   * @type {string}\n   * @memberof APIError\n   */\n  more_info: string;\n}\n/**\n *\n * @export\n * @interface AcceptCallResponse\n */\nexport interface AcceptCallResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof AcceptCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface AudioSettings\n */\nexport interface AudioSettings {\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettings\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AudioSettings\n   */\n  default_device: AudioSettingsDefaultDeviceEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettings\n   */\n  mic_default_on: boolean;\n  /**\n   *\n   * @type {NoiseCancellationSettings}\n   * @memberof AudioSettings\n   */\n  noise_cancellation?: NoiseCancellationSettings;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettings\n   */\n  opus_dtx_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettings\n   */\n  redundant_coding_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettings\n   */\n  speaker_default_on: boolean;\n}\n\n/**\n * @export\n */\nexport const AudioSettingsDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece',\n} as const;\nexport type AudioSettingsDefaultDeviceEnum =\n  (typeof AudioSettingsDefaultDeviceEnum)[keyof typeof AudioSettingsDefaultDeviceEnum];\n\n/**\n *\n * @export\n * @interface AudioSettingsRequest\n */\nexport interface AudioSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AudioSettingsRequest\n   */\n  default_device: AudioSettingsRequestDefaultDeviceEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  mic_default_on?: boolean;\n  /**\n   *\n   * @type {NoiseCancellationSettingsRequest}\n   * @memberof AudioSettingsRequest\n   */\n  noise_cancellation?: NoiseCancellationSettingsRequest;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  opus_dtx_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  redundant_coding_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AudioSettingsRequest\n   */\n  speaker_default_on?: boolean;\n}\n\n/**\n * @export\n */\nexport const AudioSettingsRequestDefaultDeviceEnum = {\n  SPEAKER: 'speaker',\n  EARPIECE: 'earpiece',\n} as const;\nexport type AudioSettingsRequestDefaultDeviceEnum =\n  (typeof AudioSettingsRequestDefaultDeviceEnum)[keyof typeof AudioSettingsRequestDefaultDeviceEnum];\n\n/**\n *\n * @export\n * @interface BackstageSettings\n */\nexport interface BackstageSettings {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BackstageSettings\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface BackstageSettingsRequest\n */\nexport interface BackstageSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BackstageSettingsRequest\n   */\n  enabled?: boolean;\n}\n/**\n *\n * @export\n * @interface BlockUserRequest\n */\nexport interface BlockUserRequest {\n  /**\n   * the user to block\n   * @type {string}\n   * @memberof BlockUserRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface BlockUserResponse\n */\nexport interface BlockUserResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof BlockUserResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent to call participants to notify when a user is blocked on a call, clients can use this event to show a notification.\n * If the user is the current user, the client should leave the call screen as well\n * @export\n * @interface BlockedUserEvent\n */\nexport interface BlockedUserEvent {\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof BlockedUserEvent\n   */\n  blocked_by_user?: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.blocked_user\" in this case\n   * @type {string}\n   * @memberof BlockedUserEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof BlockedUserEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface BroadcastSettingsRequest\n */\nexport interface BroadcastSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BroadcastSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {HLSSettingsRequest}\n   * @memberof BroadcastSettingsRequest\n   */\n  hls?: HLSSettingsRequest;\n}\n/**\n *\n * @export\n * @interface BroadcastSettingsResponse\n */\nexport interface BroadcastSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof BroadcastSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {HLSSettingsResponse}\n   * @memberof BroadcastSettingsResponse\n   */\n  hls: HLSSettingsResponse;\n}\n/**\n * This event is sent when a user accepts a notification to join a call.\n * @export\n * @interface CallAcceptedEvent\n */\nexport interface CallAcceptedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallAcceptedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.accepted\" in this case\n   * @type {string}\n   * @memberof CallAcceptedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallAcceptedEvent\n   */\n  user: UserResponse;\n}\n/**\n * CallClosedCaption represents a closed caption of a call.\n * @export\n * @interface CallClosedCaption\n */\nexport interface CallClosedCaption {\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  speaker_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallClosedCaption\n   */\n  text: string;\n}\n/**\n * This event is sent when a call is created. Clients receiving this event should check if the ringing\n * field is set to true and if so, show the call screen\n * @export\n * @interface CallCreatedEvent\n */\nexport interface CallCreatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallCreatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  created_at: string;\n  /**\n   * the members added to this call\n   * @type {Array<MemberResponse>}\n   * @memberof CallCreatedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.created\" in this case\n   * @type {string}\n   * @memberof CallCreatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is deleted. Clients receiving this event should leave the call screen\n * @export\n * @interface CallDeletedEvent\n */\nexport interface CallDeletedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallDeletedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.deleted\" in this case\n   * @type {string}\n   * @memberof CallDeletedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is mark as ended for all its participants. Clients receiving this event should leave the call screen\n * @export\n * @interface CallEndedEvent\n */\nexport interface CallEndedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallEndedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.ended\" in this case\n   * @type {string}\n   * @memberof CallEndedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallEndedEvent\n   */\n  user?: UserResponse;\n}\n/**\n * @export\n * @interface CallEvent\n */\nexport interface CallEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallEvent\n   */\n  description: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CallEvent\n   */\n  end_timestamp: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CallEvent\n   */\n  severity: number;\n  /**\n   *\n   * @type {number}\n   * @memberof CallEvent\n   */\n  timestamp: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CallEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has failed\n * @export\n * @interface CallHLSBroadcastingFailedEvent\n */\nexport interface CallHLSBroadcastingFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_failed\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has started\n * @export\n * @interface CallHLSBroadcastingStartedEvent\n */\nexport interface CallHLSBroadcastingStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  hls_playlist_url: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_started\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when HLS broadcasting has stopped\n * @export\n * @interface CallHLSBroadcastingStoppedEvent\n */\nexport interface CallHLSBroadcastingStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.hls_broadcasting_stopped\" in this case\n   * @type {string}\n   * @memberof CallHLSBroadcastingStoppedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallIngressResponse\n */\nexport interface CallIngressResponse {\n  /**\n   *\n   * @type {RTMPIngress}\n   * @memberof CallIngressResponse\n   */\n  rtmp: RTMPIngress;\n}\n/**\n * This event is sent when a call is started. Clients receiving this event should start the call.\n * @export\n * @interface CallLiveStartedEvent\n */\nexport interface CallLiveStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallLiveStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.live_started\" in this case\n   * @type {string}\n   * @memberof CallLiveStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are added to a call\n * @export\n * @interface CallMemberAddedEvent\n */\nexport interface CallMemberAddedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberAddedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  created_at: string;\n  /**\n   * the members added to this call\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberAddedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_added\" in this case\n   * @type {string}\n   * @memberof CallMemberAddedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are removed from a call\n * @export\n * @interface CallMemberRemovedEvent\n */\nexport interface CallMemberRemovedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberRemovedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  created_at: string;\n  /**\n   * the list of member IDs removed from the call\n   * @type {Array<string>}\n   * @memberof CallMemberRemovedEvent\n   */\n  members: Array<string>;\n  /**\n   * The type of event: \"call.member_removed\" in this case\n   * @type {string}\n   * @memberof CallMemberRemovedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members are updated\n * @export\n * @interface CallMemberUpdatedEvent\n */\nexport interface CallMemberUpdatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberUpdatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  created_at: string;\n  /**\n   * The list of members that were updated\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberUpdatedEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_updated\" in this case\n   * @type {string}\n   * @memberof CallMemberUpdatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when one or more members get its role updated\n * @export\n * @interface CallMemberUpdatedPermissionEvent\n */\nexport interface CallMemberUpdatedPermissionEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  call_cid: string;\n  /**\n   * The capabilities by role for this call\n   * @type {{ [key: string]: Array<string>; }}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  capabilities_by_role: { [key: string]: Array<string> };\n  /**\n   *\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  created_at: string;\n  /**\n   * The list of members that were updated\n   * @type {Array<MemberResponse>}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * The type of event: \"call.member_added\" in this case\n   * @type {string}\n   * @memberof CallMemberUpdatedPermissionEvent\n   */\n  type: string;\n}\n/**\n * This event is sent to all call members to notify they are getting called\n * @export\n * @interface CallNotificationEvent\n */\nexport interface CallNotificationEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallNotificationEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  created_at: string;\n  /**\n   * Call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallNotificationEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.notification\" in this case\n   * @type {string}\n   * @memberof CallNotificationEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallNotificationEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface CallParticipantResponse\n */\nexport interface CallParticipantResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  joined_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  role: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallParticipantResponse\n   */\n  user: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallParticipantResponse\n   */\n  user_session_id: string;\n}\n/**\n * This event is sent when a reaction is sent in a call, clients should use this to show the reaction in the call screen\n * @export\n * @interface CallReactionEvent\n */\nexport interface CallReactionEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {ReactionResponse}\n   * @memberof CallReactionEvent\n   */\n  reaction: ReactionResponse;\n  /**\n   * The type of event: \"call.reaction_new\" in this case\n   * @type {string}\n   * @memberof CallReactionEvent\n   */\n  type: string;\n}\n/**\n * CallRecording represents a recording of a call.\n * @export\n * @interface CallRecording\n */\nexport interface CallRecording {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  filename: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecording\n   */\n  url: string;\n}\n/**\n * This event is sent when call recording has failed\n * @export\n * @interface CallRecordingFailedEvent\n */\nexport interface CallRecordingFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.recording_failed\" in this case\n   * @type {string}\n   * @memberof CallRecordingFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording is ready\n * @export\n * @interface CallRecordingReadyEvent\n */\nexport interface CallRecordingReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallRecording}\n   * @memberof CallRecordingReadyEvent\n   */\n  call_recording: CallRecording;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.recording_ready\" in this case\n   * @type {string}\n   * @memberof CallRecordingReadyEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording has started\n * @export\n * @interface CallRecordingStartedEvent\n */\nexport interface CallRecordingStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.recording_started\" in this case\n   * @type {string}\n   * @memberof CallRecordingStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call recording has stopped\n * @export\n * @interface CallRecordingStoppedEvent\n */\nexport interface CallRecordingStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.recording_stopped\" in this case\n   * @type {string}\n   * @memberof CallRecordingStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a user rejects a notification to join a call.\n * @export\n * @interface CallRejectedEvent\n */\nexport interface CallRejectedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallRejectedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.rejected\" in this case\n   * @type {string}\n   * @memberof CallRejectedEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallRejectedEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface CallRequest\n */\nexport interface CallRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof CallRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {Array<MemberRequest>}\n   * @memberof CallRequest\n   */\n  members?: Array<MemberRequest>;\n  /**\n   *\n   * @type {CallSettingsRequest}\n   * @memberof CallRequest\n   */\n  settings_override?: CallSettingsRequest;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRequest\n   */\n  starts_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRequest\n   */\n  team?: string;\n}\n/**\n * Represents a call\n * @export\n * @interface CallResponse\n */\nexport interface CallResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  backstage: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CallResponse\n   */\n  blocked_user_ids: Array<string>;\n  /**\n   * The unique identifier for a call (<type>:<id>)\n   * @type {string}\n   * @memberof CallResponse\n   */\n  cid: string;\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof CallResponse\n   */\n  created_at: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallResponse\n   */\n  created_by: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallResponse\n   */\n  current_session_id: string;\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof CallResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {EgressResponse}\n   * @memberof CallResponse\n   */\n  egress: EgressResponse;\n  /**\n   * Date/time when the call ended\n   * @type {string}\n   * @memberof CallResponse\n   */\n  ended_at?: string;\n  /**\n   * Call ID\n   * @type {string}\n   * @memberof CallResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {CallIngressResponse}\n   * @memberof CallResponse\n   */\n  ingress: CallIngressResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  recording: boolean;\n  /**\n   *\n   * @type {CallSessionResponse}\n   * @memberof CallResponse\n   */\n  session?: CallSessionResponse;\n  /**\n   *\n   * @type {CallSettingsResponse}\n   * @memberof CallResponse\n   */\n  settings: CallSettingsResponse;\n  /**\n   * Date/time when the call will start\n   * @type {string}\n   * @memberof CallResponse\n   */\n  starts_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallResponse\n   */\n  team?: string;\n  /**\n   *\n   * @type {ThumbnailResponse}\n   * @memberof CallResponse\n   */\n  thumbnails?: ThumbnailResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CallResponse\n   */\n  transcribing: boolean;\n  /**\n   * The type of call\n   * @type {string}\n   * @memberof CallResponse\n   */\n  type: string;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof CallResponse\n   */\n  updated_at: string;\n}\n/**\n * This event is sent to all call members to notify they are getting called\n * @export\n * @interface CallRingEvent\n */\nexport interface CallRingEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallRingEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  created_at: string;\n  /**\n   * Call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallRingEvent\n   */\n  members: Array<MemberResponse>;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.notification\" in this case\n   * @type {string}\n   * @memberof CallRingEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CallRingEvent\n   */\n  user: UserResponse;\n}\n/**\n * This event is sent when a call session ends\n * @export\n * @interface CallSessionEndedEvent\n */\nexport interface CallSessionEndedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallSessionEndedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  created_at: string;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_ended\" in this case\n   * @type {string}\n   * @memberof CallSessionEndedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a participant joins a call session\n * @export\n * @interface CallSessionParticipantJoinedEvent\n */\nexport interface CallSessionParticipantJoinedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {CallParticipantResponse}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  participant: CallParticipantResponse;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_participant_joined\" in this case\n   * @type {string}\n   * @memberof CallSessionParticipantJoinedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a participant leaves a call session\n * @export\n * @interface CallSessionParticipantLeftEvent\n */\nexport interface CallSessionParticipantLeftEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {CallParticipantResponse}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  participant: CallParticipantResponse;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_participant_left\" in this case\n   * @type {string}\n   * @memberof CallSessionParticipantLeftEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallSessionResponse\n */\nexport interface CallSessionResponse {\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof CallSessionResponse\n   */\n  accepted_by: { [key: string]: string };\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  ended_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  live_ended_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  live_started_at?: string;\n  /**\n   *\n   * @type {Array<CallParticipantResponse>}\n   * @memberof CallSessionResponse\n   */\n  participants: Array<CallParticipantResponse>;\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof CallSessionResponse\n   */\n  participants_count_by_role: { [key: string]: number };\n  /**\n   *\n   * @type {{ [key: string]: string; }}\n   * @memberof CallSessionResponse\n   */\n  rejected_by: { [key: string]: string };\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionResponse\n   */\n  started_at?: string;\n}\n/**\n * This event is sent when a call session starts\n * @export\n * @interface CallSessionStartedEvent\n */\nexport interface CallSessionStartedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallSessionStartedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  created_at: string;\n  /**\n   * Call session ID\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  session_id: string;\n  /**\n   * The type of event: \"call.session_started\" in this case\n   * @type {string}\n   * @memberof CallSessionStartedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallSettingsRequest\n */\nexport interface CallSettingsRequest {\n  /**\n   *\n   * @type {AudioSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  audio?: AudioSettingsRequest;\n  /**\n   *\n   * @type {BackstageSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  backstage?: BackstageSettingsRequest;\n  /**\n   *\n   * @type {BroadcastSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  broadcasting?: BroadcastSettingsRequest;\n  /**\n   *\n   * @type {GeofenceSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  geofencing?: GeofenceSettingsRequest;\n  /**\n   *\n   * @type {RecordSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  recording?: RecordSettingsRequest;\n  /**\n   *\n   * @type {RingSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  ring?: RingSettingsRequest;\n  /**\n   *\n   * @type {ScreensharingSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  screensharing?: ScreensharingSettingsRequest;\n  /**\n   *\n   * @type {ThumbnailsSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  thumbnails?: ThumbnailsSettingsRequest;\n  /**\n   *\n   * @type {TranscriptionSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  transcription?: TranscriptionSettingsRequest;\n  /**\n   *\n   * @type {VideoSettingsRequest}\n   * @memberof CallSettingsRequest\n   */\n  video?: VideoSettingsRequest;\n}\n/**\n *\n * @export\n * @interface CallSettingsResponse\n */\nexport interface CallSettingsResponse {\n  /**\n   *\n   * @type {AudioSettings}\n   * @memberof CallSettingsResponse\n   */\n  audio: AudioSettings;\n  /**\n   *\n   * @type {BackstageSettings}\n   * @memberof CallSettingsResponse\n   */\n  backstage: BackstageSettings;\n  /**\n   *\n   * @type {BroadcastSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  broadcasting: BroadcastSettingsResponse;\n  /**\n   *\n   * @type {GeofenceSettings}\n   * @memberof CallSettingsResponse\n   */\n  geofencing: GeofenceSettings;\n  /**\n   *\n   * @type {RecordSettingsResponse}\n   * @memberof CallSettingsResponse\n   */\n  recording: RecordSettingsResponse;\n  /**\n   *\n   * @type {RingSettings}\n   * @memberof CallSettingsResponse\n   */\n  ring: RingSettings;\n  /**\n   *\n   * @type {ScreensharingSettings}\n   * @memberof CallSettingsResponse\n   */\n  screensharing: ScreensharingSettings;\n  /**\n   *\n   * @type {ThumbnailsSettings}\n   * @memberof CallSettingsResponse\n   */\n  thumbnails: ThumbnailsSettings;\n  /**\n   *\n   * @type {TranscriptionSettings}\n   * @memberof CallSettingsResponse\n   */\n  transcription: TranscriptionSettings;\n  /**\n   *\n   * @type {VideoSettings}\n   * @memberof CallSettingsResponse\n   */\n  video: VideoSettings;\n}\n/**\n *\n * @export\n * @interface CallStateResponseFields\n */\nexport interface CallStateResponseFields {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallStateResponseFields\n   */\n  call: CallResponse;\n  /**\n   * List of call members\n   * @type {Array<MemberResponse>}\n   * @memberof CallStateResponseFields\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof CallStateResponseFields\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof CallStateResponseFields\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface CallStatsReportSummaryResponse\n */\nexport interface CallStatsReportSummaryResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_session_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  call_status: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  first_stats_time: string;\n  /**\n   *\n   * @type {number}\n   * @memberof CallStatsReportSummaryResponse\n   */\n  quality_score?: number;\n}\n/**\n *\n * @export\n * @interface CallTimeline\n */\nexport interface CallTimeline {\n  /**\n   *\n   * @type {Array<CallEvent>}\n   * @memberof CallTimeline\n   */\n  events: Array<CallEvent>;\n}\n/**\n * CallTranscription represents a transcription of a call.\n * @export\n * @interface CallTranscription\n */\nexport interface CallTranscription {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  filename: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  url: string;\n}\n/**\n * This event is sent when call transcription has failed\n * @export\n * @interface CallTranscriptionFailedEvent\n */\nexport interface CallTranscriptionFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_failed\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription is ready\n * @export\n * @interface CallTranscriptionReadyEvent\n */\nexport interface CallTranscriptionReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallTranscription}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_transcription: CallTranscription;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_ready\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has started\n * @export\n * @interface CallTranscriptionStartedEvent\n */\nexport interface CallTranscriptionStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_started\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has stopped\n * @export\n * @interface CallTranscriptionStoppedEvent\n */\nexport interface CallTranscriptionStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_stopped\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CallTypeResponse\n * @interface CallTranscription\n */\nexport interface CallTranscription {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  end_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  filename: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  start_time: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscription\n   */\n  url: string;\n}\n/**\n * This event is sent when call transcription has failed\n * @export\n * @interface CallTranscriptionFailedEvent\n */\nexport interface CallTranscriptionFailedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_failed\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionFailedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription is ready\n * @export\n * @interface CallTranscriptionReadyEvent\n */\nexport interface CallTranscriptionReadyEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallTranscription}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  call_transcription: CallTranscription;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_ready\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionReadyEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has started\n * @export\n * @interface CallTranscriptionStartedEvent\n */\nexport interface CallTranscriptionStartedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_started\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStartedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when call transcription has stopped\n * @export\n * @interface CallTranscriptionStoppedEvent\n */\nexport interface CallTranscriptionStoppedEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.transcription_stopped\" in this case\n   * @type {string}\n   * @memberof CallTranscriptionStoppedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call is updated, clients should use this update the local state of the call.\n * This event also contains the capabilities by role for the call, clients should update the own_capability for the current.\n * @export\n * @interface CallUpdatedEvent\n */\nexport interface CallUpdatedEvent {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof CallUpdatedEvent\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  call_cid: string;\n  /**\n   * The capabilities by role for this call\n   * @type {{ [key: string]: Array<string>; }}\n   * @memberof CallUpdatedEvent\n   */\n  capabilities_by_role: { [key: string]: Array<string> };\n  /**\n   *\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.ended\" in this case\n   * @type {string}\n   * @memberof CallUpdatedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when a call member is muted\n * @export\n * @interface CallUserMuted\n */\nexport interface CallUserMuted {\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMuted\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMuted\n   */\n  created_at: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CallUserMuted\n   */\n  from_user_id: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof CallUserMuted\n   */\n  muted_user_ids: Array<string>;\n  /**\n   * The type of event: \"call.user_muted\" in this case\n   * @type {string}\n   * @memberof CallUserMuted\n   */\n  type: string;\n}\n/**\n * This event is sent when closed captions are being sent in a call, clients should use this to show the closed captions in the call screen\n * @export\n * @interface ClosedCaptionEvent\n */\nexport interface ClosedCaptionEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {CallClosedCaption}\n   * @memberof ClosedCaptionEvent\n   */\n  closed_caption: CallClosedCaption;\n  /**\n   *\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.closed_caption\" in this case\n   * @type {string}\n   * @memberof ClosedCaptionEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface CollectUserFeedbackRequest\n */\nexport interface CollectUserFeedbackRequest {\n  /**\n   *\n   * @type {{ [key:string]: any }}\n   * @memberof CollectUserFeedbackRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof CollectUserFeedbackRequest\n   */\n  rating?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  reason?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  sdk: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  sdk_version: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CollectUserFeedbackRequest\n   */\n  user_session_id: string;\n}\n/**\n *\n * @export\n * @interface CollectUserFeedbackResponse\n */\nexport interface CollectUserFeedbackResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof CollectUserFeedbackResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface ConnectUserDetailsRequest\n */\nexport interface ConnectUserDetailsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof ConnectUserDetailsRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  image?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  language?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectUserDetailsRequest\n   */\n  name?: string;\n}\n/**\n * This event is sent when the WS connection is established and authenticated, this event contains the full user object as it is stored on the server\n * @export\n * @interface ConnectedEvent\n */\nexport interface ConnectedEvent {\n  /**\n   * The connection_id for this client\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {OwnUserResponse}\n   * @memberof ConnectedEvent\n   */\n  me: OwnUserResponse;\n  /**\n   * The type of event: \"connection.ok\" in this case\n   * @type {string}\n   * @memberof ConnectedEvent\n   */\n  type: string;\n}\n/**\n * This event is sent when the WS connection fails\n * @export\n * @interface ConnectionErrorEvent\n */\nexport interface ConnectionErrorEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  created_at: string;\n  /**\n   *\n   * @type {APIError}\n   * @memberof ConnectionErrorEvent\n   */\n  error: APIError;\n  /**\n   * The type of event: \"connection.ok\" in this case\n   * @type {string}\n   * @memberof ConnectionErrorEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface Coordinates\n */\nexport interface Coordinates {\n  /**\n   *\n   * @type {number}\n   * @memberof Coordinates\n   */\n  latitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof Coordinates\n   */\n  longitude: number;\n}\n/**\n *\n * @export\n * @interface CreateDeviceRequest\n */\nexport interface CreateDeviceRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  push_provider?: CreateDeviceRequestPushProviderEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof CreateDeviceRequest\n   */\n  push_provider_name?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof CreateDeviceRequest\n   */\n  voip_token?: boolean;\n}\n\n/**\n * @export\n */\nexport const CreateDeviceRequestPushProviderEnum = {\n  FIREBASE: 'firebase',\n  APN: 'apn',\n  HUAWEI: 'huawei',\n  XIAOMI: 'xiaomi',\n} as const;\nexport type CreateDeviceRequestPushProviderEnum =\n  (typeof CreateDeviceRequestPushProviderEnum)[keyof typeof CreateDeviceRequestPushProviderEnum];\n\n/**\n *\n * @export\n * @interface CreateGuestRequest\n */\nexport interface CreateGuestRequest {\n  /**\n   *\n   * @type {UserRequest}\n   * @memberof CreateGuestRequest\n   */\n  user: UserRequest;\n}\n/**\n *\n * @export\n * @interface CreateGuestResponse\n */\nexport interface CreateGuestResponse {\n  /**\n   * the access token to authenticate the user\n   * @type {string}\n   * @memberof CreateGuestResponse\n   */\n  access_token: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CreateGuestResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CreateGuestResponse\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface Credentials\n */\nexport interface Credentials {\n  /**\n   *\n   * @type {Array<ICEServer>}\n   * @memberof Credentials\n   */\n  ice_servers: Array<ICEServer>;\n  /**\n   *\n   * @type {SFUResponse}\n   * @memberof Credentials\n   */\n  server: SFUResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof Credentials\n   */\n  token: string;\n}\n\n// Manually added because API spec is faulty\nexport interface CustomVideoEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  created_at: string;\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof CustomVideoEvent\n   */\n  custom: { [key: string]: any };\n  /**\n   * The type of event, \"custom\" in this case\n   * @type {string}\n   * @memberof CustomVideoEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof CustomVideoEvent\n   */\n  user: UserResponse;\n}\n\n/**\n *\n * @export\n * @interface Device\n */\nexport interface Device {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof Device\n   */\n  created_at: string;\n  /**\n   * Whether device is disabled or not\n   * @type {boolean}\n   * @memberof Device\n   */\n  disabled?: boolean;\n  /**\n   * Reason explaining why device had been disabled\n   * @type {string}\n   * @memberof Device\n   */\n  disabled_reason?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Device\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Device\n   */\n  push_provider: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Device\n   */\n  push_provider_name?: string;\n  /**\n   * When true the token is for Apple VoIP push notifications\n   * @type {boolean}\n   * @memberof Device\n   */\n  voip?: boolean;\n}\n/**\n *\n * @export\n * @interface EdgeResponse\n */\nexport interface EdgeResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  continent_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  country_iso_code: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  green: number;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  latency_test_url: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  latitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  longitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  red: number;\n  /**\n   *\n   * @type {string}\n   * @memberof EdgeResponse\n   */\n  subdivision_iso_code: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EdgeResponse\n   */\n  yellow: number;\n}\n/**\n *\n * @export\n * @interface EgressHLSResponse\n */\nexport interface EgressHLSResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EgressHLSResponse\n   */\n  playlist_url: string;\n}\n/**\n *\n * @export\n * @interface EgressRTMPResponse\n */\nexport interface EgressRTMPResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  stream_key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EgressRTMPResponse\n   */\n  url: string;\n}\n/**\n *\n * @export\n * @interface EgressResponse\n */\nexport interface EgressResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof EgressResponse\n   */\n  broadcasting: boolean;\n  /**\n   *\n   * @type {EgressHLSResponse}\n   * @memberof EgressResponse\n   */\n  hls?: EgressHLSResponse;\n  /**\n   *\n   * @type {Array<EgressRTMPResponse>}\n   * @memberof EgressResponse\n   */\n  rtmps: Array<EgressRTMPResponse>;\n}\n/**\n *\n * @export\n * @interface EndCallResponse\n */\nexport interface EndCallResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof EndCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface GeofenceSettings\n */\nexport interface GeofenceSettings {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof GeofenceSettings\n   */\n  names: Array<string>;\n}\n/**\n *\n * @export\n * @interface GeofenceSettingsRequest\n */\nexport interface GeofenceSettingsRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof GeofenceSettingsRequest\n   */\n  names?: Array<string>;\n}\n/**\n *\n * @export\n * @interface GeolocationResult\n */\nexport interface GeolocationResult {\n  /**\n   *\n   * @type {number}\n   * @memberof GeolocationResult\n   */\n  accuracy_radius: number;\n  /**\n   *\n   * @type {string}\n   * @memberof GeolocationResult\n   */\n  continent_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof GeolocationResult\n   */\n  country_iso_code: string;\n  /**\n   *\n   * @type {number}\n   * @memberof GeolocationResult\n   */\n  latitude: number;\n  /**\n   *\n   * @type {number}\n   * @memberof GeolocationResult\n   */\n  longitude: number;\n  /**\n   *\n   * @type {string}\n   * @memberof GeolocationResult\n   */\n  subdivision_iso_code: string;\n}\n/**\n *\n * @export\n * @interface GetCallResponse\n */\nexport interface GetCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GetCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof GetCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof GetCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof GetCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof GetCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface GetCallStatsResponse\n */\nexport interface GetCallStatsResponse {\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  call_duration_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof GetCallStatsResponse\n   */\n  call_status: string;\n  /**\n   *\n   * @type {CallTimeline}\n   * @memberof GetCallStatsResponse\n   */\n  call_timeline?: CallTimeline;\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof GetCallStatsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Stats}\n   * @memberof GetCallStatsResponse\n   */\n  jitter?: Stats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof GetCallStatsResponse\n   */\n  latency?: Stats;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  max_freezes_duration_seconds: number;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  max_participants: number;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  max_total_quality_limitation_duration_seconds: number;\n  /**\n   *\n   * @type {Array<UserStats>}\n   * @memberof GetCallStatsResponse\n   */\n  participant_report: Array<UserStats>;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  publishing_participants: number;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  quality_score: number;\n  /**\n   *\n   * @type {number}\n   * @memberof GetCallStatsResponse\n   */\n  sfu_count: number;\n  /**\n   *\n   * @type {Array<SFULocationResponse>}\n   * @memberof GetCallStatsResponse\n   */\n  sfus: Array<SFULocationResponse>;\n}\n/**\n *\n * @export\n * @interface GetEdgesResponse\n */\nexport interface GetEdgesResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof GetEdgesResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<EdgeResponse>}\n   * @memberof GetEdgesResponse\n   */\n  edges: Array<EdgeResponse>;\n}\n/**\n *\n * @export\n * @interface GetOrCreateCallRequest\n */\nexport interface GetOrCreateCallRequest {\n  /**\n   *\n   * @type {CallRequest}\n   * @memberof GetOrCreateCallRequest\n   */\n  data?: CallRequest;\n  /**\n   *\n   * @type {number}\n   * @memberof GetOrCreateCallRequest\n   */\n  members_limit?: number;\n  /**\n   * if provided it sends a notification event to the members for this call\n   * @type {boolean}\n   * @memberof GetOrCreateCallRequest\n   */\n  notify?: boolean;\n  /**\n   * if provided it sends a ring event to the members for this call\n   * @type {boolean}\n   * @memberof GetOrCreateCallRequest\n   */\n  ring?: boolean;\n}\n/**\n *\n * @export\n * @interface GetOrCreateCallResponse\n */\nexport interface GetOrCreateCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GetOrCreateCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GetOrCreateCallResponse\n   */\n  created: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof GetOrCreateCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof GetOrCreateCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof GetOrCreateCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof GetOrCreateCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface GoLiveRequest\n */\nexport interface GoLiveRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof GoLiveRequest\n   */\n  recording_storage_name?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_hls?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_recording?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof GoLiveRequest\n   */\n  start_transcription?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof GoLiveRequest\n   */\n  transcription_storage_name?: string;\n}\n/**\n *\n * @export\n * @interface GoLiveResponse\n */\nexport interface GoLiveResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof GoLiveResponse\n   */\n  call: CallResponse;\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof GoLiveResponse\n   */\n  duration: string;\n}\n// Manually added because API spec is faulty\n/**\n *\n * @export\n * @interface HealthCheckEvent\n */\nexport interface HealthCheckEvent {\n  /**\n   * The connection_id for this client\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  connection_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"health.check\" in this case\n   * @type {string}\n   * @memberof HealthCheckEvent\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface HLSSettingsRequest\n */\nexport interface HLSSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsRequest\n   */\n  auto_on?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof HLSSettingsRequest\n   */\n  quality_tracks?: Array<string>;\n}\n/**\n *\n * @export\n * @interface HLSSettingsResponse\n */\nexport interface HLSSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsResponse\n   */\n  auto_on: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof HLSSettingsResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof HLSSettingsResponse\n   */\n  quality_tracks: Array<string>;\n}\n/**\n *\n * @export\n * @interface ICEServer\n */\nexport interface ICEServer {\n  /**\n   *\n   * @type {string}\n   * @memberof ICEServer\n   */\n  password: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ICEServer\n   */\n  urls: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ICEServer\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface JoinCallRequest\n */\nexport interface JoinCallRequest {\n  /**\n   * if true the call will be created if it doesn't exist\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  create?: boolean;\n  /**\n   *\n   * @type {CallRequest}\n   * @memberof JoinCallRequest\n   */\n  data?: CallRequest;\n  /**\n   *\n   * @type {string}\n   * @memberof JoinCallRequest\n   */\n  location: string;\n  /**\n   *\n   * @type {number}\n   * @memberof JoinCallRequest\n   */\n  members_limit?: number;\n  /**\n   * If the participant is migrating from another SFU, then this is the ID of the previous SFU\n   * @type {string}\n   * @memberof JoinCallRequest\n   */\n  migrating_from?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  notify?: boolean;\n  /**\n   * if true and the call is created, the notification will include ring=true\n   * @type {boolean}\n   * @memberof JoinCallRequest\n   */\n  ring?: boolean;\n}\n/**\n *\n * @export\n * @interface JoinCallResponse\n */\nexport interface JoinCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof JoinCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {boolean}\n   * @memberof JoinCallResponse\n   */\n  created: boolean;\n  /**\n   *\n   * @type {Credentials}\n   * @memberof JoinCallResponse\n   */\n  credentials: Credentials;\n  /**\n   *\n   * @type {string}\n   * @memberof JoinCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof JoinCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof JoinCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof JoinCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n  /**\n   *\n   * @type {StatsOptions}\n   * @memberof JoinCallResponse\n   */\n  stats_options: StatsOptions;\n}\n/**\n *\n * @export\n * @interface ListDevicesResponse\n */\nexport interface ListDevicesResponse {\n  /**\n   * List of devices\n   * @type {Array<Device>}\n   * @memberof ListDevicesResponse\n   */\n  devices: Array<Device>;\n  /**\n   *\n   * @type {string}\n   * @memberof ListDevicesResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface ListRecordingsResponse\n */\nexport interface ListRecordingsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ListRecordingsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<CallRecording>}\n   * @memberof ListRecordingsResponse\n   */\n  recordings: Array<CallRecording>;\n}\n/**\n *\n * @export\n * @interface ListTranscriptionsResponse\n */\nexport interface ListTranscriptionsResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ListTranscriptionsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<CallTranscription>}\n   * @memberof ListTranscriptionsResponse\n   */\n  transcriptions: Array<CallTranscription>;\n}\n/**\n *\n * @export\n * @interface Location\n */\nexport interface Location {\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  continent_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  country_iso_code: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Location\n   */\n  subdivision_iso_code: string;\n}\n/**\n *\n * @export\n * @interface MediaPubSubHint\n */\nexport interface MediaPubSubHint {\n  /**\n   *\n   * @type {boolean}\n   * @memberof MediaPubSubHint\n   */\n  audio_published: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MediaPubSubHint\n   */\n  audio_subscribed: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MediaPubSubHint\n   */\n  video_published: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MediaPubSubHint\n   */\n  video_subscribed: boolean;\n}\n/**\n *\n * @export\n * @interface MemberRequest\n */\nexport interface MemberRequest {\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof MemberRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof MemberRequest\n   */\n  role?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface MemberResponse\n */\nexport interface MemberResponse {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  created_at: string;\n  /**\n   * Custom member response data\n   * @type {{ [key: string]: any; }}\n   * @memberof MemberResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   * Date/time of deletion\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  role?: string;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  updated_at: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof MemberResponse\n   */\n  user: UserResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof MemberResponse\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface MOSStats\n */\nexport interface MOSStats {\n  /**\n   *\n   * @type {number}\n   * @memberof MOSStats\n   */\n  average_score: number;\n  /**\n   *\n   * @type {Array<number>}\n   * @memberof MOSStats\n   */\n  histogram_duration_seconds: Array<number>;\n  /**\n   *\n   * @type {number}\n   * @memberof MOSStats\n   */\n  max_score: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MOSStats\n   */\n  min_score: number;\n}\n/**\n *\n * @export\n * @interface MuteUsersRequest\n */\nexport interface MuteUsersRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  audio?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  mute_all_users?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  screenshare?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  screenshare_audio?: boolean;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof MuteUsersRequest\n   */\n  user_ids?: Array<string>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof MuteUsersRequest\n   */\n  video?: boolean;\n}\n/**\n *\n * @export\n * @interface MuteUsersResponse\n */\nexport interface MuteUsersResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof MuteUsersResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface NoiseCancellationSettings\n */\nexport interface NoiseCancellationSettings {\n  /**\n   *\n   * @type {string}\n   * @memberof NoiseCancellationSettings\n   */\n  mode: NoiseCancellationSettingsModeEnum;\n}\n\n/**\n * @export\n */\nexport const NoiseCancellationSettingsModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type NoiseCancellationSettingsModeEnum =\n  (typeof NoiseCancellationSettingsModeEnum)[keyof typeof NoiseCancellationSettingsModeEnum];\n\n/**\n *\n * @export\n * @interface NoiseCancellationSettingsRequest\n */\nexport interface NoiseCancellationSettingsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NoiseCancellationSettingsRequest\n   */\n  mode?: NoiseCancellationSettingsRequestModeEnum;\n}\n\n/**\n * @export\n */\nexport const NoiseCancellationSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type NoiseCancellationSettingsRequestModeEnum =\n  (typeof NoiseCancellationSettingsRequestModeEnum)[keyof typeof NoiseCancellationSettingsRequestModeEnum];\n\n/**\n * All possibility of string to use\n * @export\n */\nexport const OwnCapability = {\n  BLOCK_USERS: 'block-users',\n  CREATE_CALL: 'create-call',\n  CREATE_REACTION: 'create-reaction',\n  ENABLE_NOISE_CANCELLATION: 'enable-noise-cancellation',\n  END_CALL: 'end-call',\n  JOIN_BACKSTAGE: 'join-backstage',\n  JOIN_CALL: 'join-call',\n  JOIN_ENDED_CALL: 'join-ended-call',\n  MUTE_USERS: 'mute-users',\n  PIN_FOR_EVERYONE: 'pin-for-everyone',\n  READ_CALL: 'read-call',\n  REMOVE_CALL_MEMBER: 'remove-call-member',\n  SCREENSHARE: 'screenshare',\n  SEND_AUDIO: 'send-audio',\n  SEND_VIDEO: 'send-video',\n  START_BROADCAST_CALL: 'start-broadcast-call',\n  START_RECORD_CALL: 'start-record-call',\n  START_TRANSCRIPTION_CALL: 'start-transcription-call',\n  STOP_BROADCAST_CALL: 'stop-broadcast-call',\n  STOP_RECORD_CALL: 'stop-record-call',\n  STOP_TRANSCRIPTION_CALL: 'stop-transcription-call',\n  UPDATE_CALL: 'update-call',\n  UPDATE_CALL_MEMBER: 'update-call-member',\n  UPDATE_CALL_PERMISSIONS: 'update-call-permissions',\n  UPDATE_CALL_SETTINGS: 'update-call-settings',\n} as const;\nexport type OwnCapability = (typeof OwnCapability)[keyof typeof OwnCapability];\n\n/**\n *\n * @export\n * @interface OwnUserResponse\n */\nexport interface OwnUserResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof OwnUserResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {Array<Device>}\n   * @memberof OwnUserResponse\n   */\n  devices: Array<Device>;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  image?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  language: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  role: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof OwnUserResponse\n   */\n  teams: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof OwnUserResponse\n   */\n  updated_at: string;\n}\n/**\n * This event is sent when a user requests access to a feature on a call,\n * clients receiving this event should display a permission request to the user\n * @export\n * @interface PermissionRequestEvent\n */\nexport interface PermissionRequestEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  created_at: string;\n  /**\n   * The list of permissions requested by the user\n   * @type {Array<string>}\n   * @memberof PermissionRequestEvent\n   */\n  permissions: Array<string>;\n  /**\n   * The type of event: \"call.permission_request\" in this case\n   * @type {string}\n   * @memberof PermissionRequestEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof PermissionRequestEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface PinRequest\n */\nexport interface PinRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PinRequest\n   */\n  session_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PinRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface PinResponse\n */\nexport interface PinResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof PinResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface PublishedTrackInfo\n */\nexport interface PublishedTrackInfo {\n  /**\n   *\n   * @type {string}\n   * @memberof PublishedTrackInfo\n   */\n  codec_mime_type?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PublishedTrackInfo\n   */\n  duration_seconds?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof PublishedTrackInfo\n   */\n  track_type?: string;\n}\n/**\n *\n * @export\n * @interface QueryCallStatsRequest\n */\nexport interface QueryCallStatsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryCallStatsRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof QueryCallStatsRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsRequest\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryCallStatsRequest\n   */\n  sort?: Array<SortParamRequest>;\n}\n/**\n *\n * @export\n * @interface QueryCallStatsResponse\n */\nexport interface QueryCallStatsResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallStatsResponse\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<CallStatsReportSummaryResponse>}\n   * @memberof QueryCallStatsResponse\n   */\n  reports: Array<CallStatsReportSummaryResponse>;\n}\n/**\n *\n * @export\n * @interface QueryCallsRequest\n */\nexport interface QueryCallsRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryCallsRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {number}\n   * @memberof QueryCallsRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsRequest\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryCallsRequest\n   */\n  sort?: Array<SortParamRequest>;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QueryCallsRequest\n   */\n  watch?: boolean;\n}\n/**\n *\n * @export\n * @interface QueryCallsResponse\n */\nexport interface QueryCallsResponse {\n  /**\n   *\n   * @type {Array<CallStateResponseFields>}\n   * @memberof QueryCallsResponse\n   */\n  calls: Array<CallStateResponseFields>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryCallsResponse\n   */\n  prev?: string;\n}\n/**\n *\n * @export\n * @interface QueryMembersRequest\n */\nexport interface QueryMembersRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof QueryMembersRequest\n   */\n  filter_conditions?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QueryMembersRequest\n   */\n  limit?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersRequest\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersRequest\n   */\n  prev?: string;\n  /**\n   *\n   * @type {Array<SortParamRequest>}\n   * @memberof QueryMembersRequest\n   */\n  sort?: Array<SortParamRequest>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersRequest\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface QueryMembersResponse\n */\nexport interface QueryMembersResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof QueryMembersResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof QueryMembersResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersResponse\n   */\n  next?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QueryMembersResponse\n   */\n  prev?: string;\n}\n/**\n * RTMP input settings\n * @export\n * @interface RTMPIngress\n */\nexport interface RTMPIngress {\n  /**\n   *\n   * @type {string}\n   * @memberof RTMPIngress\n   */\n  address: string;\n}\n/**\n *\n * @export\n * @interface ReactionResponse\n */\nexport interface ReactionResponse {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof ReactionResponse\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof ReactionResponse\n   */\n  emoji_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReactionResponse\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof ReactionResponse\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface RecordSettingsRequest\n */\nexport interface RecordSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RecordSettingsRequest\n   */\n  audio_only?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsRequest\n   */\n  mode: RecordSettingsRequestModeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsRequest\n   */\n  quality?: RecordSettingsRequestQualityEnum;\n}\n\n/**\n * @export\n */\nexport const RecordSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type RecordSettingsRequestModeEnum =\n  (typeof RecordSettingsRequestModeEnum)[keyof typeof RecordSettingsRequestModeEnum];\n\n/**\n * @export\n */\nexport const RecordSettingsRequestQualityEnum = {\n  _360P: '360p',\n  _480P: '480p',\n  _720P: '720p',\n  _1080P: '1080p',\n  _1440P: '1440p',\n} as const;\nexport type RecordSettingsRequestQualityEnum =\n  (typeof RecordSettingsRequestQualityEnum)[keyof typeof RecordSettingsRequestQualityEnum];\n\n/**\n *\n * @export\n * @interface RecordSettingsResponse\n */\nexport interface RecordSettingsResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RecordSettingsResponse\n   */\n  audio_only: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsResponse\n   */\n  mode: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RecordSettingsResponse\n   */\n  quality: string;\n}\n/**\n *\n * @export\n * @interface RejectCallResponse\n */\nexport interface RejectCallResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof RejectCallResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface RequestPermissionRequest\n */\nexport interface RequestPermissionRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof RequestPermissionRequest\n   */\n  permissions: Array<string>;\n}\n/**\n *\n * @export\n * @interface RequestPermissionResponse\n */\nexport interface RequestPermissionResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof RequestPermissionResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface Response\n */\nexport interface Response {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof Response\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface RingSettings\n */\nexport interface RingSettings {\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettings\n   */\n  auto_cancel_timeout_ms: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettings\n   */\n  incoming_call_timeout_ms: number;\n}\n/**\n *\n * @export\n * @interface RingSettingsRequest\n */\nexport interface RingSettingsRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettingsRequest\n   */\n  auto_cancel_timeout_ms?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RingSettingsRequest\n   */\n  incoming_call_timeout_ms?: number;\n}\n/**\n *\n * @export\n * @interface SFULocationResponse\n */\nexport interface SFULocationResponse {\n  /**\n   *\n   * @type {Coordinates}\n   * @memberof SFULocationResponse\n   */\n  coordinates: Coordinates;\n  /**\n   *\n   * @type {string}\n   * @memberof SFULocationResponse\n   */\n  datacenter: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SFULocationResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {Location}\n   * @memberof SFULocationResponse\n   */\n  location: Location;\n}\n/**\n *\n * @export\n * @interface SFUResponse\n */\nexport interface SFUResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  edge_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  url: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SFUResponse\n   */\n  ws_endpoint: string;\n}\n/**\n *\n * @export\n * @interface ScreensharingSettings\n */\nexport interface ScreensharingSettings {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettings\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettings\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof ScreensharingSettings\n   */\n  target_resolution?: TargetResolution;\n}\n/**\n *\n * @export\n * @interface ScreensharingSettingsRequest\n */\nexport interface ScreensharingSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ScreensharingSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof ScreensharingSettingsRequest\n   */\n  target_resolution?: TargetResolution;\n}\n/**\n *\n * @export\n * @interface SendEventRequest\n */\nexport interface SendEventRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof SendEventRequest\n   */\n  custom?: { [key: string]: any };\n}\n/**\n *\n * @export\n * @interface SendEventResponse\n */\nexport interface SendEventResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SendEventResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface SendReactionRequest\n */\nexport interface SendReactionRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof SendReactionRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof SendReactionRequest\n   */\n  emoji_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SendReactionRequest\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface SendReactionResponse\n */\nexport interface SendReactionResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof SendReactionResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {ReactionResponse}\n   * @memberof SendReactionResponse\n   */\n  reaction: ReactionResponse;\n}\n/**\n *\n * @export\n * @interface SortParamRequest\n */\nexport interface SortParamRequest {\n  /**\n   * Direction of sorting, -1 for descending, 1 for ascending\n   * @type {number}\n   * @memberof SortParamRequest\n   */\n  direction?: number;\n  /**\n   * Name of field to sort by\n   * @type {string}\n   * @memberof SortParamRequest\n   */\n  field?: string;\n}\n/**\n *\n * @export\n * @interface StartHLSBroadcastingResponse\n */\nexport interface StartHLSBroadcastingResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof StartHLSBroadcastingResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {string}\n   * @memberof StartHLSBroadcastingResponse\n   */\n  playlist_url: string;\n}\n/**\n *\n * @export\n * @interface StartRecordingRequest\n */\nexport interface StartRecordingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StartRecordingRequest\n   */\n  recording_external_storage?: string;\n}\n/**\n *\n * @export\n * @interface StartRecordingResponse\n */\nexport interface StartRecordingResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof StartRecordingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StartTranscriptionRequest\n */\nexport interface StartTranscriptionRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof StartTranscriptionRequest\n   */\n  transcription_external_storage?: string;\n}\n/**\n *\n * @export\n * @interface StartTranscriptionResponse\n */\nexport interface StartTranscriptionResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof StartTranscriptionResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface Stats\n */\nexport interface Stats {\n  /**\n   *\n   * @type {number}\n   * @memberof Stats\n   */\n  average_seconds: number;\n  /**\n   *\n   * @type {number}\n   * @memberof Stats\n   */\n  max_seconds: number;\n}\n/**\n *\n * @export\n * @interface StatsOptions\n */\nexport interface StatsOptions {\n  /**\n   *\n   * @type {number}\n   * @memberof StatsOptions\n   */\n  reporting_interval_ms: number;\n}\n/**\n *\n * @export\n * @interface StopHLSBroadcastingResponse\n */\nexport interface StopHLSBroadcastingResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof StopHLSBroadcastingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopLiveResponse\n */\nexport interface StopLiveResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof StopLiveResponse\n   */\n  call: CallResponse;\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof StopLiveResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopRecordingResponse\n */\nexport interface StopRecordingResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof StopRecordingResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface StopTranscriptionResponse\n */\nexport interface StopTranscriptionResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof StopTranscriptionResponse\n   */\n  duration: string;\n}\n\n/**\n *\n * @export\n * @interface Subsession\n */\nexport interface Subsession {\n  /**\n   *\n   * @type {number}\n   * @memberof Subsession\n   */\n  ended_at: number;\n  /**\n   *\n   * @type {number}\n   * @memberof Subsession\n   */\n  joined_at: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subsession\n   */\n  sfu_id: string;\n}\n/**\n *\n * @export\n * @interface TargetResolution\n */\nexport interface TargetResolution {\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  bitrate: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  height: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolution\n   */\n  width: number;\n}\n/**\n *\n * @export\n * @interface TargetResolutionRequest\n */\nexport interface TargetResolutionRequest {\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolutionRequest\n   */\n  bitrate?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolutionRequest\n   */\n  height?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof TargetResolutionRequest\n   */\n  width?: number;\n}\n/**\n *\n * @export\n * @interface ThumbnailResponse\n */\nexport interface ThumbnailResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ThumbnailResponse\n   */\n  image_url: string;\n}\n/**\n *\n * @export\n * @interface ThumbnailsSettings\n */\nexport interface ThumbnailsSettings {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ThumbnailsSettings\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface ThumbnailsSettingsRequest\n */\nexport interface ThumbnailsSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ThumbnailsSettingsRequest\n   */\n  enabled?: boolean;\n}\n/**\n *\n * @export\n * @interface TranscriptionSettings\n */\nexport interface TranscriptionSettings {\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettings\n   */\n  closed_caption_mode: string;\n  /**\n   * omitempty,max=2,dive,oneof= en, fr, es, de, it, nl, pt, pl, ca, cs, da, el, fi, id, ja, ru, sv, ta, th, tr, hu, ro, zh, ar, tl, he, hi, hr, ko, ms, no, uk\n   * @type {Array<string>}\n   * @memberof TranscriptionSettings\n   */\n  languages: Array<string>;\n  /**\n   * oneof=available disabled auto-on\n   * @type {string}\n   * @memberof TranscriptionSettings\n   */\n  mode: TranscriptionSettingsModeEnum;\n}\n\n/**\n * @export\n */\nexport const TranscriptionSettingsModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsModeEnum =\n  (typeof TranscriptionSettingsModeEnum)[keyof typeof TranscriptionSettingsModeEnum];\n\n/**\n *\n * @export\n * @interface TranscriptionSettingsRequest\n */\nexport interface TranscriptionSettingsRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof TranscriptionSettingsRequest\n   */\n  closed_caption_mode?: string;\n  /**\n   * omitempty,max=2,dive,oneof= en, fr, es, de, it, nl, pt, pl, ca, cs, da, el, fi, id, ja, ru, sv, ta, th, tr, hu, ro, zh, ar, tl, he, hi, hr, ko, ms, no, uk\n   * @type {Array<string>}\n   * @memberof TranscriptionSettingsRequest\n   */\n  languages?: Array<string>;\n  /**\n   * oneof=available disabled auto-on\n   * @type {string}\n   * @memberof TranscriptionSettingsRequest\n   */\n  mode?: TranscriptionSettingsRequestModeEnum;\n}\n\n/**\n * @export\n */\nexport const TranscriptionSettingsRequestModeEnum = {\n  AVAILABLE: 'available',\n  DISABLED: 'disabled',\n  AUTO_ON: 'auto-on',\n} as const;\nexport type TranscriptionSettingsRequestModeEnum =\n  (typeof TranscriptionSettingsRequestModeEnum)[keyof typeof TranscriptionSettingsRequestModeEnum];\n\n/**\n *\n * @export\n * @interface UnblockUserRequest\n */\nexport interface UnblockUserRequest {\n  /**\n   * the user to unblock\n   * @type {string}\n   * @memberof UnblockUserRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface UnblockUserResponse\n */\nexport interface UnblockUserResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof UnblockUserResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent when a user is unblocked on a call,\n * this can be useful to notify the user that they can now join the call again\n * @export\n * @interface UnblockedUserEvent\n */\nexport interface UnblockedUserEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  created_at: string;\n  /**\n   * The type of event: \"call.unblocked_user\" in this case\n   * @type {string}\n   * @memberof UnblockedUserEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof UnblockedUserEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface UnpinRequest\n */\nexport interface UnpinRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof UnpinRequest\n   */\n  session_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UnpinRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface UnpinResponse\n */\nexport interface UnpinResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof UnpinResponse\n   */\n  duration: string;\n}\n/**\n *\n * @export\n * @interface UpdateCallMembersRequest\n */\nexport interface UpdateCallMembersRequest {\n  /**\n   * List of userID to remove\n   * @type {Array<string>}\n   * @memberof UpdateCallMembersRequest\n   */\n  remove_members?: Array<string>;\n  /**\n   * List of members to update or insert\n   * @type {Array<MemberRequest>}\n   * @memberof UpdateCallMembersRequest\n   */\n  update_members?: Array<MemberRequest>;\n}\n/**\n *\n * @export\n * @interface UpdateCallMembersResponse\n */\nexport interface UpdateCallMembersResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof UpdateCallMembersResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof UpdateCallMembersResponse\n   */\n  members: Array<MemberResponse>;\n}\n/**\n *\n * @export\n * @interface UpdateCallRequest\n */\nexport interface UpdateCallRequest {\n  /**\n   * Custom data for this object\n   * @type {{ [key: string]: any; }}\n   * @memberof UpdateCallRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   *\n   * @type {CallSettingsRequest}\n   * @memberof UpdateCallRequest\n   */\n  settings_override?: CallSettingsRequest;\n  /**\n   * the time the call is scheduled to start\n   * @type {string}\n   * @memberof UpdateCallRequest\n   */\n  starts_at?: string;\n}\n/**\n * Represents a call\n * @export\n * @interface UpdateCallResponse\n */\nexport interface UpdateCallResponse {\n  /**\n   *\n   * @type {CallResponse}\n   * @memberof UpdateCallResponse\n   */\n  call: CallResponse;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateCallResponse\n   */\n  duration: string;\n  /**\n   *\n   * @type {Array<MemberResponse>}\n   * @memberof UpdateCallResponse\n   */\n  members: Array<MemberResponse>;\n  /**\n   *\n   * @type {MemberResponse}\n   * @memberof UpdateCallResponse\n   */\n  membership?: MemberResponse;\n  /**\n   *\n   * @type {Array<OwnCapability>}\n   * @memberof UpdateCallResponse\n   */\n  own_capabilities: Array<OwnCapability>;\n}\n/**\n *\n * @export\n * @interface UpdateUserPermissionsRequest\n */\nexport interface UpdateUserPermissionsRequest {\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  grant_permissions?: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  revoke_permissions?: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdateUserPermissionsRequest\n   */\n  user_id: string;\n}\n/**\n *\n * @export\n * @interface UpdateUserPermissionsResponse\n */\nexport interface UpdateUserPermissionsResponse {\n  /**\n   * Duration of the request in human-readable format\n   * @type {string}\n   * @memberof UpdateUserPermissionsResponse\n   */\n  duration: string;\n}\n/**\n * This event is sent to notify about permission changes for a user, clients receiving this event should update their UI accordingly\n * @export\n * @interface UpdatedCallPermissionsEvent\n */\nexport interface UpdatedCallPermissionsEvent {\n  /**\n   *\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  call_cid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  created_at: string;\n  /**\n   * The capabilities of the current user\n   * @type {Array<OwnCapability>}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  own_capabilities: Array<OwnCapability>;\n  /**\n   * The type of event: \"call.permissions_updated\" in this case\n   * @type {string}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  type: string;\n  /**\n   *\n   * @type {UserResponse}\n   * @memberof UpdatedCallPermissionsEvent\n   */\n  user: UserResponse;\n}\n/**\n *\n * @export\n * @interface UserInfoResponse\n */\nexport interface UserInfoResponse {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserInfoResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   *\n   * @type {string}\n   * @memberof UserInfoResponse\n   */\n  image: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserInfoResponse\n   */\n  name: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UserInfoResponse\n   */\n  roles: Array<string>;\n}\n/**\n *\n * @export\n * @interface UserRequest\n */\nexport interface UserRequest {\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserRequest\n   */\n  custom?: { [key: string]: any };\n  /**\n   * User ID\n   * @type {string}\n   * @memberof UserRequest\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRequest\n   */\n  image?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserRequest\n   */\n  language?: string;\n  /**\n   * Optional name of user\n   * @type {string}\n   * @memberof UserRequest\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface UserResponse\n */\nexport interface UserResponse {\n  /**\n   * Date/time of creation\n   * @type {string}\n   * @memberof UserResponse\n   */\n  created_at: string;\n  /**\n   *\n   * @type {{ [key: string]: any; }}\n   * @memberof UserResponse\n   */\n  custom: { [key: string]: any };\n  /**\n   * Date/time of deletion\n   * @type {string}\n   * @memberof UserResponse\n   */\n  deleted_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  image?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  language: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserResponse\n   */\n  role: string;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof UserResponse\n   */\n  teams: Array<string>;\n  /**\n   * Date/time of the last update\n   * @type {string}\n   * @memberof UserResponse\n   */\n  updated_at: string;\n}\n/**\n *\n * @export\n * @interface UserSessionStats\n */\nexport interface UserSessionStats {\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  browser?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  browser_version?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  current_ip?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  current_sfu?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  device_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  device_version?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  distance_to_sfu_kilometers?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  freeze_duration_seconds: number;\n  /**\n   *\n   * @type {GeolocationResult}\n   * @memberof UserSessionStats\n   */\n  geolocation?: GeolocationResult;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  jitter?: Stats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  latency?: Stats;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_fir_per_second?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_freeze_fraction: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_freezes_duration_seconds: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_freezes_per_second?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_nack_per_second?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  max_pli_per_second?: number;\n  /**\n   *\n   * @type {VideoQuality}\n   * @memberof UserSessionStats\n   */\n  max_publishing_video_quality?: VideoQuality;\n  /**\n   *\n   * @type {VideoQuality}\n   * @memberof UserSessionStats\n   */\n  max_receiving_video_quality?: VideoQuality;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  os?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  os_version?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  packet_loss_fraction: number;\n  /**\n   *\n   * @type {MediaPubSubHint}\n   * @memberof UserSessionStats\n   */\n  pub_sub_hints?: MediaPubSubHint;\n  /**\n   *\n   * @type {Array<PublishedTrackInfo>}\n   * @memberof UserSessionStats\n   */\n  published_tracks?: Array<PublishedTrackInfo>;\n  /**\n   *\n   * @type {MOSStats}\n   * @memberof UserSessionStats\n   */\n  publisher_audio_mos?: MOSStats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  publisher_jitter?: Stats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  publisher_latency?: Stats;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  publisher_noise_cancellation_seconds?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  publisher_packet_loss_fraction: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  publisher_quality_limitation_fraction?: number;\n  /**\n   *\n   * @type {{ [key: string]: number; }}\n   * @memberof UserSessionStats\n   */\n  publisher_video_quality_limitation_duration_seconds?: {\n    [key: string]: number;\n  };\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  publishing_audio_codec?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  publishing_duration_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  publishing_video_codec?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  quality_score: number;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  receiving_audio_codec?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  receiving_duration_seconds: number;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  receiving_video_codec?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  sdk?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  sdk_version?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  session_id: string;\n  /**\n   *\n   * @type {MOSStats}\n   * @memberof UserSessionStats\n   */\n  subscriber_audio_mos?: MOSStats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  subscriber_jitter?: Stats;\n  /**\n   *\n   * @type {Stats}\n   * @memberof UserSessionStats\n   */\n  subscriber_latency?: Stats;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  subscriber_video_quality_throttled_duration_seconds?: number;\n  /**\n   *\n   * @type {Array<Subsession>}\n   * @memberof UserSessionStats\n   */\n  subsessions?: Array<Subsession>;\n  /**\n   *\n   * @type {CallTimeline}\n   * @memberof UserSessionStats\n   */\n  timeline?: CallTimeline;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  total_pixels_in: number;\n  /**\n   *\n   * @type {number}\n   * @memberof UserSessionStats\n   */\n  total_pixels_out: number;\n  /**\n   *\n   * @type {string}\n   * @memberof UserSessionStats\n   */\n  webrtc_version?: string;\n}\n/**\n *\n * @export\n * @interface UserStats\n */\n/**\n *\n * @export\n * @interface UserStats\n */\nexport interface UserStats {\n  /**\n   *\n   * @type {UserInfoResponse}\n   * @memberof UserStats\n   */\n  info: UserInfoResponse;\n  /**\n   *\n   * @type {number}\n   * @memberof UserStats\n   */\n  rating?: number;\n  /**\n   *\n   * @type {Array<UserSessionStats>}\n   * @memberof UserStats\n   */\n  session_stats: Array<UserSessionStats>;\n}\n/**\n *\n * @export\n * @interface VideoQuality\n */\nexport interface VideoQuality {\n  /**\n   *\n   * @type {VideoResolution}\n   * @memberof VideoQuality\n   */\n  resolution?: VideoResolution;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoQuality\n   */\n  usage_type?: string;\n}\n/**\n *\n * @export\n * @interface VideoResolution\n */\nexport interface VideoResolution {\n  /**\n   *\n   * @type {number}\n   * @memberof VideoResolution\n   */\n  height: number;\n  /**\n   *\n   * @type {number}\n   * @memberof VideoResolution\n   */\n  width: number;\n}\n/**\n *\n * @export\n * @interface VideoSettings\n */\nexport interface VideoSettings {\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettings\n   */\n  access_request_enabled: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettings\n   */\n  camera_default_on: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoSettings\n   */\n  camera_facing: VideoSettingsCameraFacingEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettings\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {TargetResolution}\n   * @memberof VideoSettings\n   */\n  target_resolution: TargetResolution;\n}\n\n/**\n * @export\n */\nexport const VideoSettingsCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external',\n} as const;\nexport type VideoSettingsCameraFacingEnum =\n  (typeof VideoSettingsCameraFacingEnum)[keyof typeof VideoSettingsCameraFacingEnum];\n\n/**\n *\n * @export\n * @interface VideoSettingsRequest\n */\nexport interface VideoSettingsRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  access_request_enabled?: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  camera_default_on?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof VideoSettingsRequest\n   */\n  camera_facing?: VideoSettingsRequestCameraFacingEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof VideoSettingsRequest\n   */\n  enabled?: boolean;\n  /**\n   *\n   * @type {TargetResolutionRequest}\n   * @memberof VideoSettingsRequest\n   */\n  target_resolution?: TargetResolutionRequest;\n}\n\n/**\n * @export\n */\nexport const VideoSettingsRequestCameraFacingEnum = {\n  FRONT: 'front',\n  BACK: 'back',\n  EXTERNAL: 'external',\n} as const;\nexport type VideoSettingsRequestCameraFacingEnum =\n  (typeof VideoSettingsRequestCameraFacingEnum)[keyof typeof VideoSettingsRequestCameraFacingEnum];\n\n/**\n *\n * @export\n * @interface WSAuthMessageRequest\n */\nexport interface WSAuthMessageRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof WSAuthMessageRequest\n   */\n  token: string;\n  /**\n   *\n   * @type {ConnectUserDetailsRequest}\n   * @memberof WSAuthMessageRequest\n   */\n  user_details: ConnectUserDetailsRequest;\n}\n/**\n * @type WSEvent\n * The discriminator object for all websocket events, it maps events' payload to the final type\n * @export\n */\nexport type WSEvent =\n  | ({ type: 'call.accepted' } & CallAcceptedEvent)\n  | ({ type: 'call.blocked_user' } & BlockedUserEvent)\n  | ({ type: 'call.closed_caption' } & ClosedCaptionEvent)\n  | ({ type: 'call.created' } & CallCreatedEvent)\n  | ({ type: 'call.deleted' } & CallDeletedEvent)\n  | ({ type: 'call.ended' } & CallEndedEvent)\n  | ({ type: 'call.hls_broadcasting_failed' } & CallHLSBroadcastingFailedEvent)\n  | ({\n      type: 'call.hls_broadcasting_started';\n    } & CallHLSBroadcastingStartedEvent)\n  | ({\n      type: 'call.hls_broadcasting_stopped';\n    } & CallHLSBroadcastingStoppedEvent)\n  | ({ type: 'call.live_started' } & CallLiveStartedEvent)\n  | ({ type: 'call.member_added' } & CallMemberAddedEvent)\n  | ({ type: 'call.member_removed' } & CallMemberRemovedEvent)\n  | ({ type: 'call.member_updated' } & CallMemberUpdatedEvent)\n  | ({\n      type: 'call.member_updated_permission';\n    } & CallMemberUpdatedPermissionEvent)\n  | ({ type: 'call.notification' } & CallNotificationEvent)\n  | ({ type: 'call.permission_request' } & PermissionRequestEvent)\n  | ({ type: 'call.permissions_updated' } & UpdatedCallPermissionsEvent)\n  | ({ type: 'call.reaction_new' } & CallReactionEvent)\n  | ({ type: 'call.recording_failed' } & CallRecordingFailedEvent)\n  | ({ type: 'call.recording_ready' } & CallRecordingReadyEvent)\n  | ({ type: 'call.recording_started' } & CallRecordingStartedEvent)\n  | ({ type: 'call.recording_stopped' } & CallRecordingStoppedEvent)\n  | ({ type: 'call.rejected' } & CallRejectedEvent)\n  | ({ type: 'call.ring' } & CallRingEvent)\n  | ({ type: 'call.session_ended' } & CallSessionEndedEvent)\n  | ({\n      type: 'call.session_participant_joined';\n    } & CallSessionParticipantJoinedEvent)\n  | ({\n      type: 'call.session_participant_left';\n    } & CallSessionParticipantLeftEvent)\n  | ({ type: 'call.session_started' } & CallSessionStartedEvent)\n  | ({ type: 'call.transcription_failed' } & CallTranscriptionFailedEvent)\n  | ({ type: 'call.transcription_ready' } & CallTranscriptionReadyEvent)\n  | ({ type: 'call.transcription_started' } & CallTranscriptionStartedEvent)\n  | ({ type: 'call.transcription_stopped' } & CallTranscriptionStoppedEvent)\n  | ({ type: 'call.unblocked_user' } & UnblockedUserEvent)\n  | ({ type: 'call.updated' } & CallUpdatedEvent)\n  | ({ type: 'call.user_muted' } & CallUserMuted)\n  | ({ type: 'connection.error' } & ConnectionErrorEvent)\n  | ({ type: 'connection.ok' } & ConnectedEvent)\n  | ({ type: 'health.check' } & HealthCheckEvent)\n  | ({ type: 'custom' } & CustomVideoEvent);\n","import { AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { StableWSConnection } from './connection';\nimport { ConnectedEvent, UserRequest, WSEvent } from '../../gen/coordinator';\nimport { AllSfuEvents } from '../../rtc';\n\nexport type UR = Record<string, unknown>;\n\nexport type User =\n  | (Omit<UserRequest, 'role'> & { type?: 'authenticated' })\n  | (Omit<UserRequest, 'role'> & { type: 'guest' })\n  | (Omit<UserRequest, 'id' | 'role'> & {\n      id?: '!anon';\n      type: 'anonymous';\n    });\n\nexport type UserWithId =\n  | (UserRequest & { type?: 'authenticated' })\n  | (UserRequest & { type: 'guest' })\n  | (UserRequest & {\n      id: '!anon';\n      type: 'anonymous';\n    });\n\nexport type { OwnUserResponse } from '../../gen/coordinator';\n\nexport type ConnectAPIResponse = Promise<void | ConnectedEvent>;\n\nexport type LogLevel = 'trace' | 'debug' | 'info' | 'warn' | 'error';\n\ntype ErrorResponseDetails = {\n  code: number;\n  messages: string[];\n};\n\nexport type APIErrorResponse = {\n  code: number;\n  duration: string;\n  message: string;\n  more_info: string;\n  StatusCode: number;\n  details?: ErrorResponseDetails;\n};\n\nexport class ErrorFromResponse<T> extends Error {\n  code?: number;\n  response?: AxiosResponse<T>;\n  status?: number;\n}\n\nexport type ConnectionChangedEvent = {\n  type: 'connection.changed';\n  online: boolean;\n};\n\nexport type TransportChangedEvent = {\n  type: 'transport.changed';\n  mode: 'longpoll';\n};\n\nexport type ConnectionRecoveredEvent = {\n  type: 'connection.recovered';\n};\n\nexport type StreamVideoEvent = (\n  | WSEvent\n  | ConnectionChangedEvent\n  | TransportChangedEvent\n  | ConnectionRecoveredEvent\n) & { received_at?: string | Date };\n\n// TODO: we should use WSCallEvent here but that needs fixing\nexport type StreamCallEvent = Extract<StreamVideoEvent, { call_cid: string }>;\nexport type EventTypes = 'all' | WSEvent['type'];\n\nexport type AllClientEventTypes = 'all' | StreamVideoEvent['type'];\nexport type AllClientEvents = {\n  [K in AllClientEventTypes]: Extract<StreamVideoEvent, { type: K }>;\n};\nexport type ClientEventListener<E extends keyof AllClientEvents> = (\n  event: AllClientEvents[E],\n) => void;\n\nexport type AllClientCallEvents = {\n  [K in EventTypes]: Extract<WSEvent, { type: K }>;\n};\n\nexport type AllCallEvents = AllClientCallEvents & AllSfuEvents;\nexport type CallEventListener<E extends keyof AllCallEvents> = (\n  event: AllCallEvents[E],\n) => void;\n\nexport type Logger = (\n  logLevel: LogLevel,\n  message: string,\n  ...args: unknown[]\n) => void;\n\nexport type StreamClientOptions = Partial<AxiosRequestConfig> & {\n  /**\n   * Used to disable warnings that are triggered by using connectUser or connectAnonymousUser server-side.\n   */\n  allowServerSideConnect?: boolean;\n  axiosRequestConfig?: AxiosRequestConfig;\n  /**\n   * Base url to use for API\n   * such as https://chat-proxy-dublin.stream-io-api.com\n   */\n  baseURL?: string;\n  browser?: boolean;\n  // device?: BaseDeviceFields;\n  enableInsights?: boolean;\n  /** experimental feature, please contact support if you want this feature enabled for you */\n  enableWSFallback?: boolean;\n  logger?: Logger;\n  logLevel?: LogLevel;\n  /**\n   * The URL to use for the location hint.\n   */\n  locationHintUrl?: string;\n  /**\n   * The default timeout for requesting a location hint.\n   */\n  locationHintTimeout?: number;\n  /**\n   * When true, user will be persisted on client. Otherwise if `connectUser` call fails, then you need to\n   * call `connectUser` again to retry.\n   * This is mainly useful for chat application working in offline mode, where you will need client.user to\n   * persist even if connectUser call fails.\n   */\n  persistUserOnConnectionFailure?: boolean;\n\n  /**\n   * The secret key for the API key. This is only needed for server side authentication.\n   */\n  secret?: string;\n\n  warmUp?: boolean;\n  // Set the instance of StableWSConnection on chat client. Its purely for testing purpose and should\n  // not be used in production apps.\n  wsConnection?: StableWSConnection;\n};\n\nexport type TokenProvider = () => Promise<string>;\nexport type TokenOrProvider = null | string | TokenProvider | undefined;\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"google/protobuf/struct.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\nimport type {\n  BinaryReadOptions,\n  BinaryWriteOptions,\n  IBinaryReader,\n  IBinaryWriter,\n  JsonObject,\n  JsonReadOptions,\n  JsonValue,\n  JsonWriteOptions,\n  PartialMessage,\n} from '@protobuf-ts/runtime';\nimport {\n  isJsonObject,\n  MessageType,\n  reflectionMergePartial,\n  typeofJsonValue,\n  UnknownFieldHandler,\n  WireType,\n} from '@protobuf-ts/runtime';\n\n/**\n * `Struct` represents a structured data value, consisting of fields\n * which map to dynamically typed values. In some languages, `Struct`\n * might be supported by a native representation. For example, in\n * scripting languages like JS a struct is represented as an\n * object. The details of that representation are described together\n * with the proto support for the language.\n *\n * The JSON representation for `Struct` is JSON object.\n *\n * @generated from protobuf message google.protobuf.Struct\n */\nexport interface Struct {\n  /**\n   * Unordered map of dynamically typed values.\n   *\n   * @generated from protobuf field: map<string, google.protobuf.Value> fields = 1;\n   */\n  fields: {\n    [key: string]: Value;\n  };\n}\n/**\n * `Value` represents a dynamically typed value which can be either\n * null, a number, a string, a boolean, a recursive struct value, or a\n * list of values. A producer of value is expected to set one of these\n * variants. Absence of any variant indicates an error.\n *\n * The JSON representation for `Value` is JSON value.\n *\n * @generated from protobuf message google.protobuf.Value\n */\nexport interface Value {\n  /**\n   * @generated from protobuf oneof: kind\n   */\n  kind:\n    | {\n        oneofKind: 'nullValue';\n        /**\n         * Represents a null value.\n         *\n         * @generated from protobuf field: google.protobuf.NullValue null_value = 1;\n         */\n        nullValue: NullValue;\n      }\n    | {\n        oneofKind: 'numberValue';\n        /**\n         * Represents a double value.\n         *\n         * @generated from protobuf field: double number_value = 2;\n         */\n        numberValue: number;\n      }\n    | {\n        oneofKind: 'stringValue';\n        /**\n         * Represents a string value.\n         *\n         * @generated from protobuf field: string string_value = 3;\n         */\n        stringValue: string;\n      }\n    | {\n        oneofKind: 'boolValue';\n        /**\n         * Represents a boolean value.\n         *\n         * @generated from protobuf field: bool bool_value = 4;\n         */\n        boolValue: boolean;\n      }\n    | {\n        oneofKind: 'structValue';\n        /**\n         * Represents a structured value.\n         *\n         * @generated from protobuf field: google.protobuf.Struct struct_value = 5;\n         */\n        structValue: Struct;\n      }\n    | {\n        oneofKind: 'listValue';\n        /**\n         * Represents a repeated `Value`.\n         *\n         * @generated from protobuf field: google.protobuf.ListValue list_value = 6;\n         */\n        listValue: ListValue;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * `ListValue` is a wrapper around a repeated field of values.\n *\n * The JSON representation for `ListValue` is JSON array.\n *\n * @generated from protobuf message google.protobuf.ListValue\n */\nexport interface ListValue {\n  /**\n   * Repeated field of dynamically typed values.\n   *\n   * @generated from protobuf field: repeated google.protobuf.Value values = 1;\n   */\n  values: Value[];\n}\n/**\n * `NullValue` is a singleton enumeration to represent the null value for the\n * `Value` type union.\n *\n *  The JSON representation for `NullValue` is JSON `null`.\n *\n * @generated from protobuf enum google.protobuf.NullValue\n */\nexport enum NullValue {\n  /**\n   * Null value.\n   *\n   * @generated from protobuf enum value: NULL_VALUE = 0;\n   */\n  NULL_VALUE = 0,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Struct$Type extends MessageType<Struct> {\n  constructor() {\n    super('google.protobuf.Struct', [\n      {\n        no: 1,\n        name: 'fields',\n        kind: 'map',\n        K: 9 /*ScalarType.STRING*/,\n        V: { kind: 'message', T: () => Value },\n      },\n    ]);\n  }\n  /**\n   * Encode `Struct` to JSON object.\n   */\n  internalJsonWrite(message: Struct, options: JsonWriteOptions): JsonValue {\n    let json: JsonObject = {};\n    for (let [k, v] of Object.entries(message.fields)) {\n      json[k] = Value.toJson(v);\n    }\n    return json;\n  }\n  /**\n   * Decode `Struct` from JSON object.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Struct,\n  ): Struct {\n    if (!isJsonObject(json))\n      throw new globalThis.Error(\n        'Unable to parse message ' +\n          this.typeName +\n          ' from JSON ' +\n          typeofJsonValue(json) +\n          '.',\n      );\n    if (!target) target = this.create();\n    for (let [k, v] of globalThis.Object.entries(json)) {\n      target.fields[k] = Value.fromJson(v);\n    }\n    return target;\n  }\n  create(value?: PartialMessage<Struct>): Struct {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.fields = {};\n    if (value !== undefined)\n      reflectionMergePartial<Struct>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Struct,\n  ): Struct {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* map<string, google.protobuf.Value> fields */ 1:\n          this.binaryReadMap1(message.fields, reader, options);\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  private binaryReadMap1(\n    map: Struct['fields'],\n    reader: IBinaryReader,\n    options: BinaryReadOptions,\n  ): void {\n    let len = reader.uint32(),\n      end = reader.pos + len,\n      key: keyof Struct['fields'] | undefined,\n      val: Struct['fields'][any] | undefined;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case 1:\n          key = reader.string();\n          break;\n        case 2:\n          val = Value.internalBinaryRead(reader, reader.uint32(), options);\n          break;\n        default:\n          throw new globalThis.Error(\n            'unknown map entry field for field google.protobuf.Struct.fields',\n          );\n      }\n    }\n    map[key ?? ''] = val ?? Value.create();\n  }\n  internalBinaryWrite(\n    message: Struct,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* map<string, google.protobuf.Value> fields = 1; */\n    for (let k of globalThis.Object.keys(message.fields)) {\n      writer\n        .tag(1, WireType.LengthDelimited)\n        .fork()\n        .tag(1, WireType.LengthDelimited)\n        .string(k);\n      writer.tag(2, WireType.LengthDelimited).fork();\n      Value.internalBinaryWrite(message.fields[k], writer, options);\n      writer.join().join();\n    }\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Struct\n */\nexport const Struct = new Struct$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Value$Type extends MessageType<Value> {\n  constructor() {\n    super('google.protobuf.Value', [\n      {\n        no: 1,\n        name: 'null_value',\n        kind: 'enum',\n        oneof: 'kind',\n        T: () => ['google.protobuf.NullValue', NullValue],\n      },\n      {\n        no: 2,\n        name: 'number_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 1 /*ScalarType.DOUBLE*/,\n      },\n      {\n        no: 3,\n        name: 'string_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'bool_value',\n        kind: 'scalar',\n        oneof: 'kind',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 5,\n        name: 'struct_value',\n        kind: 'message',\n        oneof: 'kind',\n        T: () => Struct,\n      },\n      {\n        no: 6,\n        name: 'list_value',\n        kind: 'message',\n        oneof: 'kind',\n        T: () => ListValue,\n      },\n    ]);\n  }\n  /**\n   * Encode `Value` to JSON value.\n   */\n  internalJsonWrite(message: Value, options: JsonWriteOptions): JsonValue {\n    if (message.kind.oneofKind === undefined) throw new globalThis.Error();\n    switch (message.kind.oneofKind) {\n      case undefined:\n        throw new globalThis.Error();\n      case 'boolValue':\n        return message.kind.boolValue;\n      case 'nullValue':\n        return null;\n      case 'numberValue':\n        let numberValue = message.kind.numberValue;\n        if (typeof numberValue == 'number' && !Number.isFinite(numberValue))\n          throw new globalThis.Error();\n        return numberValue;\n      case 'stringValue':\n        return message.kind.stringValue;\n      case 'listValue':\n        let listValueField = this.fields.find((f) => f.no === 6);\n        if (listValueField?.kind !== 'message') throw new globalThis.Error();\n        return listValueField.T().toJson(message.kind.listValue);\n      case 'structValue':\n        let structValueField = this.fields.find((f) => f.no === 5);\n        if (structValueField?.kind !== 'message') throw new globalThis.Error();\n        return structValueField.T().toJson(message.kind.structValue);\n    }\n  }\n  /**\n   * Decode `Value` from JSON value.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Value,\n  ): Value {\n    if (!target) target = this.create();\n    switch (typeof json) {\n      case 'number':\n        target.kind = { oneofKind: 'numberValue', numberValue: json };\n        break;\n      case 'string':\n        target.kind = { oneofKind: 'stringValue', stringValue: json };\n        break;\n      case 'boolean':\n        target.kind = { oneofKind: 'boolValue', boolValue: json };\n        break;\n      case 'object':\n        if (json === null) {\n          target.kind = {\n            oneofKind: 'nullValue',\n            nullValue: NullValue.NULL_VALUE,\n          };\n        } else if (globalThis.Array.isArray(json)) {\n          target.kind = {\n            oneofKind: 'listValue',\n            listValue: ListValue.fromJson(json),\n          };\n        } else {\n          target.kind = {\n            oneofKind: 'structValue',\n            structValue: Struct.fromJson(json),\n          };\n        }\n        break;\n      default:\n        throw new globalThis.Error(\n          'Unable to parse ' +\n            this.typeName +\n            ' from JSON ' +\n            typeofJsonValue(json),\n        );\n    }\n    return target;\n  }\n  create(value?: PartialMessage<Value>): Value {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.kind = { oneofKind: undefined };\n    if (value !== undefined)\n      reflectionMergePartial<Value>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Value,\n  ): Value {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* google.protobuf.NullValue null_value */ 1:\n          message.kind = {\n            oneofKind: 'nullValue',\n            nullValue: reader.int32(),\n          };\n          break;\n        case /* double number_value */ 2:\n          message.kind = {\n            oneofKind: 'numberValue',\n            numberValue: reader.double(),\n          };\n          break;\n        case /* string string_value */ 3:\n          message.kind = {\n            oneofKind: 'stringValue',\n            stringValue: reader.string(),\n          };\n          break;\n        case /* bool bool_value */ 4:\n          message.kind = {\n            oneofKind: 'boolValue',\n            boolValue: reader.bool(),\n          };\n          break;\n        case /* google.protobuf.Struct struct_value */ 5:\n          message.kind = {\n            oneofKind: 'structValue',\n            structValue: Struct.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.kind as any).structValue,\n            ),\n          };\n          break;\n        case /* google.protobuf.ListValue list_value */ 6:\n          message.kind = {\n            oneofKind: 'listValue',\n            listValue: ListValue.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.kind as any).listValue,\n            ),\n          };\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Value,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* google.protobuf.NullValue null_value = 1; */\n    if (message.kind.oneofKind === 'nullValue')\n      writer.tag(1, WireType.Varint).int32(message.kind.nullValue);\n    /* double number_value = 2; */\n    if (message.kind.oneofKind === 'numberValue')\n      writer.tag(2, WireType.Bit64).double(message.kind.numberValue);\n    /* string string_value = 3; */\n    if (message.kind.oneofKind === 'stringValue')\n      writer.tag(3, WireType.LengthDelimited).string(message.kind.stringValue);\n    /* bool bool_value = 4; */\n    if (message.kind.oneofKind === 'boolValue')\n      writer.tag(4, WireType.Varint).bool(message.kind.boolValue);\n    /* google.protobuf.Struct struct_value = 5; */\n    if (message.kind.oneofKind === 'structValue')\n      Struct.internalBinaryWrite(\n        message.kind.structValue,\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* google.protobuf.ListValue list_value = 6; */\n    if (message.kind.oneofKind === 'listValue')\n      ListValue.internalBinaryWrite(\n        message.kind.listValue,\n        writer.tag(6, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Value\n */\nexport const Value = new Value$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ListValue$Type extends MessageType<ListValue> {\n  constructor() {\n    super('google.protobuf.ListValue', [\n      {\n        no: 1,\n        name: 'values',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Value,\n      },\n    ]);\n  }\n  /**\n   * Encode `ListValue` to JSON array.\n   */\n  internalJsonWrite(message: ListValue, options: JsonWriteOptions): JsonValue {\n    return message.values.map((v) => Value.toJson(v));\n  }\n  /**\n   * Decode `ListValue` from JSON array.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: ListValue,\n  ): ListValue {\n    if (!globalThis.Array.isArray(json))\n      throw new globalThis.Error(\n        'Unable to parse ' +\n          this.typeName +\n          ' from JSON ' +\n          typeofJsonValue(json),\n      );\n    if (!target) target = this.create();\n    let values = json.map((v) => Value.fromJson(v));\n    target.values.push(...values);\n    return target;\n  }\n  create(value?: PartialMessage<ListValue>): ListValue {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.values = [];\n    if (value !== undefined)\n      reflectionMergePartial<ListValue>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ListValue,\n  ): ListValue {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated google.protobuf.Value values */ 1:\n          message.values.push(\n            Value.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ListValue,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated google.protobuf.Value values = 1; */\n    for (let i = 0; i < message.values.length; i++)\n      Value.internalBinaryWrite(\n        message.values[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.ListValue\n */\nexport const ListValue = new ListValue$Type();\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"google/protobuf/timestamp.proto\" (package \"google.protobuf\", syntax proto3)\n// tslint:disable\n//\n// Protocol Buffers - Google's data interchange format\n// Copyright 2008 Google Inc.  All rights reserved.\n// https://developers.google.com/protocol-buffers/\n//\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are\n// met:\n//\n//     * Redistributions of source code must retain the above copyright\n// notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above\n// copyright notice, this list of conditions and the following disclaimer\n// in the documentation and/or other materials provided with the\n// distribution.\n//     * Neither the name of Google Inc. nor the names of its\n// contributors may be used to endorse or promote products derived from\n// this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n//\nimport type {\n  BinaryReadOptions,\n  BinaryWriteOptions,\n  IBinaryReader,\n  IBinaryWriter,\n  JsonReadOptions,\n  JsonValue,\n  JsonWriteOptions,\n  PartialMessage,\n} from '@protobuf-ts/runtime';\nimport {\n  MessageType,\n  PbLong,\n  reflectionMergePartial,\n  typeofJsonValue,\n  UnknownFieldHandler,\n  WireType,\n} from '@protobuf-ts/runtime';\n\n/**\n * A Timestamp represents a point in time independent of any time zone or local\n * calendar, encoded as a count of seconds and fractions of seconds at\n * nanosecond resolution. The count is relative to an epoch at UTC midnight on\n * January 1, 1970, in the proleptic Gregorian calendar which extends the\n * Gregorian calendar backwards to year one.\n *\n * All minutes are 60 seconds long. Leap seconds are \"smeared\" so that no leap\n * second table is needed for interpretation, using a [24-hour linear\n * smear](https://developers.google.com/time/smear).\n *\n * The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By\n * restricting to that range, we ensure that we can convert to and from [RFC\n * 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.\n *\n * # Examples\n *\n * Example 1: Compute Timestamp from POSIX `time()`.\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(time(NULL));\n *     timestamp.set_nanos(0);\n *\n * Example 2: Compute Timestamp from POSIX `gettimeofday()`.\n *\n *     struct timeval tv;\n *     gettimeofday(&tv, NULL);\n *\n *     Timestamp timestamp;\n *     timestamp.set_seconds(tv.tv_sec);\n *     timestamp.set_nanos(tv.tv_usec * 1000);\n *\n * Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n *\n *     FILETIME ft;\n *     GetSystemTimeAsFileTime(&ft);\n *     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;\n *\n *     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\n *     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\n *     Timestamp timestamp;\n *     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\n *     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n *\n * Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n *\n *     long millis = System.currentTimeMillis();\n *\n *     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n *         .setNanos((int) ((millis % 1000) * 1000000)).build();\n *\n *\n * Example 5: Compute Timestamp from Java `Instant.now()`.\n *\n *     Instant now = Instant.now();\n *\n *     Timestamp timestamp =\n *         Timestamp.newBuilder().setSeconds(now.getEpochSecond())\n *             .setNanos(now.getNano()).build();\n *\n *\n * Example 6: Compute Timestamp from current time in Python.\n *\n *     timestamp = Timestamp()\n *     timestamp.GetCurrentTime()\n *\n * # JSON Mapping\n *\n * In JSON format, the Timestamp type is encoded as a string in the\n * [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\n * format is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\n * where {year} is always expressed using four digits while {month}, {day},\n * {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\n * seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\n * are optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\n * is required. A proto3 JSON serializer should always use UTC (as indicated by\n * \"Z\") when printing the Timestamp type and a proto3 JSON parser should be\n * able to accept both UTC and other timezones (as indicated by an offset).\n *\n * For example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n * 01:30 UTC on January 15, 2017.\n *\n * In JavaScript, one can convert a Date object to this format using the\n * standard\n * [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)\n * method. In Python, a standard `datetime.datetime` object can be converted\n * to this format using\n * [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with\n * the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use\n * the Joda Time's [`ISODateTimeFormat.dateTime()`](\n * http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D\n * ) to obtain a formatter capable of generating timestamps in this format.\n *\n *\n *\n * @generated from protobuf message google.protobuf.Timestamp\n */\nexport interface Timestamp {\n  /**\n   * Represents seconds of UTC time since Unix epoch\n   * 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n   * 9999-12-31T23:59:59Z inclusive.\n   *\n   * @generated from protobuf field: int64 seconds = 1;\n   */\n  seconds: string;\n  /**\n   * Non-negative fractions of a second at nanosecond resolution. Negative\n   * second values with fractions must still have non-negative nanos values\n   * that count forward in time. Must be from 0 to 999,999,999\n   * inclusive.\n   *\n   * @generated from protobuf field: int32 nanos = 2;\n   */\n  nanos: number;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass Timestamp$Type extends MessageType<Timestamp> {\n  constructor() {\n    super('google.protobuf.Timestamp', [\n      { no: 1, name: 'seconds', kind: 'scalar', T: 3 /*ScalarType.INT64*/ },\n      { no: 2, name: 'nanos', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n    ]);\n  }\n  /**\n   * Creates a new `Timestamp` for the current time.\n   */\n  now(): Timestamp {\n    const msg = this.create();\n    const ms = Date.now();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos = (ms % 1000) * 1000000;\n    return msg;\n  }\n  /**\n   * Converts a `Timestamp` to a JavaScript Date.\n   */\n  toDate(message: Timestamp): Date {\n    return new Date(\n      PbLong.from(message.seconds).toNumber() * 1000 +\n        Math.ceil(message.nanos / 1000000),\n    );\n  }\n  /**\n   * Converts a JavaScript Date to a `Timestamp`.\n   */\n  fromDate(date: Date): Timestamp {\n    const msg = this.create();\n    const ms = date.getTime();\n    msg.seconds = PbLong.from(Math.floor(ms / 1000)).toString();\n    msg.nanos = (ms % 1000) * 1000000;\n    return msg;\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonWrite(message: Timestamp, options: JsonWriteOptions): JsonValue {\n    let ms = PbLong.from(message.seconds).toNumber() * 1000;\n    if (\n      ms < Date.parse('0001-01-01T00:00:00Z') ||\n      ms > Date.parse('9999-12-31T23:59:59Z')\n    )\n      throw new Error(\n        'Unable to encode Timestamp to JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.',\n      );\n    if (message.nanos < 0)\n      throw new Error(\n        'Unable to encode invalid Timestamp to JSON. Nanos must not be negative.',\n      );\n    let z = 'Z';\n    if (message.nanos > 0) {\n      let nanosStr = (message.nanos + 1000000000).toString().substring(1);\n      if (nanosStr.substring(3) === '000000')\n        z = '.' + nanosStr.substring(0, 3) + 'Z';\n      else if (nanosStr.substring(6) === '000')\n        z = '.' + nanosStr.substring(0, 6) + 'Z';\n      else z = '.' + nanosStr + 'Z';\n    }\n    return new Date(ms).toISOString().replace('.000Z', z);\n  }\n  /**\n   * In JSON format, the `Timestamp` type is encoded as a string\n   * in the RFC 3339 format.\n   */\n  internalJsonRead(\n    json: JsonValue,\n    options: JsonReadOptions,\n    target?: Timestamp,\n  ): Timestamp {\n    if (typeof json !== 'string')\n      throw new Error(\n        'Unable to parse Timestamp from JSON ' + typeofJsonValue(json) + '.',\n      );\n    let matches = json.match(\n      /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2}):([0-9]{2})(?:Z|\\.([0-9]{3,9})Z|([+-][0-9][0-9]:[0-9][0-9]))$/,\n    );\n    if (!matches)\n      throw new Error('Unable to parse Timestamp from JSON. Invalid format.');\n    let ms = Date.parse(\n      matches[1] +\n        '-' +\n        matches[2] +\n        '-' +\n        matches[3] +\n        'T' +\n        matches[4] +\n        ':' +\n        matches[5] +\n        ':' +\n        matches[6] +\n        (matches[8] ? matches[8] : 'Z'),\n    );\n    if (Number.isNaN(ms))\n      throw new Error('Unable to parse Timestamp from JSON. Invalid value.');\n    if (\n      ms < Date.parse('0001-01-01T00:00:00Z') ||\n      ms > Date.parse('9999-12-31T23:59:59Z')\n    )\n      throw new globalThis.Error(\n        'Unable to parse Timestamp from JSON. Must be from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59Z inclusive.',\n      );\n    if (!target) target = this.create();\n    target.seconds = PbLong.from(ms / 1000).toString();\n    target.nanos = 0;\n    if (matches[7])\n      target.nanos =\n        parseInt('1' + matches[7] + '0'.repeat(9 - matches[7].length)) -\n        1000000000;\n    return target;\n  }\n  create(value?: PartialMessage<Timestamp>): Timestamp {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.seconds = '0';\n    message.nanos = 0;\n    if (value !== undefined)\n      reflectionMergePartial<Timestamp>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Timestamp,\n  ): Timestamp {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* int64 seconds */ 1:\n          message.seconds = reader.int64().toString();\n          break;\n        case /* int32 nanos */ 2:\n          message.nanos = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Timestamp,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* int64 seconds = 1; */\n    if (message.seconds !== '0')\n      writer.tag(1, WireType.Varint).int64(message.seconds);\n    /* int32 nanos = 2; */\n    if (message.nanos !== 0)\n      writer.tag(2, WireType.Varint).int32(message.nanos);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message google.protobuf.Timestamp\n */\nexport const Timestamp = new Timestamp$Type();\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/models/models.proto\" (package \"stream.video.sfu.models\", syntax proto3)\n// tslint:disable\nimport type {\n  BinaryReadOptions,\n  BinaryWriteOptions,\n  IBinaryReader,\n  IBinaryWriter,\n  PartialMessage,\n} from '@protobuf-ts/runtime';\nimport {\n  MessageType,\n  reflectionMergePartial,\n  UnknownFieldHandler,\n  WireType,\n} from '@protobuf-ts/runtime';\nimport { Struct } from '../../../google/protobuf/struct';\nimport { Timestamp } from '../../../google/protobuf/timestamp';\n\n/**\n * CallState is the current state of the call\n * as seen by an SFU.\n *\n * @generated from protobuf message stream.video.sfu.models.CallState\n */\nexport interface CallState {\n  /**\n   * participants is the list of participants in the call.\n   * In large calls, the list could be truncated in which\n   * case, the list of participants contains fewer participants\n   * than the counts returned in participant_count. Anonymous\n   * participants are **NOT** included in the list.\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Participant participants = 1;\n   */\n  participants: Participant[];\n  /**\n   * started_at is the time the call session actually started.\n   *\n   * @generated from protobuf field: google.protobuf.Timestamp started_at = 2;\n   */\n  startedAt?: Timestamp;\n  /**\n   * participant_count contains the summary of the counts.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.ParticipantCount participant_count = 3;\n   */\n  participantCount?: ParticipantCount;\n  /**\n   * the list of pins in the call.\n   * Pins are ordered in descending order (most important first).\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Pin pins = 4;\n   */\n  pins: Pin[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ParticipantCount\n */\nexport interface ParticipantCount {\n  /**\n   * Total number of participants in the call including\n   * the anonymous participants.\n   *\n   * @generated from protobuf field: uint32 total = 1;\n   */\n  total: number;\n  /**\n   * Total number of anonymous participants in the call.\n   *\n   * @generated from protobuf field: uint32 anonymous = 2;\n   */\n  anonymous: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Pin\n */\nexport interface Pin {\n  /**\n   * the user to pin\n   *\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * the user sesion_id to pin, if not provided, applies to all sessions\n   *\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n}\n/**\n * those who are online in the call\n *\n * @generated from protobuf message stream.video.sfu.models.Participant\n */\nexport interface Participant {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * map of track id to track type\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackType published_tracks = 3;\n   */\n  publishedTracks: TrackType[];\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp joined_at = 4;\n   */\n  joinedAt?: Timestamp;\n  /**\n   * @generated from protobuf field: string track_lookup_prefix = 5;\n   */\n  trackLookupPrefix: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ConnectionQuality connection_quality = 6;\n   */\n  connectionQuality: ConnectionQuality;\n  /**\n   * @generated from protobuf field: bool is_speaking = 7;\n   */\n  isSpeaking: boolean;\n  /**\n   * @generated from protobuf field: bool is_dominant_speaker = 8;\n   */\n  isDominantSpeaker: boolean;\n  /**\n   * @generated from protobuf field: float audio_level = 9;\n   */\n  audioLevel: number;\n  /**\n   * @generated from protobuf field: string name = 10;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string image = 11;\n   */\n  image: string;\n  /**\n   * @generated from protobuf field: google.protobuf.Struct custom = 12;\n   */\n  custom?: Struct;\n  /**\n   * @generated from protobuf field: repeated string roles = 13;\n   */\n  roles: string[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.StreamQuality\n */\nexport interface StreamQuality {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoQuality video_quality = 1;\n   */\n  videoQuality: VideoQuality;\n  /**\n   * @generated from protobuf field: string user_id = 2;\n   */\n  userId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.VideoDimension\n */\nexport interface VideoDimension {\n  /**\n   * @generated from protobuf field: uint32 width = 1;\n   */\n  width: number;\n  /**\n   * @generated from protobuf field: uint32 height = 2;\n   */\n  height: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.VideoLayer\n */\nexport interface VideoLayer {\n  /**\n   * for tracks with a single layer, this should be HIGH\n   *\n   * @generated from protobuf field: string rid = 1;\n   */\n  rid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoDimension video_dimension = 2;\n   */\n  videoDimension?: VideoDimension;\n  /**\n   * target bitrate, server will measure actual\n   *\n   * @generated from protobuf field: uint32 bitrate = 4;\n   */\n  bitrate: number;\n  /**\n   * @generated from protobuf field: uint32 fps = 5;\n   */\n  fps: number;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoQuality quality = 6;\n   */\n  quality: VideoQuality;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Codec\n */\nexport interface Codec {\n  /**\n   * @generated from protobuf field: uint32 payload_type = 1;\n   */\n  payloadType: number;\n  /**\n   * @generated from protobuf field: string name = 2;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string fmtp_line = 3;\n   */\n  fmtpLine: string;\n  /**\n   * @generated from protobuf field: uint32 clock_rate = 4;\n   */\n  clockRate: number;\n  /**\n   * @generated from protobuf field: string encoding_parameters = 5;\n   */\n  encodingParameters: string;\n  /**\n   * @generated from protobuf field: repeated string feedbacks = 6;\n   */\n  feedbacks: string[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ICETrickle\n */\nexport interface ICETrickle {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string ice_candidate = 2;\n   */\n  iceCandidate: string;\n  /**\n   * @generated from protobuf field: string session_id = 3;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.TrackInfo\n */\nexport interface TrackInfo {\n  /**\n   * @generated from protobuf field: string track_id = 1;\n   */\n  trackId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 2;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.VideoLayer layers = 5;\n   */\n  layers: VideoLayer[];\n  /**\n   * @generated from protobuf field: string mid = 6;\n   */\n  mid: string;\n  /**\n   * for audio tracks\n   *\n   * @generated from protobuf field: bool dtx = 7;\n   */\n  dtx: boolean;\n  /**\n   * @generated from protobuf field: bool stereo = 8;\n   */\n  stereo: boolean;\n  /**\n   * @generated from protobuf field: bool red = 9;\n   */\n  red: boolean;\n}\n/**\n * todo remove this\n *\n * @generated from protobuf message stream.video.sfu.models.Call\n */\nexport interface Call {\n  /**\n   * the call type\n   *\n   * @generated from protobuf field: string type = 1;\n   */\n  type: string;\n  /**\n   * the call id\n   *\n   * @generated from protobuf field: string id = 2;\n   */\n  id: string;\n  /**\n   * the id of the user that created this call\n   *\n   * @generated from protobuf field: string created_by_user_id = 3;\n   */\n  createdByUserId: string;\n  /**\n   * the id of the current host for this call\n   *\n   * @generated from protobuf field: string host_user_id = 4;\n   */\n  hostUserId: string;\n  /**\n   * @generated from protobuf field: google.protobuf.Struct custom = 5;\n   */\n  custom?: Struct;\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp created_at = 6;\n   */\n  createdAt?: Timestamp;\n  /**\n   * @generated from protobuf field: google.protobuf.Timestamp updated_at = 7;\n   */\n  updatedAt?: Timestamp;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Error\n */\nexport interface Error {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ErrorCode code = 1;\n   */\n  code: ErrorCode;\n  /**\n   * @generated from protobuf field: string message = 2;\n   */\n  message: string;\n  /**\n   * @generated from protobuf field: bool should_retry = 3;\n   */\n  shouldRetry: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.ClientDetails\n */\nexport interface ClientDetails {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Sdk sdk = 1;\n   */\n  sdk?: Sdk;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.OS os = 2;\n   */\n  os?: OS;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Browser browser = 3;\n   */\n  browser?: Browser;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Device device = 4;\n   */\n  device?: Device;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Sdk\n */\nexport interface Sdk {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.SdkType type = 1;\n   */\n  type: SdkType;\n  /**\n   * @generated from protobuf field: string major = 2;\n   */\n  major: string;\n  /**\n   * @generated from protobuf field: string minor = 3;\n   */\n  minor: string;\n  /**\n   * @generated from protobuf field: string patch = 4;\n   */\n  patch: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.OS\n */\nexport interface OS {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n  /**\n   * @generated from protobuf field: string architecture = 3;\n   */\n  architecture: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Browser\n */\nexport interface Browser {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.models.Device\n */\nexport interface Device {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: string version = 2;\n   */\n  version: string;\n}\n/**\n * CallGrants represents the set of permissions given\n * to the user for the current call.\n *\n * @generated from protobuf message stream.video.sfu.models.CallGrants\n */\nexport interface CallGrants {\n  /**\n   * @generated from protobuf field: bool can_publish_audio = 1;\n   */\n  canPublishAudio: boolean;\n  /**\n   * @generated from protobuf field: bool can_publish_video = 2;\n   */\n  canPublishVideo: boolean;\n  /**\n   * @generated from protobuf field: bool can_screenshare = 3;\n   */\n  canScreenshare: boolean;\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.PeerType\n */\nexport enum PeerType {\n  /**\n   * todo fix me (marcelo)\n   *\n   * @generated from protobuf enum value: PEER_TYPE_PUBLISHER_UNSPECIFIED = 0;\n   */\n  PUBLISHER_UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: PEER_TYPE_SUBSCRIBER = 1;\n   */\n  SUBSCRIBER = 1,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.ConnectionQuality\n */\nexport enum ConnectionQuality {\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_POOR = 1;\n   */\n  POOR = 1,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_GOOD = 2;\n   */\n  GOOD = 2,\n  /**\n   * @generated from protobuf enum value: CONNECTION_QUALITY_EXCELLENT = 3;\n   */\n  EXCELLENT = 3,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.VideoQuality\n */\nexport enum VideoQuality {\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_LOW_UNSPECIFIED = 0;\n   */\n  LOW_UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_MID = 1;\n   */\n  MID = 1,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_HIGH = 2;\n   */\n  HIGH = 2,\n  /**\n   * @generated from protobuf enum value: VIDEO_QUALITY_OFF = 3;\n   */\n  OFF = 3,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackType\n */\nexport enum TrackType {\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_AUDIO = 1;\n   */\n  AUDIO = 1,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_VIDEO = 2;\n   */\n  VIDEO = 2,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE = 3;\n   */\n  SCREEN_SHARE = 3,\n  /**\n   * @generated from protobuf enum value: TRACK_TYPE_SCREEN_SHARE_AUDIO = 4;\n   */\n  SCREEN_SHARE_AUDIO = 4,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.ErrorCode\n */\nexport enum ErrorCode {\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_NOT_FOUND = 100;\n   */\n  PUBLISH_TRACK_NOT_FOUND = 100,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACKS_MISMATCH = 101;\n   */\n  PUBLISH_TRACKS_MISMATCH = 101,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_OUT_OF_ORDER = 102;\n   */\n  PUBLISH_TRACK_OUT_OF_ORDER = 102,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103;\n   */\n  PUBLISH_TRACK_VIDEO_LAYER_NOT_FOUND = 103,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_LIVE_ENDED = 104;\n   */\n  LIVE_ENDED = 104,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_NOT_FOUND = 200;\n   */\n  PARTICIPANT_NOT_FOUND = 200,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING_OUT = 201;\n   */\n  PARTICIPANT_MIGRATING_OUT = 201,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATION_FAILED = 202;\n   */\n  PARTICIPANT_MIGRATION_FAILED = 202,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MIGRATING = 203;\n   */\n  PARTICIPANT_MIGRATING = 203,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_RECONNECT_FAILED = 204;\n   */\n  PARTICIPANT_RECONNECT_FAILED = 204,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205;\n   */\n  PARTICIPANT_MEDIA_TRANSPORT_FAILURE = 205,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_CALL_NOT_FOUND = 300;\n   */\n  CALL_NOT_FOUND = 300,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_REQUEST_VALIDATION_FAILED = 400;\n   */\n  REQUEST_VALIDATION_FAILED = 400,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_UNAUTHENTICATED = 401;\n   */\n  UNAUTHENTICATED = 401,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_PERMISSION_DENIED = 403;\n   */\n  PERMISSION_DENIED = 403,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_TOO_MANY_REQUESTS = 429;\n   */\n  TOO_MANY_REQUESTS = 429,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_INTERNAL_SERVER_ERROR = 500;\n   */\n  INTERNAL_SERVER_ERROR = 500,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_SHUTTING_DOWN = 600;\n   */\n  SFU_SHUTTING_DOWN = 600,\n  /**\n   * @generated from protobuf enum value: ERROR_CODE_SFU_FULL = 700;\n   */\n  SFU_FULL = 700,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.SdkType\n */\nexport enum SdkType {\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT = 1;\n   */\n  REACT = 1,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANGULAR = 2;\n   */\n  ANGULAR = 2,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_ANDROID = 3;\n   */\n  ANDROID = 3,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_IOS = 4;\n   */\n  IOS = 4,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_FLUTTER = 5;\n   */\n  FLUTTER = 5,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_REACT_NATIVE = 6;\n   */\n  REACT_NATIVE = 6,\n  /**\n   * @generated from protobuf enum value: SDK_TYPE_UNITY = 7;\n   */\n  UNITY = 7,\n}\n/**\n * @generated from protobuf enum stream.video.sfu.models.TrackUnpublishReason\n */\nexport enum TrackUnpublishReason {\n  /**\n   * Default value which is used when the specific reason\n   * for muting the track is not known.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * Represents user muting their tracks.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_USER_MUTED = 1;\n   */\n  USER_MUTED = 1,\n  /**\n   * Represents muting the track because the permission to\n   * publish the track has been revoked.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_PERMISSION_REVOKED = 2;\n   */\n  PERMISSION_REVOKED = 2,\n  /**\n   * Represents muting the track due to moderation actions.\n   * This is different from permission revoked because the\n   * participant can unmute themselves here whereas in case\n   * of \"permission revoke\" it is not possible until the\n   * call permissions are updated.\n   *\n   * @generated from protobuf enum value: TRACK_UNPUBLISH_REASON_MODERATION = 3;\n   */\n  MODERATION = 3,\n}\n/**\n * GoAwayReason represents the reason for the SFU to\n * disconnect the client.\n *\n * @generated from protobuf enum stream.video.sfu.models.GoAwayReason\n */\nexport enum GoAwayReason {\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_SHUTTING_DOWN = 1;\n   */\n  SHUTTING_DOWN = 1,\n  /**\n   * @generated from protobuf enum value: GO_AWAY_REASON_REBALANCE = 2;\n   */\n  REBALANCE = 2,\n}\n/**\n * CallEndedReason represents the reason for the call to end.\n *\n * @generated from protobuf enum stream.video.sfu.models.CallEndedReason\n */\nexport enum CallEndedReason {\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_ENDED = 1;\n   */\n  ENDED = 1,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_LIVE_ENDED = 2;\n   */\n  LIVE_ENDED = 2,\n  /**\n   * @generated from protobuf enum value: CALL_ENDED_REASON_KICKED = 3;\n   */\n  KICKED = 3,\n}\n/**\n * WebsocketReconnectStrategy defines the ws strategies available for handling reconnections.\n *\n * @generated from protobuf enum stream.video.sfu.models.WebsocketReconnectStrategy\n */\nexport enum WebsocketReconnectStrategy {\n  /**\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_UNSPECIFIED = 0;\n   */\n  UNSPECIFIED = 0,\n  /**\n   * Sent after reaching the maximum reconnection attempts, leading to permanent disconnect.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_DISCONNECT = 1;\n   */\n  DISCONNECT = 1,\n  /**\n   * SDK should maintaining existing publisher/subscriber pc instances\n   * and establish a new WebSocket connection.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FAST = 2;\n   */\n  FAST = 2,\n  /**\n   * SDK should drop existing pc instances and creates a fresh WebSocket connection,\n   * ensuring a clean state for the reconnection.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_CLEAN = 3;\n   */\n  CLEAN = 3,\n  /**\n   * SDK should obtain new credentials from the coordinator, drops existing pc instances, and initializes\n   * a completely new WebSocket connection, ensuring a comprehensive reset.\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_FULL = 4;\n   */\n  FULL = 4,\n  /**\n   * SDK should migrate to a new SFU instance\n   *\n   * @generated from protobuf enum value: WEBSOCKET_RECONNECT_STRATEGY_MIGRATE = 5;\n   */\n  MIGRATE = 5,\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallState$Type extends MessageType<CallState> {\n  constructor() {\n    super('stream.video.sfu.models.CallState', [\n      {\n        no: 1,\n        name: 'participants',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Participant,\n      },\n      { no: 2, name: 'started_at', kind: 'message', T: () => Timestamp },\n      {\n        no: 3,\n        name: 'participant_count',\n        kind: 'message',\n        T: () => ParticipantCount,\n      },\n      {\n        no: 4,\n        name: 'pins',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Pin,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<CallState>): CallState {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.participants = [];\n    message.pins = [];\n    if (value !== undefined)\n      reflectionMergePartial<CallState>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: CallState,\n  ): CallState {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated stream.video.sfu.models.Participant participants */ 1:\n          message.participants.push(\n            Participant.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        case /* google.protobuf.Timestamp started_at */ 2:\n          message.startedAt = Timestamp.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.startedAt,\n          );\n          break;\n        case /* stream.video.sfu.models.ParticipantCount participant_count */ 3:\n          message.participantCount = ParticipantCount.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participantCount,\n          );\n          break;\n        case /* repeated stream.video.sfu.models.Pin pins */ 4:\n          message.pins.push(\n            Pin.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: CallState,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated stream.video.sfu.models.Participant participants = 1; */\n    for (let i = 0; i < message.participants.length; i++)\n      Participant.internalBinaryWrite(\n        message.participants[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* google.protobuf.Timestamp started_at = 2; */\n    if (message.startedAt)\n      Timestamp.internalBinaryWrite(\n        message.startedAt,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.ParticipantCount participant_count = 3; */\n    if (message.participantCount)\n      ParticipantCount.internalBinaryWrite(\n        message.participantCount,\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* repeated stream.video.sfu.models.Pin pins = 4; */\n    for (let i = 0; i < message.pins.length; i++)\n      Pin.internalBinaryWrite(\n        message.pins[i],\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallState\n */\nexport const CallState = new CallState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantCount$Type extends MessageType<ParticipantCount> {\n  constructor() {\n    super('stream.video.sfu.models.ParticipantCount', [\n      { no: 1, name: 'total', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 2, name: 'anonymous', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n    ]);\n  }\n  create(value?: PartialMessage<ParticipantCount>): ParticipantCount {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.total = 0;\n    message.anonymous = 0;\n    if (value !== undefined)\n      reflectionMergePartial<ParticipantCount>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ParticipantCount,\n  ): ParticipantCount {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* uint32 total */ 1:\n          message.total = reader.uint32();\n          break;\n        case /* uint32 anonymous */ 2:\n          message.anonymous = reader.uint32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ParticipantCount,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* uint32 total = 1; */\n    if (message.total !== 0)\n      writer.tag(1, WireType.Varint).uint32(message.total);\n    /* uint32 anonymous = 2; */\n    if (message.anonymous !== 0)\n      writer.tag(2, WireType.Varint).uint32(message.anonymous);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ParticipantCount\n */\nexport const ParticipantCount = new ParticipantCount$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Pin$Type extends MessageType<Pin> {\n  constructor() {\n    super('stream.video.sfu.models.Pin', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<Pin>): Pin {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    if (value !== undefined) reflectionMergePartial<Pin>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Pin,\n  ): Pin {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Pin,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Pin\n */\nexport const Pin = new Pin$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Participant$Type extends MessageType<Participant> {\n  constructor() {\n    super('stream.video.sfu.models.Participant', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'published_tracks',\n        kind: 'enum',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'joined_at', kind: 'message', T: () => Timestamp },\n      {\n        no: 5,\n        name: 'track_lookup_prefix',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 6,\n        name: 'connection_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ConnectionQuality',\n          ConnectionQuality,\n          'CONNECTION_QUALITY_',\n        ],\n      },\n      { no: 7, name: 'is_speaking', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      {\n        no: 8,\n        name: 'is_dominant_speaker',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      { no: 9, name: 'audio_level', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },\n      { no: 10, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 11, name: 'image', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 12, name: 'custom', kind: 'message', T: () => Struct },\n      {\n        no: 13,\n        name: 'roles',\n        kind: 'scalar',\n        repeat: 2 /*RepeatType.UNPACKED*/,\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<Participant>): Participant {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.publishedTracks = [];\n    message.trackLookupPrefix = '';\n    message.connectionQuality = 0;\n    message.isSpeaking = false;\n    message.isDominantSpeaker = false;\n    message.audioLevel = 0;\n    message.name = '';\n    message.image = '';\n    message.roles = [];\n    if (value !== undefined)\n      reflectionMergePartial<Participant>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Participant,\n  ): Participant {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* repeated stream.video.sfu.models.TrackType published_tracks */ 3:\n          if (wireType === WireType.LengthDelimited)\n            for (let e = reader.int32() + reader.pos; reader.pos < e; )\n              message.publishedTracks.push(reader.int32());\n          else message.publishedTracks.push(reader.int32());\n          break;\n        case /* google.protobuf.Timestamp joined_at */ 4:\n          message.joinedAt = Timestamp.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.joinedAt,\n          );\n          break;\n        case /* string track_lookup_prefix */ 5:\n          message.trackLookupPrefix = reader.string();\n          break;\n        case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 6:\n          message.connectionQuality = reader.int32();\n          break;\n        case /* bool is_speaking */ 7:\n          message.isSpeaking = reader.bool();\n          break;\n        case /* bool is_dominant_speaker */ 8:\n          message.isDominantSpeaker = reader.bool();\n          break;\n        case /* float audio_level */ 9:\n          message.audioLevel = reader.float();\n          break;\n        case /* string name */ 10:\n          message.name = reader.string();\n          break;\n        case /* string image */ 11:\n          message.image = reader.string();\n          break;\n        case /* google.protobuf.Struct custom */ 12:\n          message.custom = Struct.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.custom,\n          );\n          break;\n        case /* repeated string roles */ 13:\n          message.roles.push(reader.string());\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Participant,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* repeated stream.video.sfu.models.TrackType published_tracks = 3; */\n    if (message.publishedTracks.length) {\n      writer.tag(3, WireType.LengthDelimited).fork();\n      for (let i = 0; i < message.publishedTracks.length; i++)\n        writer.int32(message.publishedTracks[i]);\n      writer.join();\n    }\n    /* google.protobuf.Timestamp joined_at = 4; */\n    if (message.joinedAt)\n      Timestamp.internalBinaryWrite(\n        message.joinedAt,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* string track_lookup_prefix = 5; */\n    if (message.trackLookupPrefix !== '')\n      writer.tag(5, WireType.LengthDelimited).string(message.trackLookupPrefix);\n    /* stream.video.sfu.models.ConnectionQuality connection_quality = 6; */\n    if (message.connectionQuality !== 0)\n      writer.tag(6, WireType.Varint).int32(message.connectionQuality);\n    /* bool is_speaking = 7; */\n    if (message.isSpeaking !== false)\n      writer.tag(7, WireType.Varint).bool(message.isSpeaking);\n    /* bool is_dominant_speaker = 8; */\n    if (message.isDominantSpeaker !== false)\n      writer.tag(8, WireType.Varint).bool(message.isDominantSpeaker);\n    /* float audio_level = 9; */\n    if (message.audioLevel !== 0)\n      writer.tag(9, WireType.Bit32).float(message.audioLevel);\n    /* string name = 10; */\n    if (message.name !== '')\n      writer.tag(10, WireType.LengthDelimited).string(message.name);\n    /* string image = 11; */\n    if (message.image !== '')\n      writer.tag(11, WireType.LengthDelimited).string(message.image);\n    /* google.protobuf.Struct custom = 12; */\n    if (message.custom)\n      Struct.internalBinaryWrite(\n        message.custom,\n        writer.tag(12, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* repeated string roles = 13; */\n    for (let i = 0; i < message.roles.length; i++)\n      writer.tag(13, WireType.LengthDelimited).string(message.roles[i]);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Participant\n */\nexport const Participant = new Participant$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StreamQuality$Type extends MessageType<StreamQuality> {\n  constructor() {\n    super('stream.video.sfu.models.StreamQuality', [\n      {\n        no: 1,\n        name: 'video_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.VideoQuality',\n          VideoQuality,\n          'VIDEO_QUALITY_',\n        ],\n      },\n      { no: 2, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<StreamQuality>): StreamQuality {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.videoQuality = 0;\n    message.userId = '';\n    if (value !== undefined)\n      reflectionMergePartial<StreamQuality>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: StreamQuality,\n  ): StreamQuality {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.VideoQuality video_quality */ 1:\n          message.videoQuality = reader.int32();\n          break;\n        case /* string user_id */ 2:\n          message.userId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: StreamQuality,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.VideoQuality video_quality = 1; */\n    if (message.videoQuality !== 0)\n      writer.tag(1, WireType.Varint).int32(message.videoQuality);\n    /* string user_id = 2; */\n    if (message.userId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.userId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.StreamQuality\n */\nexport const StreamQuality = new StreamQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoDimension$Type extends MessageType<VideoDimension> {\n  constructor() {\n    super('stream.video.sfu.models.VideoDimension', [\n      { no: 1, name: 'width', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 2, name: 'height', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n    ]);\n  }\n  create(value?: PartialMessage<VideoDimension>): VideoDimension {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.width = 0;\n    message.height = 0;\n    if (value !== undefined)\n      reflectionMergePartial<VideoDimension>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoDimension,\n  ): VideoDimension {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* uint32 width */ 1:\n          message.width = reader.uint32();\n          break;\n        case /* uint32 height */ 2:\n          message.height = reader.uint32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoDimension,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* uint32 width = 1; */\n    if (message.width !== 0)\n      writer.tag(1, WireType.Varint).uint32(message.width);\n    /* uint32 height = 2; */\n    if (message.height !== 0)\n      writer.tag(2, WireType.Varint).uint32(message.height);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoDimension\n */\nexport const VideoDimension = new VideoDimension$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayer$Type extends MessageType<VideoLayer> {\n  constructor() {\n    super('stream.video.sfu.models.VideoLayer', [\n      { no: 1, name: 'rid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'video_dimension',\n        kind: 'message',\n        T: () => VideoDimension,\n      },\n      { no: 4, name: 'bitrate', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      { no: 5, name: 'fps', kind: 'scalar', T: 13 /*ScalarType.UINT32*/ },\n      {\n        no: 6,\n        name: 'quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.VideoQuality',\n          VideoQuality,\n          'VIDEO_QUALITY_',\n        ],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<VideoLayer>): VideoLayer {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.rid = '';\n    message.bitrate = 0;\n    message.fps = 0;\n    message.quality = 0;\n    if (value !== undefined)\n      reflectionMergePartial<VideoLayer>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoLayer,\n  ): VideoLayer {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string rid */ 1:\n          message.rid = reader.string();\n          break;\n        case /* stream.video.sfu.models.VideoDimension video_dimension */ 2:\n          message.videoDimension = VideoDimension.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.videoDimension,\n          );\n          break;\n        case /* uint32 bitrate */ 4:\n          message.bitrate = reader.uint32();\n          break;\n        case /* uint32 fps */ 5:\n          message.fps = reader.uint32();\n          break;\n        case /* stream.video.sfu.models.VideoQuality quality */ 6:\n          message.quality = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoLayer,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string rid = 1; */\n    if (message.rid !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.rid);\n    /* stream.video.sfu.models.VideoDimension video_dimension = 2; */\n    if (message.videoDimension)\n      VideoDimension.internalBinaryWrite(\n        message.videoDimension,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* uint32 bitrate = 4; */\n    if (message.bitrate !== 0)\n      writer.tag(4, WireType.Varint).uint32(message.bitrate);\n    /* uint32 fps = 5; */\n    if (message.fps !== 0) writer.tag(5, WireType.Varint).uint32(message.fps);\n    /* stream.video.sfu.models.VideoQuality quality = 6; */\n    if (message.quality !== 0)\n      writer.tag(6, WireType.Varint).int32(message.quality);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.VideoLayer\n */\nexport const VideoLayer = new VideoLayer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Codec$Type extends MessageType<Codec> {\n  constructor() {\n    super('stream.video.sfu.models.Codec', [\n      {\n        no: 1,\n        name: 'payload_type',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      { no: 2, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'fmtp_line', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 4,\n        name: 'clock_rate',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n      {\n        no: 5,\n        name: 'encoding_parameters',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 6,\n        name: 'feedbacks',\n        kind: 'scalar',\n        repeat: 2 /*RepeatType.UNPACKED*/,\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<Codec>): Codec {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.payloadType = 0;\n    message.name = '';\n    message.fmtpLine = '';\n    message.clockRate = 0;\n    message.encodingParameters = '';\n    message.feedbacks = [];\n    if (value !== undefined)\n      reflectionMergePartial<Codec>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Codec,\n  ): Codec {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* uint32 payload_type */ 1:\n          message.payloadType = reader.uint32();\n          break;\n        case /* string name */ 2:\n          message.name = reader.string();\n          break;\n        case /* string fmtp_line */ 3:\n          message.fmtpLine = reader.string();\n          break;\n        case /* uint32 clock_rate */ 4:\n          message.clockRate = reader.uint32();\n          break;\n        case /* string encoding_parameters */ 5:\n          message.encodingParameters = reader.string();\n          break;\n        case /* repeated string feedbacks */ 6:\n          message.feedbacks.push(reader.string());\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Codec,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* uint32 payload_type = 1; */\n    if (message.payloadType !== 0)\n      writer.tag(1, WireType.Varint).uint32(message.payloadType);\n    /* string name = 2; */\n    if (message.name !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.name);\n    /* string fmtp_line = 3; */\n    if (message.fmtpLine !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.fmtpLine);\n    /* uint32 clock_rate = 4; */\n    if (message.clockRate !== 0)\n      writer.tag(4, WireType.Varint).uint32(message.clockRate);\n    /* string encoding_parameters = 5; */\n    if (message.encodingParameters !== '')\n      writer\n        .tag(5, WireType.LengthDelimited)\n        .string(message.encodingParameters);\n    /* repeated string feedbacks = 6; */\n    for (let i = 0; i < message.feedbacks.length; i++)\n      writer.tag(6, WireType.LengthDelimited).string(message.feedbacks[i]);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Codec\n */\nexport const Codec = new Codec$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends MessageType<ICETrickle> {\n  constructor() {\n    super('stream.video.sfu.models.ICETrickle', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      {\n        no: 2,\n        name: 'ice_candidate',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 3, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<ICETrickle>): ICETrickle {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.peerType = 0;\n    message.iceCandidate = '';\n    message.sessionId = '';\n    if (value !== undefined)\n      reflectionMergePartial<ICETrickle>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICETrickle,\n  ): ICETrickle {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.PeerType peer_type */ 1:\n          message.peerType = reader.int32();\n          break;\n        case /* string ice_candidate */ 2:\n          message.iceCandidate = reader.string();\n          break;\n        case /* string session_id */ 3:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICETrickle,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.PeerType peer_type = 1; */\n    if (message.peerType !== 0)\n      writer.tag(1, WireType.Varint).int32(message.peerType);\n    /* string ice_candidate = 2; */\n    if (message.iceCandidate !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.iceCandidate);\n    /* string session_id = 3; */\n    if (message.sessionId !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ICETrickle\n */\nexport const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackInfo$Type extends MessageType<TrackInfo> {\n  constructor() {\n    super('stream.video.sfu.models.TrackInfo', [\n      { no: 1, name: 'track_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 5,\n        name: 'layers',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoLayer,\n      },\n      { no: 6, name: 'mid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 7, name: 'dtx', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 8, name: 'stereo', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 9, name: 'red', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<TrackInfo>): TrackInfo {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.trackId = '';\n    message.trackType = 0;\n    message.layers = [];\n    message.mid = '';\n    message.dtx = false;\n    message.stereo = false;\n    message.red = false;\n    if (value !== undefined)\n      reflectionMergePartial<TrackInfo>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: TrackInfo,\n  ): TrackInfo {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string track_id */ 1:\n          message.trackId = reader.string();\n          break;\n        case /* stream.video.sfu.models.TrackType track_type */ 2:\n          message.trackType = reader.int32();\n          break;\n        case /* repeated stream.video.sfu.models.VideoLayer layers */ 5:\n          message.layers.push(\n            VideoLayer.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        case /* string mid */ 6:\n          message.mid = reader.string();\n          break;\n        case /* bool dtx */ 7:\n          message.dtx = reader.bool();\n          break;\n        case /* bool stereo */ 8:\n          message.stereo = reader.bool();\n          break;\n        case /* bool red */ 9:\n          message.red = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: TrackInfo,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string track_id = 1; */\n    if (message.trackId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.trackId);\n    /* stream.video.sfu.models.TrackType track_type = 2; */\n    if (message.trackType !== 0)\n      writer.tag(2, WireType.Varint).int32(message.trackType);\n    /* repeated stream.video.sfu.models.VideoLayer layers = 5; */\n    for (let i = 0; i < message.layers.length; i++)\n      VideoLayer.internalBinaryWrite(\n        message.layers[i],\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* string mid = 6; */\n    if (message.mid !== '')\n      writer.tag(6, WireType.LengthDelimited).string(message.mid);\n    /* bool dtx = 7; */\n    if (message.dtx !== false) writer.tag(7, WireType.Varint).bool(message.dtx);\n    /* bool stereo = 8; */\n    if (message.stereo !== false)\n      writer.tag(8, WireType.Varint).bool(message.stereo);\n    /* bool red = 9; */\n    if (message.red !== false) writer.tag(9, WireType.Varint).bool(message.red);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.TrackInfo\n */\nexport const TrackInfo = new TrackInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Call$Type extends MessageType<Call> {\n  constructor() {\n    super('stream.video.sfu.models.Call', [\n      { no: 1, name: 'type', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'created_by_user_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'host_user_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 5, name: 'custom', kind: 'message', T: () => Struct },\n      { no: 6, name: 'created_at', kind: 'message', T: () => Timestamp },\n      { no: 7, name: 'updated_at', kind: 'message', T: () => Timestamp },\n    ]);\n  }\n  create(value?: PartialMessage<Call>): Call {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.type = '';\n    message.id = '';\n    message.createdByUserId = '';\n    message.hostUserId = '';\n    if (value !== undefined) reflectionMergePartial<Call>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Call,\n  ): Call {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string type */ 1:\n          message.type = reader.string();\n          break;\n        case /* string id */ 2:\n          message.id = reader.string();\n          break;\n        case /* string created_by_user_id */ 3:\n          message.createdByUserId = reader.string();\n          break;\n        case /* string host_user_id */ 4:\n          message.hostUserId = reader.string();\n          break;\n        case /* google.protobuf.Struct custom */ 5:\n          message.custom = Struct.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.custom,\n          );\n          break;\n        case /* google.protobuf.Timestamp created_at */ 6:\n          message.createdAt = Timestamp.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.createdAt,\n          );\n          break;\n        case /* google.protobuf.Timestamp updated_at */ 7:\n          message.updatedAt = Timestamp.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.updatedAt,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Call,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string type = 1; */\n    if (message.type !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.type);\n    /* string id = 2; */\n    if (message.id !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.id);\n    /* string created_by_user_id = 3; */\n    if (message.createdByUserId !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.createdByUserId);\n    /* string host_user_id = 4; */\n    if (message.hostUserId !== '')\n      writer.tag(4, WireType.LengthDelimited).string(message.hostUserId);\n    /* google.protobuf.Struct custom = 5; */\n    if (message.custom)\n      Struct.internalBinaryWrite(\n        message.custom,\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* google.protobuf.Timestamp created_at = 6; */\n    if (message.createdAt)\n      Timestamp.internalBinaryWrite(\n        message.createdAt,\n        writer.tag(6, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* google.protobuf.Timestamp updated_at = 7; */\n    if (message.updatedAt)\n      Timestamp.internalBinaryWrite(\n        message.updatedAt,\n        writer.tag(7, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Call\n */\nexport const Call = new Call$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n  constructor() {\n    super('stream.video.sfu.models.Error', [\n      {\n        no: 1,\n        name: 'code',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ErrorCode',\n          ErrorCode,\n          'ERROR_CODE_',\n        ],\n      },\n      { no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'should_retry', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<Error>): Error {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.code = 0;\n    message.message = '';\n    message.shouldRetry = false;\n    if (value !== undefined)\n      reflectionMergePartial<Error>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Error,\n  ): Error {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.ErrorCode code */ 1:\n          message.code = reader.int32();\n          break;\n        case /* string message */ 2:\n          message.message = reader.string();\n          break;\n        case /* bool should_retry */ 3:\n          message.shouldRetry = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Error,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.ErrorCode code = 1; */\n    if (message.code !== 0) writer.tag(1, WireType.Varint).int32(message.code);\n    /* string message = 2; */\n    if (message.message !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.message);\n    /* bool should_retry = 3; */\n    if (message.shouldRetry !== false)\n      writer.tag(3, WireType.Varint).bool(message.shouldRetry);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Error\n */\nexport const Error = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ClientDetails$Type extends MessageType<ClientDetails> {\n  constructor() {\n    super('stream.video.sfu.models.ClientDetails', [\n      { no: 1, name: 'sdk', kind: 'message', T: () => Sdk },\n      { no: 2, name: 'os', kind: 'message', T: () => OS },\n      { no: 3, name: 'browser', kind: 'message', T: () => Browser },\n      { no: 4, name: 'device', kind: 'message', T: () => Device },\n    ]);\n  }\n  create(value?: PartialMessage<ClientDetails>): ClientDetails {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<ClientDetails>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ClientDetails,\n  ): ClientDetails {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Sdk sdk */ 1:\n          message.sdk = Sdk.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.sdk,\n          );\n          break;\n        case /* stream.video.sfu.models.OS os */ 2:\n          message.os = OS.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.os,\n          );\n          break;\n        case /* stream.video.sfu.models.Browser browser */ 3:\n          message.browser = Browser.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.browser,\n          );\n          break;\n        case /* stream.video.sfu.models.Device device */ 4:\n          message.device = Device.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.device,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ClientDetails,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Sdk sdk = 1; */\n    if (message.sdk)\n      Sdk.internalBinaryWrite(\n        message.sdk,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.OS os = 2; */\n    if (message.os)\n      OS.internalBinaryWrite(\n        message.os,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.Browser browser = 3; */\n    if (message.browser)\n      Browser.internalBinaryWrite(\n        message.browser,\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.Device device = 4; */\n    if (message.device)\n      Device.internalBinaryWrite(\n        message.device,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.ClientDetails\n */\nexport const ClientDetails = new ClientDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Sdk$Type extends MessageType<Sdk> {\n  constructor() {\n    super('stream.video.sfu.models.Sdk', [\n      {\n        no: 1,\n        name: 'type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.SdkType', SdkType, 'SDK_TYPE_'],\n      },\n      { no: 2, name: 'major', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'minor', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 4, name: 'patch', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<Sdk>): Sdk {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.type = 0;\n    message.major = '';\n    message.minor = '';\n    message.patch = '';\n    if (value !== undefined) reflectionMergePartial<Sdk>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Sdk,\n  ): Sdk {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.SdkType type */ 1:\n          message.type = reader.int32();\n          break;\n        case /* string major */ 2:\n          message.major = reader.string();\n          break;\n        case /* string minor */ 3:\n          message.minor = reader.string();\n          break;\n        case /* string patch */ 4:\n          message.patch = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Sdk,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.SdkType type = 1; */\n    if (message.type !== 0) writer.tag(1, WireType.Varint).int32(message.type);\n    /* string major = 2; */\n    if (message.major !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.major);\n    /* string minor = 3; */\n    if (message.minor !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.minor);\n    /* string patch = 4; */\n    if (message.patch !== '')\n      writer.tag(4, WireType.LengthDelimited).string(message.patch);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Sdk\n */\nexport const Sdk = new Sdk$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass OS$Type extends MessageType<OS> {\n  constructor() {\n    super('stream.video.sfu.models.OS', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'architecture',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<OS>): OS {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.name = '';\n    message.version = '';\n    message.architecture = '';\n    if (value !== undefined) reflectionMergePartial<OS>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: OS,\n  ): OS {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string name */ 1:\n          message.name = reader.string();\n          break;\n        case /* string version */ 2:\n          message.version = reader.string();\n          break;\n        case /* string architecture */ 3:\n          message.architecture = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: OS,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string name = 1; */\n    if (message.name !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.name);\n    /* string version = 2; */\n    if (message.version !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.version);\n    /* string architecture = 3; */\n    if (message.architecture !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.architecture);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.OS\n */\nexport const OS = new OS$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Browser$Type extends MessageType<Browser> {\n  constructor() {\n    super('stream.video.sfu.models.Browser', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<Browser>): Browser {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.name = '';\n    message.version = '';\n    if (value !== undefined)\n      reflectionMergePartial<Browser>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Browser,\n  ): Browser {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string name */ 1:\n          message.name = reader.string();\n          break;\n        case /* string version */ 2:\n          message.version = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Browser,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string name = 1; */\n    if (message.name !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.name);\n    /* string version = 2; */\n    if (message.version !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.version);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Browser\n */\nexport const Browser = new Browser$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Device$Type extends MessageType<Device> {\n  constructor() {\n    super('stream.video.sfu.models.Device', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'version', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<Device>): Device {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.name = '';\n    message.version = '';\n    if (value !== undefined)\n      reflectionMergePartial<Device>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Device,\n  ): Device {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string name */ 1:\n          message.name = reader.string();\n          break;\n        case /* string version */ 2:\n          message.version = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Device,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string name = 1; */\n    if (message.name !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.name);\n    /* string version = 2; */\n    if (message.version !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.version);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.Device\n */\nexport const Device = new Device$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrants$Type extends MessageType<CallGrants> {\n  constructor() {\n    super('stream.video.sfu.models.CallGrants', [\n      {\n        no: 1,\n        name: 'can_publish_audio',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 2,\n        name: 'can_publish_video',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n      {\n        no: 3,\n        name: 'can_screenshare',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<CallGrants>): CallGrants {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.canPublishAudio = false;\n    message.canPublishVideo = false;\n    message.canScreenshare = false;\n    if (value !== undefined)\n      reflectionMergePartial<CallGrants>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: CallGrants,\n  ): CallGrants {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* bool can_publish_audio */ 1:\n          message.canPublishAudio = reader.bool();\n          break;\n        case /* bool can_publish_video */ 2:\n          message.canPublishVideo = reader.bool();\n          break;\n        case /* bool can_screenshare */ 3:\n          message.canScreenshare = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: CallGrants,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* bool can_publish_audio = 1; */\n    if (message.canPublishAudio !== false)\n      writer.tag(1, WireType.Varint).bool(message.canPublishAudio);\n    /* bool can_publish_video = 2; */\n    if (message.canPublishVideo !== false)\n      writer.tag(2, WireType.Varint).bool(message.canPublishVideo);\n    /* bool can_screenshare = 3; */\n    if (message.canScreenshare !== false)\n      writer.tag(3, WireType.Varint).bool(message.canScreenshare);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.models.CallGrants\n */\nexport const CallGrants = new CallGrants$Type();\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\nimport {\n  Error,\n  ICETrickle,\n  PeerType,\n  TrackInfo,\n  TrackType,\n  VideoDimension,\n} from '../models/models';\nimport { ServiceType } from '@protobuf-ts/runtime-rpc';\nimport type {\n  BinaryReadOptions,\n  BinaryWriteOptions,\n  IBinaryReader,\n  IBinaryWriter,\n  PartialMessage,\n} from '@protobuf-ts/runtime';\nimport {\n  MessageType,\n  reflectionMergePartial,\n  UnknownFieldHandler,\n  WireType,\n} from '@protobuf-ts/runtime';\n\n/**\n * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */\nexport interface StartNoiseCancellationRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */\nexport interface StartNoiseCancellationResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */\nexport interface StopNoiseCancellationRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */\nexport interface StopNoiseCancellationResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendStatsRequest\n */\nexport interface SendStatsRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: string subscriber_stats = 2;\n   */\n  subscriberStats: string;\n  /**\n   * @generated from protobuf field: string publisher_stats = 3;\n   */\n  publisherStats: string;\n  /**\n   * @generated from protobuf field: string webrtc_version = 4;\n   */\n  webrtcVersion: string;\n  /**\n   * @generated from protobuf field: string sdk = 5;\n   */\n  sdk: string;\n  /**\n   * @generated from protobuf field: string sdk_version = 6;\n   */\n  sdkVersion: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendStatsResponse\n */\nexport interface SendStatsResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICERestartRequest\n */\nexport interface ICERestartRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 2;\n   */\n  peerType: PeerType;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICERestartResponse\n */\nexport interface ICERestartResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 1;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */\nexport interface UpdateMuteStatesRequest {\n  /**\n   * @generated from protobuf field: string session_id = 1;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackMuteState mute_states = 3;\n   */\n  muteStates: TrackMuteState[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */\nexport interface UpdateMuteStatesResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.TrackMuteState\n */\nexport interface TrackMuteState {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 1;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: bool muted = 2;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.AudioMuteChanged\n */\nexport interface AudioMuteChanged {\n  /**\n   * @generated from protobuf field: bool muted = 1;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.VideoMuteChanged\n */\nexport interface VideoMuteChanged {\n  /**\n   * @generated from protobuf field: bool muted = 2;\n   */\n  muted: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */\nexport interface UpdateSubscriptionsRequest {\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3;\n   */\n  tracks: TrackSubscriptionDetails[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */\nexport interface UpdateSubscriptionsResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */\nexport interface TrackSubscriptionDetails {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType track_type = 3;\n   */\n  trackType: TrackType;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.VideoDimension dimension = 4;\n   */\n  dimension?: VideoDimension;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendAnswerRequest\n */\nexport interface SendAnswerRequest {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string sdp = 2;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 3;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SendAnswerResponse\n */\nexport interface SendAnswerResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.ICETrickleResponse\n */\nexport interface ICETrickleResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SetPublisherRequest\n */\nexport interface SetPublisherRequest {\n  /**\n   * sdp offer\n   *\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo tracks = 3;\n   */\n  tracks: TrackInfo[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.signal.SetPublisherResponse\n */\nexport interface SetPublisherResponse {\n  /**\n   * sdp answer\n   *\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: bool ice_restart = 3;\n   */\n  iceRestart: boolean;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationRequest$Type extends MessageType<StartNoiseCancellationRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(\n    value?: PartialMessage<StartNoiseCancellationRequest>,\n  ): StartNoiseCancellationRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    if (value !== undefined)\n      reflectionMergePartial<StartNoiseCancellationRequest>(\n        this,\n        message,\n        value,\n      );\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: StartNoiseCancellationRequest,\n  ): StartNoiseCancellationRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 1:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: StartNoiseCancellationRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 1; */\n    if (message.sessionId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationRequest\n */\nexport const StartNoiseCancellationRequest =\n  new StartNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StartNoiseCancellationResponse$Type extends MessageType<StartNoiseCancellationResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.StartNoiseCancellationResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(\n    value?: PartialMessage<StartNoiseCancellationResponse>,\n  ): StartNoiseCancellationResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<StartNoiseCancellationResponse>(\n        this,\n        message,\n        value,\n      );\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: StartNoiseCancellationResponse,\n  ): StartNoiseCancellationResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 1:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: StartNoiseCancellationResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 1; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StartNoiseCancellationResponse\n */\nexport const StartNoiseCancellationResponse =\n  new StartNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationRequest$Type extends MessageType<StopNoiseCancellationRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(\n    value?: PartialMessage<StopNoiseCancellationRequest>,\n  ): StopNoiseCancellationRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    if (value !== undefined)\n      reflectionMergePartial<StopNoiseCancellationRequest>(\n        this,\n        message,\n        value,\n      );\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: StopNoiseCancellationRequest,\n  ): StopNoiseCancellationRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 1:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: StopNoiseCancellationRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 1; */\n    if (message.sessionId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationRequest\n */\nexport const StopNoiseCancellationRequest =\n  new StopNoiseCancellationRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass StopNoiseCancellationResponse$Type extends MessageType<StopNoiseCancellationResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.StopNoiseCancellationResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(\n    value?: PartialMessage<StopNoiseCancellationResponse>,\n  ): StopNoiseCancellationResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<StopNoiseCancellationResponse>(\n        this,\n        message,\n        value,\n      );\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: StopNoiseCancellationResponse,\n  ): StopNoiseCancellationResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 1:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: StopNoiseCancellationResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 1; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.StopNoiseCancellationResponse\n */\nexport const StopNoiseCancellationResponse =\n  new StopNoiseCancellationResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsRequest$Type extends MessageType<SendStatsRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'subscriber_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 3,\n        name: 'publisher_stats',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'webrtc_version',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      { no: 5, name: 'sdk', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 6,\n        name: 'sdk_version',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<SendStatsRequest>): SendStatsRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    message.subscriberStats = '';\n    message.publisherStats = '';\n    message.webrtcVersion = '';\n    message.sdk = '';\n    message.sdkVersion = '';\n    if (value !== undefined)\n      reflectionMergePartial<SendStatsRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SendStatsRequest,\n  ): SendStatsRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 1:\n          message.sessionId = reader.string();\n          break;\n        case /* string subscriber_stats */ 2:\n          message.subscriberStats = reader.string();\n          break;\n        case /* string publisher_stats */ 3:\n          message.publisherStats = reader.string();\n          break;\n        case /* string webrtc_version */ 4:\n          message.webrtcVersion = reader.string();\n          break;\n        case /* string sdk */ 5:\n          message.sdk = reader.string();\n          break;\n        case /* string sdk_version */ 6:\n          message.sdkVersion = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SendStatsRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 1; */\n    if (message.sessionId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sessionId);\n    /* string subscriber_stats = 2; */\n    if (message.subscriberStats !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.subscriberStats);\n    /* string publisher_stats = 3; */\n    if (message.publisherStats !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.publisherStats);\n    /* string webrtc_version = 4; */\n    if (message.webrtcVersion !== '')\n      writer.tag(4, WireType.LengthDelimited).string(message.webrtcVersion);\n    /* string sdk = 5; */\n    if (message.sdk !== '')\n      writer.tag(5, WireType.LengthDelimited).string(message.sdk);\n    /* string sdk_version = 6; */\n    if (message.sdkVersion !== '')\n      writer.tag(6, WireType.LengthDelimited).string(message.sdkVersion);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsRequest\n */\nexport const SendStatsRequest = new SendStatsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendStatsResponse$Type extends MessageType<SendStatsResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SendStatsResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(value?: PartialMessage<SendStatsResponse>): SendStatsResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<SendStatsResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SendStatsResponse,\n  ): SendStatsResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 1:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SendStatsResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 1; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendStatsResponse\n */\nexport const SendStatsResponse = new SendStatsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartRequest$Type extends MessageType<ICERestartRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 2,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<ICERestartRequest>): ICERestartRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    message.peerType = 0;\n    if (value !== undefined)\n      reflectionMergePartial<ICERestartRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICERestartRequest,\n  ): ICERestartRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 1:\n          message.sessionId = reader.string();\n          break;\n        case /* stream.video.sfu.models.PeerType peer_type */ 2:\n          message.peerType = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICERestartRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 1; */\n    if (message.sessionId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sessionId);\n    /* stream.video.sfu.models.PeerType peer_type = 2; */\n    if (message.peerType !== 0)\n      writer.tag(2, WireType.Varint).int32(message.peerType);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartRequest\n */\nexport const ICERestartRequest = new ICERestartRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestartResponse$Type extends MessageType<ICERestartResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.ICERestartResponse', [\n      { no: 1, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(value?: PartialMessage<ICERestartResponse>): ICERestartResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<ICERestartResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICERestartResponse,\n  ): ICERestartResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 1:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICERestartResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 1; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICERestartResponse\n */\nexport const ICERestartResponse = new ICERestartResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesRequest$Type extends MessageType<UpdateMuteStatesRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesRequest', [\n      { no: 1, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'mute_states',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackMuteState,\n      },\n    ]);\n  }\n  create(\n    value?: PartialMessage<UpdateMuteStatesRequest>,\n  ): UpdateMuteStatesRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    message.muteStates = [];\n    if (value !== undefined)\n      reflectionMergePartial<UpdateMuteStatesRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: UpdateMuteStatesRequest,\n  ): UpdateMuteStatesRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 1:\n          message.sessionId = reader.string();\n          break;\n        case /* repeated stream.video.sfu.signal.TrackMuteState mute_states */ 3:\n          message.muteStates.push(\n            TrackMuteState.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: UpdateMuteStatesRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 1; */\n    if (message.sessionId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sessionId);\n    /* repeated stream.video.sfu.signal.TrackMuteState mute_states = 3; */\n    for (let i = 0; i < message.muteStates.length; i++)\n      TrackMuteState.internalBinaryWrite(\n        message.muteStates[i],\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesRequest\n */\nexport const UpdateMuteStatesRequest = new UpdateMuteStatesRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateMuteStatesResponse$Type extends MessageType<UpdateMuteStatesResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateMuteStatesResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(\n    value?: PartialMessage<UpdateMuteStatesResponse>,\n  ): UpdateMuteStatesResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<UpdateMuteStatesResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: UpdateMuteStatesResponse,\n  ): UpdateMuteStatesResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: UpdateMuteStatesResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateMuteStatesResponse\n */\nexport const UpdateMuteStatesResponse = new UpdateMuteStatesResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackMuteState$Type extends MessageType<TrackMuteState> {\n  constructor() {\n    super('stream.video.sfu.signal.TrackMuteState', [\n      {\n        no: 1,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 2, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<TrackMuteState>): TrackMuteState {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.trackType = 0;\n    message.muted = false;\n    if (value !== undefined)\n      reflectionMergePartial<TrackMuteState>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: TrackMuteState,\n  ): TrackMuteState {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.TrackType track_type */ 1:\n          message.trackType = reader.int32();\n          break;\n        case /* bool muted */ 2:\n          message.muted = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: TrackMuteState,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.TrackType track_type = 1; */\n    if (message.trackType !== 0)\n      writer.tag(1, WireType.Varint).int32(message.trackType);\n    /* bool muted = 2; */\n    if (message.muted !== false)\n      writer.tag(2, WireType.Varint).bool(message.muted);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackMuteState\n */\nexport const TrackMuteState = new TrackMuteState$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMuteChanged$Type extends MessageType<AudioMuteChanged> {\n  constructor() {\n    super('stream.video.sfu.signal.AudioMuteChanged', [\n      { no: 1, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<AudioMuteChanged>): AudioMuteChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.muted = false;\n    if (value !== undefined)\n      reflectionMergePartial<AudioMuteChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: AudioMuteChanged,\n  ): AudioMuteChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* bool muted */ 1:\n          message.muted = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: AudioMuteChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* bool muted = 1; */\n    if (message.muted !== false)\n      writer.tag(1, WireType.Varint).bool(message.muted);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.AudioMuteChanged\n */\nexport const AudioMuteChanged = new AudioMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMuteChanged$Type extends MessageType<VideoMuteChanged> {\n  constructor() {\n    super('stream.video.sfu.signal.VideoMuteChanged', [\n      { no: 2, name: 'muted', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<VideoMuteChanged>): VideoMuteChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.muted = false;\n    if (value !== undefined)\n      reflectionMergePartial<VideoMuteChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoMuteChanged,\n  ): VideoMuteChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* bool muted */ 2:\n          message.muted = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoMuteChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* bool muted = 2; */\n    if (message.muted !== false)\n      writer.tag(2, WireType.Varint).bool(message.muted);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.VideoMuteChanged\n */\nexport const VideoMuteChanged = new VideoMuteChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsRequest$Type extends MessageType<UpdateSubscriptionsRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsRequest', [\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackSubscriptionDetails,\n      },\n    ]);\n  }\n  create(\n    value?: PartialMessage<UpdateSubscriptionsRequest>,\n  ): UpdateSubscriptionsRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sessionId = '';\n    message.tracks = [];\n    if (value !== undefined)\n      reflectionMergePartial<UpdateSubscriptionsRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: UpdateSubscriptionsRequest,\n  ): UpdateSubscriptionsRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks */ 3:\n          message.tracks.push(\n            TrackSubscriptionDetails.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n            ),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: UpdateSubscriptionsRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* repeated stream.video.sfu.signal.TrackSubscriptionDetails tracks = 3; */\n    for (let i = 0; i < message.tracks.length; i++)\n      TrackSubscriptionDetails.internalBinaryWrite(\n        message.tracks[i],\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsRequest\n */\nexport const UpdateSubscriptionsRequest = new UpdateSubscriptionsRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass UpdateSubscriptionsResponse$Type extends MessageType<UpdateSubscriptionsResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.UpdateSubscriptionsResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(\n    value?: PartialMessage<UpdateSubscriptionsResponse>,\n  ): UpdateSubscriptionsResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<UpdateSubscriptionsResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: UpdateSubscriptionsResponse,\n  ): UpdateSubscriptionsResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: UpdateSubscriptionsResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.UpdateSubscriptionsResponse\n */\nexport const UpdateSubscriptionsResponse =\n  new UpdateSubscriptionsResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackSubscriptionDetails$Type extends MessageType<TrackSubscriptionDetails> {\n  constructor() {\n    super('stream.video.sfu.signal.TrackSubscriptionDetails', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'track_type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'dimension', kind: 'message', T: () => VideoDimension },\n    ]);\n  }\n  create(\n    value?: PartialMessage<TrackSubscriptionDetails>,\n  ): TrackSubscriptionDetails {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.trackType = 0;\n    if (value !== undefined)\n      reflectionMergePartial<TrackSubscriptionDetails>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: TrackSubscriptionDetails,\n  ): TrackSubscriptionDetails {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* stream.video.sfu.models.TrackType track_type */ 3:\n          message.trackType = reader.int32();\n          break;\n        case /* stream.video.sfu.models.VideoDimension dimension */ 4:\n          message.dimension = VideoDimension.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.dimension,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: TrackSubscriptionDetails,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* stream.video.sfu.models.TrackType track_type = 3; */\n    if (message.trackType !== 0)\n      writer.tag(3, WireType.Varint).int32(message.trackType);\n    /* stream.video.sfu.models.VideoDimension dimension = 4; */\n    if (message.dimension)\n      VideoDimension.internalBinaryWrite(\n        message.dimension,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.TrackSubscriptionDetails\n */\nexport const TrackSubscriptionDetails = new TrackSubscriptionDetails$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerRequest$Type extends MessageType<SendAnswerRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerRequest', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      { no: 2, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<SendAnswerRequest>): SendAnswerRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.peerType = 0;\n    message.sdp = '';\n    message.sessionId = '';\n    if (value !== undefined)\n      reflectionMergePartial<SendAnswerRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SendAnswerRequest,\n  ): SendAnswerRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.PeerType peer_type */ 1:\n          message.peerType = reader.int32();\n          break;\n        case /* string sdp */ 2:\n          message.sdp = reader.string();\n          break;\n        case /* string session_id */ 3:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SendAnswerRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.PeerType peer_type = 1; */\n    if (message.peerType !== 0)\n      writer.tag(1, WireType.Varint).int32(message.peerType);\n    /* string sdp = 2; */\n    if (message.sdp !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sdp);\n    /* string session_id = 3; */\n    if (message.sessionId !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerRequest\n */\nexport const SendAnswerRequest = new SendAnswerRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SendAnswerResponse$Type extends MessageType<SendAnswerResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SendAnswerResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(value?: PartialMessage<SendAnswerResponse>): SendAnswerResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<SendAnswerResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SendAnswerResponse,\n  ): SendAnswerResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SendAnswerResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SendAnswerResponse\n */\nexport const SendAnswerResponse = new SendAnswerResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickleResponse$Type extends MessageType<ICETrickleResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.ICETrickleResponse', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(value?: PartialMessage<ICETrickleResponse>): ICETrickleResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<ICETrickleResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICETrickleResponse,\n  ): ICETrickleResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICETrickleResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.ICETrickleResponse\n */\nexport const ICETrickleResponse = new ICETrickleResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherRequest$Type extends MessageType<SetPublisherRequest> {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherRequest', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackInfo,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<SetPublisherRequest>): SetPublisherRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sdp = '';\n    message.sessionId = '';\n    message.tracks = [];\n    if (value !== undefined)\n      reflectionMergePartial<SetPublisherRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SetPublisherRequest,\n  ): SetPublisherRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string sdp */ 1:\n          message.sdp = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* repeated stream.video.sfu.models.TrackInfo tracks */ 3:\n          message.tracks.push(\n            TrackInfo.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SetPublisherRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string sdp = 1; */\n    if (message.sdp !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sdp);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* repeated stream.video.sfu.models.TrackInfo tracks = 3; */\n    for (let i = 0; i < message.tracks.length; i++)\n      TrackInfo.internalBinaryWrite(\n        message.tracks[i],\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherRequest\n */\nexport const SetPublisherRequest = new SetPublisherRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SetPublisherResponse$Type extends MessageType<SetPublisherResponse> {\n  constructor() {\n    super('stream.video.sfu.signal.SetPublisherResponse', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'ice_restart', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 4, name: 'error', kind: 'message', T: () => Error },\n    ]);\n  }\n  create(value?: PartialMessage<SetPublisherResponse>): SetPublisherResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sdp = '';\n    message.sessionId = '';\n    message.iceRestart = false;\n    if (value !== undefined)\n      reflectionMergePartial<SetPublisherResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SetPublisherResponse,\n  ): SetPublisherResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string sdp */ 1:\n          message.sdp = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* bool ice_restart */ 3:\n          message.iceRestart = reader.bool();\n          break;\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SetPublisherResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string sdp = 1; */\n    if (message.sdp !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sdp);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* bool ice_restart = 3; */\n    if (message.iceRestart !== false)\n      writer.tag(3, WireType.Varint).bool(message.iceRestart);\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.signal.SetPublisherResponse\n */\nexport const SetPublisherResponse = new SetPublisherResponse$Type();\n/**\n * @generated ServiceType for protobuf service stream.video.sfu.signal.SignalServer\n */\nexport const SignalServer = new ServiceType(\n  'stream.video.sfu.signal.SignalServer',\n  [\n    {\n      name: 'SetPublisher',\n      options: {},\n      I: SetPublisherRequest,\n      O: SetPublisherResponse,\n    },\n    {\n      name: 'SendAnswer',\n      options: {},\n      I: SendAnswerRequest,\n      O: SendAnswerResponse,\n    },\n    { name: 'IceTrickle', options: {}, I: ICETrickle, O: ICETrickleResponse },\n    {\n      name: 'UpdateSubscriptions',\n      options: {},\n      I: UpdateSubscriptionsRequest,\n      O: UpdateSubscriptionsResponse,\n    },\n    {\n      name: 'UpdateMuteStates',\n      options: {},\n      I: UpdateMuteStatesRequest,\n      O: UpdateMuteStatesResponse,\n    },\n    {\n      name: 'IceRestart',\n      options: {},\n      I: ICERestartRequest,\n      O: ICERestartResponse,\n    },\n    {\n      name: 'SendStats',\n      options: {},\n      I: SendStatsRequest,\n      O: SendStatsResponse,\n    },\n    {\n      name: 'StartNoiseCancellation',\n      options: {},\n      I: StartNoiseCancellationRequest,\n      O: StartNoiseCancellationResponse,\n    },\n    {\n      name: 'StopNoiseCancellation',\n      options: {},\n      I: StopNoiseCancellationRequest,\n      O: StopNoiseCancellationResponse,\n    },\n  ],\n);\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/event/events.proto\" (package \"stream.video.sfu.event\", syntax proto3)\n// tslint:disable\nimport type {\n  BinaryReadOptions,\n  BinaryWriteOptions,\n  IBinaryReader,\n  IBinaryWriter,\n  PartialMessage,\n} from '@protobuf-ts/runtime';\nimport {\n  MessageType,\n  reflectionMergePartial,\n  UnknownFieldHandler,\n  WireType,\n} from '@protobuf-ts/runtime';\nimport {\n  CallEndedReason,\n  CallGrants,\n  CallState,\n  ClientDetails,\n  Codec,\n  ConnectionQuality,\n  Error as Error$,\n  GoAwayReason,\n  ICETrickle as ICETrickle$,\n  Participant,\n  ParticipantCount,\n  PeerType,\n  Pin,\n  TrackInfo,\n  TrackType,\n  TrackUnpublishReason,\n  WebsocketReconnectStrategy,\n} from '../models/models';\nimport { TrackSubscriptionDetails } from '../signal_rpc/signal';\n\n/**\n * SFUEvent is a message that is sent from the SFU to the client.\n *\n * @generated from protobuf message stream.video.sfu.event.SfuEvent\n */\nexport interface SfuEvent {\n  /**\n   * @generated from protobuf oneof: event_payload\n   */\n  eventPayload:\n    | {\n        oneofKind: 'subscriberOffer';\n        /**\n         * SubscriberOffer sends the SDP offer for establishing the\n         * subscriber PeerConnection.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.SubscriberOffer subscriber_offer = 1;\n         */\n        subscriberOffer: SubscriberOffer;\n      }\n    | {\n        oneofKind: 'publisherAnswer';\n        /**\n         * PublisherAnswer sends the SDP answer to the offer sent by\n         * the client for establishing the Publisher PeerConnection.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.PublisherAnswer publisher_answer = 2;\n         */\n        publisherAnswer: PublisherAnswer;\n      }\n    | {\n        oneofKind: 'connectionQualityChanged';\n        /**\n         * ConnectionQualityChanged is sent to inform the connection\n         * quality of the participants in the call. It does not have\n         * to contain the full list of call participants in it.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3;\n         */\n        connectionQualityChanged: ConnectionQualityChanged;\n      }\n    | {\n        oneofKind: 'audioLevelChanged';\n        /**\n         * AudioLevelChanged is sent for change in audio levels of\n         * the participants.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4;\n         */\n        audioLevelChanged: AudioLevelChanged;\n      }\n    | {\n        oneofKind: 'iceTrickle';\n        /**\n         * ICETrickle contains the ICE candidate required to establish\n         * the ICE transport: part of establishing the PeerConnection\n         * and also for ICE restarts.\n         *\n         * @generated from protobuf field: stream.video.sfu.models.ICETrickle ice_trickle = 5;\n         */\n        iceTrickle: ICETrickle$;\n      }\n    | {\n        oneofKind: 'changePublishQuality';\n        /**\n         * ChangePublishQuality advises the publisher to switch on/off\n         * various qualities of their video stream based on the subscription.\n         * This is done to save the bandwidth and the CPU of the publisher.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6;\n         */\n        changePublishQuality: ChangePublishQuality;\n      }\n    | {\n        oneofKind: 'participantJoined';\n        /**\n         * ParticipantJoined notifies the client that a new participant\n         * has joined the call. This is not sent for anonymous users.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantJoined participant_joined = 10;\n         */\n        participantJoined: ParticipantJoined;\n      }\n    | {\n        oneofKind: 'participantLeft';\n        /**\n         * ParticipantLeft notifies the client that a call participant\n         * has left the call. This is not sent for anonymous users.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantLeft participant_left = 11;\n         */\n        participantLeft: ParticipantLeft;\n      }\n    | {\n        oneofKind: 'dominantSpeakerChanged';\n        /**\n         * DominantSpeakerChanged notifies the client about the current\n         * dominant speaker. This is required for certain use cases like\n         * the spotlight view.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12;\n         */\n        dominantSpeakerChanged: DominantSpeakerChanged;\n      }\n    | {\n        oneofKind: 'joinResponse';\n        /**\n         * JoinResponse acknowledges a participant successfully joining\n         * the call. This is sent in response to the JoinRequest.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.JoinResponse join_response = 13;\n         */\n        joinResponse: JoinResponse;\n      }\n    | {\n        oneofKind: 'healthCheckResponse';\n        /**\n         * HealthCheckResponse is sent in response to the HealthCheckRequest.\n         * It contains the participant count in the call.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.HealthCheckResponse health_check_response = 14;\n         */\n        healthCheckResponse: HealthCheckResponse;\n      }\n    | {\n        oneofKind: 'trackPublished';\n        /**\n         * TrackPublished is sent when a new track (like audio, video, screenshare)\n         * is published by a participant in the call. It is also sent on mute/unmute.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.TrackPublished track_published = 16;\n         */\n        trackPublished: TrackPublished;\n      }\n    | {\n        oneofKind: 'trackUnpublished';\n        /**\n         * TrackUnpublished is sent when a track (like audio, video, screenshare)\n         * is no longer published. It is sent on muting a track or when the participant\n         * is leaving the call.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.TrackUnpublished track_unpublished = 17;\n         */\n        trackUnpublished: TrackUnpublished;\n      }\n    | {\n        oneofKind: 'error';\n        /**\n         * Error is used to communicate any error related to the participant. The\n         * error code and the message explain what went wrong. Whether the participant\n         * can retry is also indicated.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.Error error = 18;\n         */\n        error: Error;\n      }\n    | {\n        oneofKind: 'callGrantsUpdated';\n        /**\n         * CallGrantsUpdated tells what tracks a participant is allowed to publish.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19;\n         */\n        callGrantsUpdated: CallGrantsUpdated;\n      }\n    | {\n        oneofKind: 'goAway';\n        /**\n         * GoAway tells the client to migrate away from the SFU it is connected to.\n         * The reason field indicates why this message was sent.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.GoAway go_away = 20;\n         */\n        goAway: GoAway;\n      }\n    | {\n        oneofKind: 'iceRestart';\n        /**\n         * ICERestart tells the client to perform ICE restart.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ICERestart ice_restart = 21;\n         */\n        iceRestart: ICERestart;\n      }\n    | {\n        oneofKind: 'pinsUpdated';\n        /**\n         * PinsChanged is sent the list of pins in the call changes. This event contains the entire list of pins.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.PinsChanged pins_updated = 22;\n         */\n        pinsUpdated: PinsChanged;\n      }\n    | {\n        oneofKind: 'callEnded';\n        /**\n         * CallEnded is sent by the SFU to the client to signal that the call has ended.\n         * The reason may specify why the call has ended.\n         *\n         * @generated from protobuf field: stream.video.sfu.event.CallEnded call_ended = 23;\n         */\n        callEnded: CallEnded;\n      }\n    | {\n        oneofKind: 'participantUpdated';\n        /**\n         * ParticipantUpdated is sent when user data is updated\n         *\n         * @generated from protobuf field: stream.video.sfu.event.ParticipantUpdated participant_updated = 24;\n         */\n        participantUpdated: ParticipantUpdated;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.PinsChanged\n */\nexport interface PinsChanged {\n  /**\n   * the list of pins in the call.\n   * Pins are ordered in descending order (most important first).\n   *\n   * @generated from protobuf field: repeated stream.video.sfu.models.Pin pins = 1;\n   */\n  pins: Pin[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.Error\n */\nexport interface Error {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Error error = 4;\n   */\n  error?: Error$;\n  /**\n   * returns the reconnect strategy to be used by the client\n   *\n   * @generated from protobuf field: stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy = 5;\n   */\n  reconnectStrategy: WebsocketReconnectStrategy;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ICETrickle\n */\nexport interface ICETrickle {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n  /**\n   * @generated from protobuf field: string ice_candidate = 2;\n   */\n  iceCandidate: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ICERestart\n */\nexport interface ICERestart {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.PeerType peer_type = 1;\n   */\n  peerType: PeerType;\n}\n/**\n * SfuRequest is a message that is sent from the client to the SFU.\n *\n * @generated from protobuf message stream.video.sfu.event.SfuRequest\n */\nexport interface SfuRequest {\n  /**\n   * @generated from protobuf oneof: request_payload\n   */\n  requestPayload:\n    | {\n        oneofKind: 'joinRequest';\n        /**\n         * @generated from protobuf field: stream.video.sfu.event.JoinRequest join_request = 1;\n         */\n        joinRequest: JoinRequest;\n      }\n    | {\n        oneofKind: 'healthCheckRequest';\n        /**\n         * @generated from protobuf field: stream.video.sfu.event.HealthCheckRequest health_check_request = 2;\n         */\n        healthCheckRequest: HealthCheckRequest;\n      }\n    | {\n        oneofKind: undefined;\n      };\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.HealthCheckRequest\n */\nexport interface HealthCheckRequest {}\n/**\n * @generated from protobuf message stream.video.sfu.event.HealthCheckResponse\n */\nexport interface HealthCheckResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ParticipantCount participant_count = 1;\n   */\n  participantCount?: ParticipantCount;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.TrackPublished\n */\nexport interface TrackPublished {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType type = 3;\n   */\n  type: TrackType;\n  /**\n   * Participant information here is included as an optimisation\n   * for large calls where broadcasting on every participant join\n   * is expensive. You should **NOT** assume that this will always\n   * be available though you can use it to update the participant\n   * list when it is there.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 4;\n   */\n  participant?: Participant;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.TrackUnpublished\n */\nexport interface TrackUnpublished {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackType type = 3;\n   */\n  type: TrackType;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.TrackUnpublishReason cause = 4;\n   */\n  cause: TrackUnpublishReason;\n  /**\n   * Participant information here is included as an optimisation\n   * for large calls where broadcasting on every participant join\n   * is expensive. You should **NOT** assume that this will always\n   * be available though you can use it to update the participant\n   * list when it is there.\n   *\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 5;\n   */\n  participant?: Participant;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.JoinRequest\n */\nexport interface JoinRequest {\n  /**\n   * @generated from protobuf field: string token = 1;\n   */\n  token: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * dumb SDP that allow us to extract subscriber's decode codecs\n   *\n   * @generated from protobuf field: string subscriber_sdp = 3;\n   */\n  subscriberSdp: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ClientDetails client_details = 4;\n   */\n  clientDetails?: ClientDetails;\n  /**\n   * TODO: we should know if this is going to be\n   * - publishing and subscribing, or just subscribing for future routing\n   *\n   * @generated from protobuf field: stream.video.sfu.event.Migration migration = 5;\n   */\n  migration?: Migration;\n  /**\n   * Fast reconnect flag explicitly indicates that if the participant session\n   * and the associated state is still present in the SFU, the client is ready\n   * to restore the PeerConnection with an ICE restart. If the SFU replies with\n   * \"reconnected: true\" in its JoinResponse, then it is safe to perform an ICE\n   * restart or else the existing PeerConnections must be cleaned up.\n   *\n   * For the SFU, fast_reconnect:false indicates that even if it has the state\n   * cached, the client state is not in sync and hence it must be cleaned up before\n   * proceeding further.\n   *\n   * @generated from protobuf field: bool fast_reconnect = 6;\n   */\n  fastReconnect: boolean;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.Migration\n */\nexport interface Migration {\n  /**\n   * @generated from protobuf field: string from_sfu_id = 1;\n   */\n  fromSfuId: string;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.models.TrackInfo announced_tracks = 2;\n   */\n  announcedTracks: TrackInfo[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3;\n   */\n  subscriptions: TrackSubscriptionDetails[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.JoinResponse\n */\nexport interface JoinResponse {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallState call_state = 1;\n   */\n  callState?: CallState;\n  /**\n   * @generated from protobuf field: bool reconnected = 2;\n   */\n  reconnected: boolean;\n}\n/**\n * ParticipantJoined is fired when a user joins a call\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantJoined\n */\nexport interface ParticipantJoined {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * ParticipantJoined is fired when a user leaves a call\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantLeft\n */\nexport interface ParticipantLeft {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * ParticipantUpdated is fired when user data is updated\n *\n * @generated from protobuf message stream.video.sfu.event.ParticipantUpdated\n */\nexport interface ParticipantUpdated {\n  /**\n   * @generated from protobuf field: string call_cid = 1;\n   */\n  callCid: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Participant participant = 2;\n   */\n  participant?: Participant;\n}\n/**\n * SubscriberOffer is sent when the SFU adds tracks to a subscription\n *\n * @generated from protobuf message stream.video.sfu.event.SubscriberOffer\n */\nexport interface SubscriberOffer {\n  /**\n   * @generated from protobuf field: bool ice_restart = 1;\n   */\n  iceRestart: boolean;\n  /**\n   * @generated from protobuf field: string sdp = 2;\n   */\n  sdp: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.PublisherAnswer\n */\nexport interface PublisherAnswer {\n  /**\n   * @generated from protobuf field: string sdp = 1;\n   */\n  sdp: string;\n}\n/**\n * ConnectionQuality is sent to inform about connection quality changes\n * eg. thierry's connection is not good -> render a red icon Zoom style\n *\n * @generated from protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */\nexport interface ConnectionQualityChanged {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1;\n   */\n  connectionQualityUpdates: ConnectionQualityInfo[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */\nexport interface ConnectionQualityInfo {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.ConnectionQuality connection_quality = 3;\n   */\n  connectionQuality: ConnectionQuality;\n}\n/**\n * DominantSpeakerChanged is sent by the SFU to notify when there is a new dominant speaker in the call\n *\n * @generated from protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */\nexport interface DominantSpeakerChanged {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.AudioLevel\n */\nexport interface AudioLevel {\n  /**\n   * @generated from protobuf field: string user_id = 1;\n   */\n  userId: string;\n  /**\n   * @generated from protobuf field: string session_id = 2;\n   */\n  sessionId: string;\n  /**\n   * 0.0 means complete silence, 1.0 loudest\n   *\n   * @generated from protobuf field: float level = 3;\n   */\n  level: number;\n  /**\n   * @generated from protobuf field: bool is_speaking = 4;\n   */\n  isSpeaking: boolean;\n}\n/**\n * AudioLevelChanged is sent by the SFU to notify about audio levels by user\n *\n * @generated from protobuf message stream.video.sfu.event.AudioLevelChanged\n */\nexport interface AudioLevelChanged {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.AudioLevel audio_levels = 1;\n   */\n  audioLevels: AudioLevel[];\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.AudioMediaRequest\n */\nexport interface AudioMediaRequest {\n  /**\n   * @generated from protobuf field: int32 channel_count = 1;\n   */\n  channelCount: number;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.AudioSender\n */\nexport interface AudioSender {\n  /**\n   * @generated from protobuf field: stream.video.sfu.event.AudioMediaRequest media_request = 1;\n   */\n  mediaRequest?: AudioMediaRequest;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;\n   */\n  codec?: Codec;\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.VideoMediaRequest\n */\nexport interface VideoMediaRequest {\n  /**\n   * @generated from protobuf field: int32 ideal_height = 1;\n   */\n  idealHeight: number;\n  /**\n   * @generated from protobuf field: int32 ideal_width = 2;\n   */\n  idealWidth: number;\n  /**\n   * @generated from protobuf field: int32 ideal_frame_rate = 3;\n   */\n  idealFrameRate: number;\n}\n/**\n * VideoLayerSetting is used to specify various parameters of a particular encoding in simulcast.\n * The parameters are specified here - https://developer.mozilla.org/en-US/docs/Web/API/RTCRtpEncodingParameters\n * SDKs use these parameters sent from the server to dynamically adjust these parameters to save CPU, bandwidth\n *\n * @generated from protobuf message stream.video.sfu.event.VideoLayerSetting\n */\nexport interface VideoLayerSetting {\n  /**\n   * @generated from protobuf field: string name = 1;\n   */\n  name: string;\n  /**\n   * @generated from protobuf field: bool active = 2;\n   */\n  active: boolean;\n  /**\n   * @generated from protobuf field: int32 max_bitrate = 3;\n   */\n  maxBitrate: number;\n  /**\n   * @generated from protobuf field: float scale_resolution_down_by = 4;\n   */\n  scaleResolutionDownBy: number;\n  /**\n   * @generated from protobuf field: stream.video.sfu.event.VideoLayerSetting.Priority priority = 5;\n   */\n  priority: VideoLayerSetting_Priority;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 6;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: uint32 max_framerate = 7;\n   */\n  maxFramerate: number;\n}\n/**\n * @generated from protobuf enum stream.video.sfu.event.VideoLayerSetting.Priority\n */\nexport enum VideoLayerSetting_Priority {\n  /**\n   * @generated from protobuf enum value: PRIORITY_HIGH_UNSPECIFIED = 0;\n   */\n  HIGH_UNSPECIFIED = 0,\n  /**\n   * @generated from protobuf enum value: PRIORITY_LOW = 1;\n   */\n  LOW = 1,\n  /**\n   * @generated from protobuf enum value: PRIORITY_MEDIUM = 2;\n   */\n  MEDIUM = 2,\n  /**\n   * @generated from protobuf enum value: PRIORITY_VERY_LOW = 3;\n   */\n  VERY_LOW = 3,\n}\n/**\n * @generated from protobuf message stream.video.sfu.event.VideoSender\n */\nexport interface VideoSender {\n  /**\n   * @generated from protobuf field: stream.video.sfu.event.VideoMediaRequest media_request = 1;\n   */\n  mediaRequest?: VideoMediaRequest;\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.Codec codec = 2;\n   */\n  codec?: Codec;\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.VideoLayerSetting layers = 3;\n   */\n  layers: VideoLayerSetting[];\n}\n/**\n * sent to users when they need to change the quality of their video\n *\n * @generated from protobuf message stream.video.sfu.event.ChangePublishQuality\n */\nexport interface ChangePublishQuality {\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.AudioSender audio_senders = 1;\n   */\n  audioSenders: AudioSender[];\n  /**\n   * @generated from protobuf field: repeated stream.video.sfu.event.VideoSender video_senders = 2;\n   */\n  videoSenders: VideoSender[];\n}\n/**\n * CallGrants is sent to users when there is a change in the call permissions\n * to publish audio, video or share the screen for a user or a role. This is\n * idempotent and can be sent at any time. Only the current_grants in the latest\n * message should be considered. In other words, this is not dependent on any\n * other message (including previous call_grants_updated message)\n *\n * When this message is received, the client (say, React component) should mute\n * the tracks which are not allowed anymore. For example, if the message has\n * grants {audio:true, video:false} while the user is publishing video, then the\n * client component should mute the video track and gray out the video button.\n * This way, the user will not be able to publish video until the permissions\n * are granted again. Also, muting the track on the client side will prevent\n * the SFU from receiving the video track and will save bandwidth.\n *\n * In simple words, this is exactly the same as muting a track on the client.\n * Here, instead of the user instructing the client, SFU would be doing it.\n *\n * @generated from protobuf message stream.video.sfu.event.CallGrantsUpdated\n */\nexport interface CallGrantsUpdated {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallGrants current_grants = 1;\n   */\n  currentGrants?: CallGrants;\n  /**\n   * @generated from protobuf field: string message = 2;\n   */\n  message: string;\n}\n/**\n * Go away is sent by the SFU to the client to signal to migrate away from the SFU.\n * The evict reason may specify why the user is being evicted.\n *\n * @generated from protobuf message stream.video.sfu.event.GoAway\n */\nexport interface GoAway {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.GoAwayReason reason = 1;\n   */\n  reason: GoAwayReason;\n}\n/**\n * CallEnded is sent by the SFU to the client to signal that the call has ended.\n * The reason may specify why the call has ended.\n *\n * @generated from protobuf message stream.video.sfu.event.CallEnded\n */\nexport interface CallEnded {\n  /**\n   * @generated from protobuf field: stream.video.sfu.models.CallEndedReason reason = 1;\n   */\n  reason: CallEndedReason;\n}\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuEvent$Type extends MessageType<SfuEvent> {\n  constructor() {\n    super('stream.video.sfu.event.SfuEvent', [\n      {\n        no: 1,\n        name: 'subscriber_offer',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => SubscriberOffer,\n      },\n      {\n        no: 2,\n        name: 'publisher_answer',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => PublisherAnswer,\n      },\n      {\n        no: 3,\n        name: 'connection_quality_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ConnectionQualityChanged,\n      },\n      {\n        no: 4,\n        name: 'audio_level_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => AudioLevelChanged,\n      },\n      {\n        no: 5,\n        name: 'ice_trickle',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ICETrickle$,\n      },\n      {\n        no: 6,\n        name: 'change_publish_quality',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ChangePublishQuality,\n      },\n      {\n        no: 10,\n        name: 'participant_joined',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantJoined,\n      },\n      {\n        no: 11,\n        name: 'participant_left',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantLeft,\n      },\n      {\n        no: 12,\n        name: 'dominant_speaker_changed',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => DominantSpeakerChanged,\n      },\n      {\n        no: 13,\n        name: 'join_response',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => JoinResponse,\n      },\n      {\n        no: 14,\n        name: 'health_check_response',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => HealthCheckResponse,\n      },\n      {\n        no: 16,\n        name: 'track_published',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => TrackPublished,\n      },\n      {\n        no: 17,\n        name: 'track_unpublished',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => TrackUnpublished,\n      },\n      {\n        no: 18,\n        name: 'error',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => Error,\n      },\n      {\n        no: 19,\n        name: 'call_grants_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => CallGrantsUpdated,\n      },\n      {\n        no: 20,\n        name: 'go_away',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => GoAway,\n      },\n      {\n        no: 21,\n        name: 'ice_restart',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ICERestart,\n      },\n      {\n        no: 22,\n        name: 'pins_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => PinsChanged,\n      },\n      {\n        no: 23,\n        name: 'call_ended',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => CallEnded,\n      },\n      {\n        no: 24,\n        name: 'participant_updated',\n        kind: 'message',\n        oneof: 'eventPayload',\n        T: () => ParticipantUpdated,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<SfuEvent>): SfuEvent {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.eventPayload = { oneofKind: undefined };\n    if (value !== undefined)\n      reflectionMergePartial<SfuEvent>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SfuEvent,\n  ): SfuEvent {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.event.SubscriberOffer subscriber_offer */ 1:\n          message.eventPayload = {\n            oneofKind: 'subscriberOffer',\n            subscriberOffer: SubscriberOffer.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).subscriberOffer,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.PublisherAnswer publisher_answer */ 2:\n          message.eventPayload = {\n            oneofKind: 'publisherAnswer',\n            publisherAnswer: PublisherAnswer.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).publisherAnswer,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed */ 3:\n          message.eventPayload = {\n            oneofKind: 'connectionQualityChanged',\n            connectionQualityChanged:\n              ConnectionQualityChanged.internalBinaryRead(\n                reader,\n                reader.uint32(),\n                options,\n                (message.eventPayload as any).connectionQualityChanged,\n              ),\n          };\n          break;\n        case /* stream.video.sfu.event.AudioLevelChanged audio_level_changed */ 4:\n          message.eventPayload = {\n            oneofKind: 'audioLevelChanged',\n            audioLevelChanged: AudioLevelChanged.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).audioLevelChanged,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.models.ICETrickle ice_trickle */ 5:\n          message.eventPayload = {\n            oneofKind: 'iceTrickle',\n            iceTrickle: ICETrickle$.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).iceTrickle,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ChangePublishQuality change_publish_quality */ 6:\n          message.eventPayload = {\n            oneofKind: 'changePublishQuality',\n            changePublishQuality: ChangePublishQuality.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).changePublishQuality,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ParticipantJoined participant_joined */ 10:\n          message.eventPayload = {\n            oneofKind: 'participantJoined',\n            participantJoined: ParticipantJoined.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).participantJoined,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ParticipantLeft participant_left */ 11:\n          message.eventPayload = {\n            oneofKind: 'participantLeft',\n            participantLeft: ParticipantLeft.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).participantLeft,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed */ 12:\n          message.eventPayload = {\n            oneofKind: 'dominantSpeakerChanged',\n            dominantSpeakerChanged: DominantSpeakerChanged.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).dominantSpeakerChanged,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.JoinResponse join_response */ 13:\n          message.eventPayload = {\n            oneofKind: 'joinResponse',\n            joinResponse: JoinResponse.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).joinResponse,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.HealthCheckResponse health_check_response */ 14:\n          message.eventPayload = {\n            oneofKind: 'healthCheckResponse',\n            healthCheckResponse: HealthCheckResponse.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).healthCheckResponse,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.TrackPublished track_published */ 16:\n          message.eventPayload = {\n            oneofKind: 'trackPublished',\n            trackPublished: TrackPublished.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).trackPublished,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.TrackUnpublished track_unpublished */ 17:\n          message.eventPayload = {\n            oneofKind: 'trackUnpublished',\n            trackUnpublished: TrackUnpublished.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).trackUnpublished,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.Error error */ 18:\n          message.eventPayload = {\n            oneofKind: 'error',\n            error: Error.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).error,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated */ 19:\n          message.eventPayload = {\n            oneofKind: 'callGrantsUpdated',\n            callGrantsUpdated: CallGrantsUpdated.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).callGrantsUpdated,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.GoAway go_away */ 20:\n          message.eventPayload = {\n            oneofKind: 'goAway',\n            goAway: GoAway.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).goAway,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ICERestart ice_restart */ 21:\n          message.eventPayload = {\n            oneofKind: 'iceRestart',\n            iceRestart: ICERestart.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).iceRestart,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.PinsChanged pins_updated */ 22:\n          message.eventPayload = {\n            oneofKind: 'pinsUpdated',\n            pinsUpdated: PinsChanged.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).pinsUpdated,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.CallEnded call_ended */ 23:\n          message.eventPayload = {\n            oneofKind: 'callEnded',\n            callEnded: CallEnded.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).callEnded,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.ParticipantUpdated participant_updated */ 24:\n          message.eventPayload = {\n            oneofKind: 'participantUpdated',\n            participantUpdated: ParticipantUpdated.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.eventPayload as any).participantUpdated,\n            ),\n          };\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SfuEvent,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.event.SubscriberOffer subscriber_offer = 1; */\n    if (message.eventPayload.oneofKind === 'subscriberOffer')\n      SubscriberOffer.internalBinaryWrite(\n        message.eventPayload.subscriberOffer,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.PublisherAnswer publisher_answer = 2; */\n    if (message.eventPayload.oneofKind === 'publisherAnswer')\n      PublisherAnswer.internalBinaryWrite(\n        message.eventPayload.publisherAnswer,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ConnectionQualityChanged connection_quality_changed = 3; */\n    if (message.eventPayload.oneofKind === 'connectionQualityChanged')\n      ConnectionQualityChanged.internalBinaryWrite(\n        message.eventPayload.connectionQualityChanged,\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.AudioLevelChanged audio_level_changed = 4; */\n    if (message.eventPayload.oneofKind === 'audioLevelChanged')\n      AudioLevelChanged.internalBinaryWrite(\n        message.eventPayload.audioLevelChanged,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.ICETrickle ice_trickle = 5; */\n    if (message.eventPayload.oneofKind === 'iceTrickle')\n      ICETrickle$.internalBinaryWrite(\n        message.eventPayload.iceTrickle,\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ChangePublishQuality change_publish_quality = 6; */\n    if (message.eventPayload.oneofKind === 'changePublishQuality')\n      ChangePublishQuality.internalBinaryWrite(\n        message.eventPayload.changePublishQuality,\n        writer.tag(6, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ParticipantJoined participant_joined = 10; */\n    if (message.eventPayload.oneofKind === 'participantJoined')\n      ParticipantJoined.internalBinaryWrite(\n        message.eventPayload.participantJoined,\n        writer.tag(10, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ParticipantLeft participant_left = 11; */\n    if (message.eventPayload.oneofKind === 'participantLeft')\n      ParticipantLeft.internalBinaryWrite(\n        message.eventPayload.participantLeft,\n        writer.tag(11, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.DominantSpeakerChanged dominant_speaker_changed = 12; */\n    if (message.eventPayload.oneofKind === 'dominantSpeakerChanged')\n      DominantSpeakerChanged.internalBinaryWrite(\n        message.eventPayload.dominantSpeakerChanged,\n        writer.tag(12, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.JoinResponse join_response = 13; */\n    if (message.eventPayload.oneofKind === 'joinResponse')\n      JoinResponse.internalBinaryWrite(\n        message.eventPayload.joinResponse,\n        writer.tag(13, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.HealthCheckResponse health_check_response = 14; */\n    if (message.eventPayload.oneofKind === 'healthCheckResponse')\n      HealthCheckResponse.internalBinaryWrite(\n        message.eventPayload.healthCheckResponse,\n        writer.tag(14, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.TrackPublished track_published = 16; */\n    if (message.eventPayload.oneofKind === 'trackPublished')\n      TrackPublished.internalBinaryWrite(\n        message.eventPayload.trackPublished,\n        writer.tag(16, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.TrackUnpublished track_unpublished = 17; */\n    if (message.eventPayload.oneofKind === 'trackUnpublished')\n      TrackUnpublished.internalBinaryWrite(\n        message.eventPayload.trackUnpublished,\n        writer.tag(17, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.Error error = 18; */\n    if (message.eventPayload.oneofKind === 'error')\n      Error.internalBinaryWrite(\n        message.eventPayload.error,\n        writer.tag(18, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.CallGrantsUpdated call_grants_updated = 19; */\n    if (message.eventPayload.oneofKind === 'callGrantsUpdated')\n      CallGrantsUpdated.internalBinaryWrite(\n        message.eventPayload.callGrantsUpdated,\n        writer.tag(19, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.GoAway go_away = 20; */\n    if (message.eventPayload.oneofKind === 'goAway')\n      GoAway.internalBinaryWrite(\n        message.eventPayload.goAway,\n        writer.tag(20, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ICERestart ice_restart = 21; */\n    if (message.eventPayload.oneofKind === 'iceRestart')\n      ICERestart.internalBinaryWrite(\n        message.eventPayload.iceRestart,\n        writer.tag(21, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.PinsChanged pins_updated = 22; */\n    if (message.eventPayload.oneofKind === 'pinsUpdated')\n      PinsChanged.internalBinaryWrite(\n        message.eventPayload.pinsUpdated,\n        writer.tag(22, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.CallEnded call_ended = 23; */\n    if (message.eventPayload.oneofKind === 'callEnded')\n      CallEnded.internalBinaryWrite(\n        message.eventPayload.callEnded,\n        writer.tag(23, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.ParticipantUpdated participant_updated = 24; */\n    if (message.eventPayload.oneofKind === 'participantUpdated')\n      ParticipantUpdated.internalBinaryWrite(\n        message.eventPayload.participantUpdated,\n        writer.tag(24, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuEvent\n */\nexport const SfuEvent = new SfuEvent$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PinsChanged$Type extends MessageType<PinsChanged> {\n  constructor() {\n    super('stream.video.sfu.event.PinsChanged', [\n      {\n        no: 1,\n        name: 'pins',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => Pin,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<PinsChanged>): PinsChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.pins = [];\n    if (value !== undefined)\n      reflectionMergePartial<PinsChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: PinsChanged,\n  ): PinsChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated stream.video.sfu.models.Pin pins */ 1:\n          message.pins.push(\n            Pin.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: PinsChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated stream.video.sfu.models.Pin pins = 1; */\n    for (let i = 0; i < message.pins.length; i++)\n      Pin.internalBinaryWrite(\n        message.pins[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PinsChanged\n */\nexport const PinsChanged = new PinsChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Error$Type extends MessageType<Error> {\n  constructor() {\n    super('stream.video.sfu.event.Error', [\n      { no: 4, name: 'error', kind: 'message', T: () => Error$ },\n      {\n        no: 5,\n        name: 'reconnect_strategy',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.WebsocketReconnectStrategy',\n          WebsocketReconnectStrategy,\n          'WEBSOCKET_RECONNECT_STRATEGY_',\n        ],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<Error>): Error {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.reconnectStrategy = 0;\n    if (value !== undefined)\n      reflectionMergePartial<Error>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Error,\n  ): Error {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.Error error */ 4:\n          message.error = Error$.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.error,\n          );\n          break;\n        case /* stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy */ 5:\n          message.reconnectStrategy = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Error,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.Error error = 4; */\n    if (message.error)\n      Error$.internalBinaryWrite(\n        message.error,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.WebsocketReconnectStrategy reconnect_strategy = 5; */\n    if (message.reconnectStrategy !== 0)\n      writer.tag(5, WireType.Varint).int32(message.reconnectStrategy);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Error\n */\nexport const Error = new Error$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICETrickle$Type extends MessageType<ICETrickle> {\n  constructor() {\n    super('stream.video.sfu.event.ICETrickle', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n      {\n        no: 2,\n        name: 'ice_candidate',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<ICETrickle>): ICETrickle {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.peerType = 0;\n    message.iceCandidate = '';\n    if (value !== undefined)\n      reflectionMergePartial<ICETrickle>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICETrickle,\n  ): ICETrickle {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.PeerType peer_type */ 1:\n          message.peerType = reader.int32();\n          break;\n        case /* string ice_candidate */ 2:\n          message.iceCandidate = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICETrickle,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.PeerType peer_type = 1; */\n    if (message.peerType !== 0)\n      writer.tag(1, WireType.Varint).int32(message.peerType);\n    /* string ice_candidate = 2; */\n    if (message.iceCandidate !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.iceCandidate);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICETrickle\n */\nexport const ICETrickle = new ICETrickle$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ICERestart$Type extends MessageType<ICERestart> {\n  constructor() {\n    super('stream.video.sfu.event.ICERestart', [\n      {\n        no: 1,\n        name: 'peer_type',\n        kind: 'enum',\n        T: () => ['stream.video.sfu.models.PeerType', PeerType, 'PEER_TYPE_'],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<ICERestart>): ICERestart {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.peerType = 0;\n    if (value !== undefined)\n      reflectionMergePartial<ICERestart>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ICERestart,\n  ): ICERestart {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.PeerType peer_type */ 1:\n          message.peerType = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ICERestart,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.PeerType peer_type = 1; */\n    if (message.peerType !== 0)\n      writer.tag(1, WireType.Varint).int32(message.peerType);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ICERestart\n */\nexport const ICERestart = new ICERestart$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SfuRequest$Type extends MessageType<SfuRequest> {\n  constructor() {\n    super('stream.video.sfu.event.SfuRequest', [\n      {\n        no: 1,\n        name: 'join_request',\n        kind: 'message',\n        oneof: 'requestPayload',\n        T: () => JoinRequest,\n      },\n      {\n        no: 2,\n        name: 'health_check_request',\n        kind: 'message',\n        oneof: 'requestPayload',\n        T: () => HealthCheckRequest,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<SfuRequest>): SfuRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.requestPayload = { oneofKind: undefined };\n    if (value !== undefined)\n      reflectionMergePartial<SfuRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SfuRequest,\n  ): SfuRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.event.JoinRequest join_request */ 1:\n          message.requestPayload = {\n            oneofKind: 'joinRequest',\n            joinRequest: JoinRequest.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.requestPayload as any).joinRequest,\n            ),\n          };\n          break;\n        case /* stream.video.sfu.event.HealthCheckRequest health_check_request */ 2:\n          message.requestPayload = {\n            oneofKind: 'healthCheckRequest',\n            healthCheckRequest: HealthCheckRequest.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n              (message.requestPayload as any).healthCheckRequest,\n            ),\n          };\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SfuRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.event.JoinRequest join_request = 1; */\n    if (message.requestPayload.oneofKind === 'joinRequest')\n      JoinRequest.internalBinaryWrite(\n        message.requestPayload.joinRequest,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.HealthCheckRequest health_check_request = 2; */\n    if (message.requestPayload.oneofKind === 'healthCheckRequest')\n      HealthCheckRequest.internalBinaryWrite(\n        message.requestPayload.healthCheckRequest,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SfuRequest\n */\nexport const SfuRequest = new SfuRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckRequest$Type extends MessageType<HealthCheckRequest> {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckRequest', []);\n  }\n  create(value?: PartialMessage<HealthCheckRequest>): HealthCheckRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<HealthCheckRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: HealthCheckRequest,\n  ): HealthCheckRequest {\n    return target ?? this.create();\n  }\n  internalBinaryWrite(\n    message: HealthCheckRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckRequest\n */\nexport const HealthCheckRequest = new HealthCheckRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass HealthCheckResponse$Type extends MessageType<HealthCheckResponse> {\n  constructor() {\n    super('stream.video.sfu.event.HealthCheckResponse', [\n      {\n        no: 1,\n        name: 'participant_count',\n        kind: 'message',\n        T: () => ParticipantCount,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<HealthCheckResponse>): HealthCheckResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<HealthCheckResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: HealthCheckResponse,\n  ): HealthCheckResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.ParticipantCount participant_count */ 1:\n          message.participantCount = ParticipantCount.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participantCount,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: HealthCheckResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.ParticipantCount participant_count = 1; */\n    if (message.participantCount)\n      ParticipantCount.internalBinaryWrite(\n        message.participantCount,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.HealthCheckResponse\n */\nexport const HealthCheckResponse = new HealthCheckResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackPublished$Type extends MessageType<TrackPublished> {\n  constructor() {\n    super('stream.video.sfu.event.TrackPublished', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      { no: 4, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n  create(value?: PartialMessage<TrackPublished>): TrackPublished {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.type = 0;\n    if (value !== undefined)\n      reflectionMergePartial<TrackPublished>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: TrackPublished,\n  ): TrackPublished {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* stream.video.sfu.models.TrackType type */ 3:\n          message.type = reader.int32();\n          break;\n        case /* stream.video.sfu.models.Participant participant */ 4:\n          message.participant = Participant.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participant,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: TrackPublished,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* stream.video.sfu.models.TrackType type = 3; */\n    if (message.type !== 0) writer.tag(3, WireType.Varint).int32(message.type);\n    /* stream.video.sfu.models.Participant participant = 4; */\n    if (message.participant)\n      Participant.internalBinaryWrite(\n        message.participant,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackPublished\n */\nexport const TrackPublished = new TrackPublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass TrackUnpublished$Type extends MessageType<TrackUnpublished> {\n  constructor() {\n    super('stream.video.sfu.event.TrackUnpublished', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'type',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackType',\n          TrackType,\n          'TRACK_TYPE_',\n        ],\n      },\n      {\n        no: 4,\n        name: 'cause',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.TrackUnpublishReason',\n          TrackUnpublishReason,\n          'TRACK_UNPUBLISH_REASON_',\n        ],\n      },\n      { no: 5, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n  create(value?: PartialMessage<TrackUnpublished>): TrackUnpublished {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.type = 0;\n    message.cause = 0;\n    if (value !== undefined)\n      reflectionMergePartial<TrackUnpublished>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: TrackUnpublished,\n  ): TrackUnpublished {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* stream.video.sfu.models.TrackType type */ 3:\n          message.type = reader.int32();\n          break;\n        case /* stream.video.sfu.models.TrackUnpublishReason cause */ 4:\n          message.cause = reader.int32();\n          break;\n        case /* stream.video.sfu.models.Participant participant */ 5:\n          message.participant = Participant.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participant,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: TrackUnpublished,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* stream.video.sfu.models.TrackType type = 3; */\n    if (message.type !== 0) writer.tag(3, WireType.Varint).int32(message.type);\n    /* stream.video.sfu.models.TrackUnpublishReason cause = 4; */\n    if (message.cause !== 0)\n      writer.tag(4, WireType.Varint).int32(message.cause);\n    /* stream.video.sfu.models.Participant participant = 5; */\n    if (message.participant)\n      Participant.internalBinaryWrite(\n        message.participant,\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.TrackUnpublished\n */\nexport const TrackUnpublished = new TrackUnpublished$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinRequest$Type extends MessageType<JoinRequest> {\n  constructor() {\n    super('stream.video.sfu.event.JoinRequest', [\n      { no: 1, name: 'token', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'subscriber_sdp',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 4,\n        name: 'client_details',\n        kind: 'message',\n        T: () => ClientDetails,\n      },\n      { no: 5, name: 'migration', kind: 'message', T: () => Migration },\n      {\n        no: 6,\n        name: 'fast_reconnect',\n        kind: 'scalar',\n        T: 8 /*ScalarType.BOOL*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<JoinRequest>): JoinRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.token = '';\n    message.sessionId = '';\n    message.subscriberSdp = '';\n    message.fastReconnect = false;\n    if (value !== undefined)\n      reflectionMergePartial<JoinRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: JoinRequest,\n  ): JoinRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string token */ 1:\n          message.token = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* string subscriber_sdp */ 3:\n          message.subscriberSdp = reader.string();\n          break;\n        case /* stream.video.sfu.models.ClientDetails client_details */ 4:\n          message.clientDetails = ClientDetails.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.clientDetails,\n          );\n          break;\n        case /* stream.video.sfu.event.Migration migration */ 5:\n          message.migration = Migration.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.migration,\n          );\n          break;\n        case /* bool fast_reconnect */ 6:\n          message.fastReconnect = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: JoinRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string token = 1; */\n    if (message.token !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.token);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* string subscriber_sdp = 3; */\n    if (message.subscriberSdp !== '')\n      writer.tag(3, WireType.LengthDelimited).string(message.subscriberSdp);\n    /* stream.video.sfu.models.ClientDetails client_details = 4; */\n    if (message.clientDetails)\n      ClientDetails.internalBinaryWrite(\n        message.clientDetails,\n        writer.tag(4, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.event.Migration migration = 5; */\n    if (message.migration)\n      Migration.internalBinaryWrite(\n        message.migration,\n        writer.tag(5, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* bool fast_reconnect = 6; */\n    if (message.fastReconnect !== false)\n      writer.tag(6, WireType.Varint).bool(message.fastReconnect);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinRequest\n */\nexport const JoinRequest = new JoinRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass Migration$Type extends MessageType<Migration> {\n  constructor() {\n    super('stream.video.sfu.event.Migration', [\n      {\n        no: 1,\n        name: 'from_sfu_id',\n        kind: 'scalar',\n        T: 9 /*ScalarType.STRING*/,\n      },\n      {\n        no: 2,\n        name: 'announced_tracks',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackInfo,\n      },\n      {\n        no: 3,\n        name: 'subscriptions',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => TrackSubscriptionDetails,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<Migration>): Migration {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.fromSfuId = '';\n    message.announcedTracks = [];\n    message.subscriptions = [];\n    if (value !== undefined)\n      reflectionMergePartial<Migration>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: Migration,\n  ): Migration {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string from_sfu_id */ 1:\n          message.fromSfuId = reader.string();\n          break;\n        case /* repeated stream.video.sfu.models.TrackInfo announced_tracks */ 2:\n          message.announcedTracks.push(\n            TrackInfo.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        case /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions */ 3:\n          message.subscriptions.push(\n            TrackSubscriptionDetails.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n            ),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: Migration,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string from_sfu_id = 1; */\n    if (message.fromSfuId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.fromSfuId);\n    /* repeated stream.video.sfu.models.TrackInfo announced_tracks = 2; */\n    for (let i = 0; i < message.announcedTracks.length; i++)\n      TrackInfo.internalBinaryWrite(\n        message.announcedTracks[i],\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* repeated stream.video.sfu.signal.TrackSubscriptionDetails subscriptions = 3; */\n    for (let i = 0; i < message.subscriptions.length; i++)\n      TrackSubscriptionDetails.internalBinaryWrite(\n        message.subscriptions[i],\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.Migration\n */\nexport const Migration = new Migration$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass JoinResponse$Type extends MessageType<JoinResponse> {\n  constructor() {\n    super('stream.video.sfu.event.JoinResponse', [\n      { no: 1, name: 'call_state', kind: 'message', T: () => CallState },\n      { no: 2, name: 'reconnected', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<JoinResponse>): JoinResponse {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.reconnected = false;\n    if (value !== undefined)\n      reflectionMergePartial<JoinResponse>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: JoinResponse,\n  ): JoinResponse {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.CallState call_state */ 1:\n          message.callState = CallState.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.callState,\n          );\n          break;\n        case /* bool reconnected */ 2:\n          message.reconnected = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: JoinResponse,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.CallState call_state = 1; */\n    if (message.callState)\n      CallState.internalBinaryWrite(\n        message.callState,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* bool reconnected = 2; */\n    if (message.reconnected !== false)\n      writer.tag(2, WireType.Varint).bool(message.reconnected);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.JoinResponse\n */\nexport const JoinResponse = new JoinResponse$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantJoined$Type extends MessageType<ParticipantJoined> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantJoined', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n  create(value?: PartialMessage<ParticipantJoined>): ParticipantJoined {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.callCid = '';\n    if (value !== undefined)\n      reflectionMergePartial<ParticipantJoined>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ParticipantJoined,\n  ): ParticipantJoined {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string call_cid */ 1:\n          message.callCid = reader.string();\n          break;\n        case /* stream.video.sfu.models.Participant participant */ 2:\n          message.participant = Participant.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participant,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ParticipantJoined,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string call_cid = 1; */\n    if (message.callCid !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.callCid);\n    /* stream.video.sfu.models.Participant participant = 2; */\n    if (message.participant)\n      Participant.internalBinaryWrite(\n        message.participant,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantJoined\n */\nexport const ParticipantJoined = new ParticipantJoined$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantLeft$Type extends MessageType<ParticipantLeft> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantLeft', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n  create(value?: PartialMessage<ParticipantLeft>): ParticipantLeft {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.callCid = '';\n    if (value !== undefined)\n      reflectionMergePartial<ParticipantLeft>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ParticipantLeft,\n  ): ParticipantLeft {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string call_cid */ 1:\n          message.callCid = reader.string();\n          break;\n        case /* stream.video.sfu.models.Participant participant */ 2:\n          message.participant = Participant.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participant,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ParticipantLeft,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string call_cid = 1; */\n    if (message.callCid !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.callCid);\n    /* stream.video.sfu.models.Participant participant = 2; */\n    if (message.participant)\n      Participant.internalBinaryWrite(\n        message.participant,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantLeft\n */\nexport const ParticipantLeft = new ParticipantLeft$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ParticipantUpdated$Type extends MessageType<ParticipantUpdated> {\n  constructor() {\n    super('stream.video.sfu.event.ParticipantUpdated', [\n      { no: 1, name: 'call_cid', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'participant', kind: 'message', T: () => Participant },\n    ]);\n  }\n  create(value?: PartialMessage<ParticipantUpdated>): ParticipantUpdated {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.callCid = '';\n    if (value !== undefined)\n      reflectionMergePartial<ParticipantUpdated>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ParticipantUpdated,\n  ): ParticipantUpdated {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string call_cid */ 1:\n          message.callCid = reader.string();\n          break;\n        case /* stream.video.sfu.models.Participant participant */ 2:\n          message.participant = Participant.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.participant,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ParticipantUpdated,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string call_cid = 1; */\n    if (message.callCid !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.callCid);\n    /* stream.video.sfu.models.Participant participant = 2; */\n    if (message.participant)\n      Participant.internalBinaryWrite(\n        message.participant,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ParticipantUpdated\n */\nexport const ParticipantUpdated = new ParticipantUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass SubscriberOffer$Type extends MessageType<SubscriberOffer> {\n  constructor() {\n    super('stream.video.sfu.event.SubscriberOffer', [\n      { no: 1, name: 'ice_restart', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 2, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<SubscriberOffer>): SubscriberOffer {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.iceRestart = false;\n    message.sdp = '';\n    if (value !== undefined)\n      reflectionMergePartial<SubscriberOffer>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: SubscriberOffer,\n  ): SubscriberOffer {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* bool ice_restart */ 1:\n          message.iceRestart = reader.bool();\n          break;\n        case /* string sdp */ 2:\n          message.sdp = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: SubscriberOffer,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* bool ice_restart = 1; */\n    if (message.iceRestart !== false)\n      writer.tag(1, WireType.Varint).bool(message.iceRestart);\n    /* string sdp = 2; */\n    if (message.sdp !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sdp);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.SubscriberOffer\n */\nexport const SubscriberOffer = new SubscriberOffer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass PublisherAnswer$Type extends MessageType<PublisherAnswer> {\n  constructor() {\n    super('stream.video.sfu.event.PublisherAnswer', [\n      { no: 1, name: 'sdp', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<PublisherAnswer>): PublisherAnswer {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.sdp = '';\n    if (value !== undefined)\n      reflectionMergePartial<PublisherAnswer>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: PublisherAnswer,\n  ): PublisherAnswer {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string sdp */ 1:\n          message.sdp = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: PublisherAnswer,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string sdp = 1; */\n    if (message.sdp !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.sdp);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.PublisherAnswer\n */\nexport const PublisherAnswer = new PublisherAnswer$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityChanged$Type extends MessageType<ConnectionQualityChanged> {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityChanged', [\n      {\n        no: 1,\n        name: 'connection_quality_updates',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => ConnectionQualityInfo,\n      },\n    ]);\n  }\n  create(\n    value?: PartialMessage<ConnectionQualityChanged>,\n  ): ConnectionQualityChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.connectionQualityUpdates = [];\n    if (value !== undefined)\n      reflectionMergePartial<ConnectionQualityChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ConnectionQualityChanged,\n  ): ConnectionQualityChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates */ 1:\n          message.connectionQualityUpdates.push(\n            ConnectionQualityInfo.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n            ),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ConnectionQualityChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated stream.video.sfu.event.ConnectionQualityInfo connection_quality_updates = 1; */\n    for (let i = 0; i < message.connectionQualityUpdates.length; i++)\n      ConnectionQualityInfo.internalBinaryWrite(\n        message.connectionQualityUpdates[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityChanged\n */\nexport const ConnectionQualityChanged = new ConnectionQualityChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ConnectionQualityInfo$Type extends MessageType<ConnectionQualityInfo> {\n  constructor() {\n    super('stream.video.sfu.event.ConnectionQualityInfo', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      {\n        no: 3,\n        name: 'connection_quality',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.ConnectionQuality',\n          ConnectionQuality,\n          'CONNECTION_QUALITY_',\n        ],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<ConnectionQualityInfo>): ConnectionQualityInfo {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.connectionQuality = 0;\n    if (value !== undefined)\n      reflectionMergePartial<ConnectionQualityInfo>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ConnectionQualityInfo,\n  ): ConnectionQualityInfo {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* stream.video.sfu.models.ConnectionQuality connection_quality */ 3:\n          message.connectionQuality = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ConnectionQualityInfo,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* stream.video.sfu.models.ConnectionQuality connection_quality = 3; */\n    if (message.connectionQuality !== 0)\n      writer.tag(3, WireType.Varint).int32(message.connectionQuality);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ConnectionQualityInfo\n */\nexport const ConnectionQualityInfo = new ConnectionQualityInfo$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass DominantSpeakerChanged$Type extends MessageType<DominantSpeakerChanged> {\n  constructor() {\n    super('stream.video.sfu.event.DominantSpeakerChanged', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(\n    value?: PartialMessage<DominantSpeakerChanged>,\n  ): DominantSpeakerChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    if (value !== undefined)\n      reflectionMergePartial<DominantSpeakerChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: DominantSpeakerChanged,\n  ): DominantSpeakerChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: DominantSpeakerChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.DominantSpeakerChanged\n */\nexport const DominantSpeakerChanged = new DominantSpeakerChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevel$Type extends MessageType<AudioLevel> {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevel', [\n      { no: 1, name: 'user_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'session_id', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 3, name: 'level', kind: 'scalar', T: 2 /*ScalarType.FLOAT*/ },\n      { no: 4, name: 'is_speaking', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n    ]);\n  }\n  create(value?: PartialMessage<AudioLevel>): AudioLevel {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.userId = '';\n    message.sessionId = '';\n    message.level = 0;\n    message.isSpeaking = false;\n    if (value !== undefined)\n      reflectionMergePartial<AudioLevel>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: AudioLevel,\n  ): AudioLevel {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string user_id */ 1:\n          message.userId = reader.string();\n          break;\n        case /* string session_id */ 2:\n          message.sessionId = reader.string();\n          break;\n        case /* float level */ 3:\n          message.level = reader.float();\n          break;\n        case /* bool is_speaking */ 4:\n          message.isSpeaking = reader.bool();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: AudioLevel,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string user_id = 1; */\n    if (message.userId !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.userId);\n    /* string session_id = 2; */\n    if (message.sessionId !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.sessionId);\n    /* float level = 3; */\n    if (message.level !== 0) writer.tag(3, WireType.Bit32).float(message.level);\n    /* bool is_speaking = 4; */\n    if (message.isSpeaking !== false)\n      writer.tag(4, WireType.Varint).bool(message.isSpeaking);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevel\n */\nexport const AudioLevel = new AudioLevel$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioLevelChanged$Type extends MessageType<AudioLevelChanged> {\n  constructor() {\n    super('stream.video.sfu.event.AudioLevelChanged', [\n      {\n        no: 1,\n        name: 'audio_levels',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => AudioLevel,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<AudioLevelChanged>): AudioLevelChanged {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.audioLevels = [];\n    if (value !== undefined)\n      reflectionMergePartial<AudioLevelChanged>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: AudioLevelChanged,\n  ): AudioLevelChanged {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated stream.video.sfu.event.AudioLevel audio_levels */ 1:\n          message.audioLevels.push(\n            AudioLevel.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: AudioLevelChanged,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated stream.video.sfu.event.AudioLevel audio_levels = 1; */\n    for (let i = 0; i < message.audioLevels.length; i++)\n      AudioLevel.internalBinaryWrite(\n        message.audioLevels[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioLevelChanged\n */\nexport const AudioLevelChanged = new AudioLevelChanged$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioMediaRequest$Type extends MessageType<AudioMediaRequest> {\n  constructor() {\n    super('stream.video.sfu.event.AudioMediaRequest', [\n      {\n        no: 1,\n        name: 'channel_count',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<AudioMediaRequest>): AudioMediaRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.channelCount = 0;\n    if (value !== undefined)\n      reflectionMergePartial<AudioMediaRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: AudioMediaRequest,\n  ): AudioMediaRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* int32 channel_count */ 1:\n          message.channelCount = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: AudioMediaRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* int32 channel_count = 1; */\n    if (message.channelCount !== 0)\n      writer.tag(1, WireType.Varint).int32(message.channelCount);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioMediaRequest\n */\nexport const AudioMediaRequest = new AudioMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass AudioSender$Type extends MessageType<AudioSender> {\n  constructor() {\n    super('stream.video.sfu.event.AudioSender', [\n      {\n        no: 1,\n        name: 'media_request',\n        kind: 'message',\n        T: () => AudioMediaRequest,\n      },\n      { no: 2, name: 'codec', kind: 'message', T: () => Codec },\n    ]);\n  }\n  create(value?: PartialMessage<AudioSender>): AudioSender {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    if (value !== undefined)\n      reflectionMergePartial<AudioSender>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: AudioSender,\n  ): AudioSender {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.event.AudioMediaRequest media_request */ 1:\n          message.mediaRequest = AudioMediaRequest.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.mediaRequest,\n          );\n          break;\n        case /* stream.video.sfu.models.Codec codec */ 2:\n          message.codec = Codec.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.codec,\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: AudioSender,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.event.AudioMediaRequest media_request = 1; */\n    if (message.mediaRequest)\n      AudioMediaRequest.internalBinaryWrite(\n        message.mediaRequest,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.Codec codec = 2; */\n    if (message.codec)\n      Codec.internalBinaryWrite(\n        message.codec,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.AudioSender\n */\nexport const AudioSender = new AudioSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoMediaRequest$Type extends MessageType<VideoMediaRequest> {\n  constructor() {\n    super('stream.video.sfu.event.VideoMediaRequest', [\n      {\n        no: 1,\n        name: 'ideal_height',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n      { no: 2, name: 'ideal_width', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n      {\n        no: 3,\n        name: 'ideal_frame_rate',\n        kind: 'scalar',\n        T: 5 /*ScalarType.INT32*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<VideoMediaRequest>): VideoMediaRequest {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.idealHeight = 0;\n    message.idealWidth = 0;\n    message.idealFrameRate = 0;\n    if (value !== undefined)\n      reflectionMergePartial<VideoMediaRequest>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoMediaRequest,\n  ): VideoMediaRequest {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* int32 ideal_height */ 1:\n          message.idealHeight = reader.int32();\n          break;\n        case /* int32 ideal_width */ 2:\n          message.idealWidth = reader.int32();\n          break;\n        case /* int32 ideal_frame_rate */ 3:\n          message.idealFrameRate = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoMediaRequest,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* int32 ideal_height = 1; */\n    if (message.idealHeight !== 0)\n      writer.tag(1, WireType.Varint).int32(message.idealHeight);\n    /* int32 ideal_width = 2; */\n    if (message.idealWidth !== 0)\n      writer.tag(2, WireType.Varint).int32(message.idealWidth);\n    /* int32 ideal_frame_rate = 3; */\n    if (message.idealFrameRate !== 0)\n      writer.tag(3, WireType.Varint).int32(message.idealFrameRate);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoMediaRequest\n */\nexport const VideoMediaRequest = new VideoMediaRequest$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoLayerSetting$Type extends MessageType<VideoLayerSetting> {\n  constructor() {\n    super('stream.video.sfu.event.VideoLayerSetting', [\n      { no: 1, name: 'name', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n      { no: 2, name: 'active', kind: 'scalar', T: 8 /*ScalarType.BOOL*/ },\n      { no: 3, name: 'max_bitrate', kind: 'scalar', T: 5 /*ScalarType.INT32*/ },\n      {\n        no: 4,\n        name: 'scale_resolution_down_by',\n        kind: 'scalar',\n        T: 2 /*ScalarType.FLOAT*/,\n      },\n      {\n        no: 5,\n        name: 'priority',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.event.VideoLayerSetting.Priority',\n          VideoLayerSetting_Priority,\n          'PRIORITY_',\n        ],\n      },\n      { no: 6, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 7,\n        name: 'max_framerate',\n        kind: 'scalar',\n        T: 13 /*ScalarType.UINT32*/,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<VideoLayerSetting>): VideoLayerSetting {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.name = '';\n    message.active = false;\n    message.maxBitrate = 0;\n    message.scaleResolutionDownBy = 0;\n    message.priority = 0;\n    message.maxFramerate = 0;\n    if (value !== undefined)\n      reflectionMergePartial<VideoLayerSetting>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoLayerSetting,\n  ): VideoLayerSetting {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* string name */ 1:\n          message.name = reader.string();\n          break;\n        case /* bool active */ 2:\n          message.active = reader.bool();\n          break;\n        case /* int32 max_bitrate */ 3:\n          message.maxBitrate = reader.int32();\n          break;\n        case /* float scale_resolution_down_by */ 4:\n          message.scaleResolutionDownBy = reader.float();\n          break;\n        case /* stream.video.sfu.event.VideoLayerSetting.Priority priority */ 5:\n          message.priority = reader.int32();\n          break;\n        case /* stream.video.sfu.models.Codec codec */ 6:\n          message.codec = Codec.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.codec,\n          );\n          break;\n        case /* uint32 max_framerate */ 7:\n          message.maxFramerate = reader.uint32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoLayerSetting,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* string name = 1; */\n    if (message.name !== '')\n      writer.tag(1, WireType.LengthDelimited).string(message.name);\n    /* bool active = 2; */\n    if (message.active !== false)\n      writer.tag(2, WireType.Varint).bool(message.active);\n    /* int32 max_bitrate = 3; */\n    if (message.maxBitrate !== 0)\n      writer.tag(3, WireType.Varint).int32(message.maxBitrate);\n    /* float scale_resolution_down_by = 4; */\n    if (message.scaleResolutionDownBy !== 0)\n      writer.tag(4, WireType.Bit32).float(message.scaleResolutionDownBy);\n    /* stream.video.sfu.event.VideoLayerSetting.Priority priority = 5; */\n    if (message.priority !== 0)\n      writer.tag(5, WireType.Varint).int32(message.priority);\n    /* stream.video.sfu.models.Codec codec = 6; */\n    if (message.codec)\n      Codec.internalBinaryWrite(\n        message.codec,\n        writer.tag(6, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* uint32 max_framerate = 7; */\n    if (message.maxFramerate !== 0)\n      writer.tag(7, WireType.Varint).uint32(message.maxFramerate);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoLayerSetting\n */\nexport const VideoLayerSetting = new VideoLayerSetting$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass VideoSender$Type extends MessageType<VideoSender> {\n  constructor() {\n    super('stream.video.sfu.event.VideoSender', [\n      {\n        no: 1,\n        name: 'media_request',\n        kind: 'message',\n        T: () => VideoMediaRequest,\n      },\n      { no: 2, name: 'codec', kind: 'message', T: () => Codec },\n      {\n        no: 3,\n        name: 'layers',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoLayerSetting,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<VideoSender>): VideoSender {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.layers = [];\n    if (value !== undefined)\n      reflectionMergePartial<VideoSender>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: VideoSender,\n  ): VideoSender {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.event.VideoMediaRequest media_request */ 1:\n          message.mediaRequest = VideoMediaRequest.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.mediaRequest,\n          );\n          break;\n        case /* stream.video.sfu.models.Codec codec */ 2:\n          message.codec = Codec.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.codec,\n          );\n          break;\n        case /* repeated stream.video.sfu.event.VideoLayerSetting layers */ 3:\n          message.layers.push(\n            VideoLayerSetting.internalBinaryRead(\n              reader,\n              reader.uint32(),\n              options,\n            ),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: VideoSender,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.event.VideoMediaRequest media_request = 1; */\n    if (message.mediaRequest)\n      VideoMediaRequest.internalBinaryWrite(\n        message.mediaRequest,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* stream.video.sfu.models.Codec codec = 2; */\n    if (message.codec)\n      Codec.internalBinaryWrite(\n        message.codec,\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* repeated stream.video.sfu.event.VideoLayerSetting layers = 3; */\n    for (let i = 0; i < message.layers.length; i++)\n      VideoLayerSetting.internalBinaryWrite(\n        message.layers[i],\n        writer.tag(3, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.VideoSender\n */\nexport const VideoSender = new VideoSender$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass ChangePublishQuality$Type extends MessageType<ChangePublishQuality> {\n  constructor() {\n    super('stream.video.sfu.event.ChangePublishQuality', [\n      {\n        no: 1,\n        name: 'audio_senders',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => AudioSender,\n      },\n      {\n        no: 2,\n        name: 'video_senders',\n        kind: 'message',\n        repeat: 1 /*RepeatType.PACKED*/,\n        T: () => VideoSender,\n      },\n    ]);\n  }\n  create(value?: PartialMessage<ChangePublishQuality>): ChangePublishQuality {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.audioSenders = [];\n    message.videoSenders = [];\n    if (value !== undefined)\n      reflectionMergePartial<ChangePublishQuality>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: ChangePublishQuality,\n  ): ChangePublishQuality {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* repeated stream.video.sfu.event.AudioSender audio_senders */ 1:\n          message.audioSenders.push(\n            AudioSender.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        case /* repeated stream.video.sfu.event.VideoSender video_senders */ 2:\n          message.videoSenders.push(\n            VideoSender.internalBinaryRead(reader, reader.uint32(), options),\n          );\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: ChangePublishQuality,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* repeated stream.video.sfu.event.AudioSender audio_senders = 1; */\n    for (let i = 0; i < message.audioSenders.length; i++)\n      AudioSender.internalBinaryWrite(\n        message.audioSenders[i],\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* repeated stream.video.sfu.event.VideoSender video_senders = 2; */\n    for (let i = 0; i < message.videoSenders.length; i++)\n      VideoSender.internalBinaryWrite(\n        message.videoSenders[i],\n        writer.tag(2, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.ChangePublishQuality\n */\nexport const ChangePublishQuality = new ChangePublishQuality$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallGrantsUpdated$Type extends MessageType<CallGrantsUpdated> {\n  constructor() {\n    super('stream.video.sfu.event.CallGrantsUpdated', [\n      { no: 1, name: 'current_grants', kind: 'message', T: () => CallGrants },\n      { no: 2, name: 'message', kind: 'scalar', T: 9 /*ScalarType.STRING*/ },\n    ]);\n  }\n  create(value?: PartialMessage<CallGrantsUpdated>): CallGrantsUpdated {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.message = '';\n    if (value !== undefined)\n      reflectionMergePartial<CallGrantsUpdated>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: CallGrantsUpdated,\n  ): CallGrantsUpdated {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.CallGrants current_grants */ 1:\n          message.currentGrants = CallGrants.internalBinaryRead(\n            reader,\n            reader.uint32(),\n            options,\n            message.currentGrants,\n          );\n          break;\n        case /* string message */ 2:\n          message.message = reader.string();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: CallGrantsUpdated,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.CallGrants current_grants = 1; */\n    if (message.currentGrants)\n      CallGrants.internalBinaryWrite(\n        message.currentGrants,\n        writer.tag(1, WireType.LengthDelimited).fork(),\n        options,\n      ).join();\n    /* string message = 2; */\n    if (message.message !== '')\n      writer.tag(2, WireType.LengthDelimited).string(message.message);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallGrantsUpdated\n */\nexport const CallGrantsUpdated = new CallGrantsUpdated$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass GoAway$Type extends MessageType<GoAway> {\n  constructor() {\n    super('stream.video.sfu.event.GoAway', [\n      {\n        no: 1,\n        name: 'reason',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.GoAwayReason',\n          GoAwayReason,\n          'GO_AWAY_REASON_',\n        ],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<GoAway>): GoAway {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.reason = 0;\n    if (value !== undefined)\n      reflectionMergePartial<GoAway>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: GoAway,\n  ): GoAway {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.GoAwayReason reason */ 1:\n          message.reason = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: GoAway,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.GoAwayReason reason = 1; */\n    if (message.reason !== 0)\n      writer.tag(1, WireType.Varint).int32(message.reason);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.GoAway\n */\nexport const GoAway = new GoAway$Type();\n// @generated message type with reflection information, may provide speed optimized methods\nclass CallEnded$Type extends MessageType<CallEnded> {\n  constructor() {\n    super('stream.video.sfu.event.CallEnded', [\n      {\n        no: 1,\n        name: 'reason',\n        kind: 'enum',\n        T: () => [\n          'stream.video.sfu.models.CallEndedReason',\n          CallEndedReason,\n          'CALL_ENDED_REASON_',\n        ],\n      },\n    ]);\n  }\n  create(value?: PartialMessage<CallEnded>): CallEnded {\n    const message = globalThis.Object.create(this.messagePrototype!);\n    message.reason = 0;\n    if (value !== undefined)\n      reflectionMergePartial<CallEnded>(this, message, value);\n    return message;\n  }\n  internalBinaryRead(\n    reader: IBinaryReader,\n    length: number,\n    options: BinaryReadOptions,\n    target?: CallEnded,\n  ): CallEnded {\n    let message = target ?? this.create(),\n      end = reader.pos + length;\n    while (reader.pos < end) {\n      let [fieldNo, wireType] = reader.tag();\n      switch (fieldNo) {\n        case /* stream.video.sfu.models.CallEndedReason reason */ 1:\n          message.reason = reader.int32();\n          break;\n        default:\n          let u = options.readUnknownField;\n          if (u === 'throw')\n            throw new globalThis.Error(\n              `Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`,\n            );\n          let d = reader.skip(wireType);\n          if (u !== false)\n            (u === true ? UnknownFieldHandler.onRead : u)(\n              this.typeName,\n              message,\n              fieldNo,\n              wireType,\n              d,\n            );\n      }\n    }\n    return message;\n  }\n  internalBinaryWrite(\n    message: CallEnded,\n    writer: IBinaryWriter,\n    options: BinaryWriteOptions,\n  ): IBinaryWriter {\n    /* stream.video.sfu.models.CallEndedReason reason = 1; */\n    if (message.reason !== 0)\n      writer.tag(1, WireType.Varint).int32(message.reason);\n    let u = options.writeUnknownFields;\n    if (u !== false)\n      (u == true ? UnknownFieldHandler.onWrite : u)(\n        this.typeName,\n        message,\n        writer,\n      );\n    return writer;\n  }\n}\n/**\n * @generated MessageType for protobuf message stream.video.sfu.event.CallEnded\n */\nexport const CallEnded = new CallEnded$Type();\n","import type {\n  Participant,\n  VideoDimension,\n} from './gen/video/sfu/models/models';\nimport type {\n  JoinCallRequest,\n  MemberResponse,\n  OwnCapability,\n  ReactionResponse,\n} from './gen/coordinator';\nimport type { StreamClient } from './coordinator/connection/client';\nimport type { Comparator } from './sorting';\nimport type { StreamVideoWriteableStateStore } from './store';\nimport { AxiosError } from 'axios';\n\nexport type StreamReaction = Pick<\n  ReactionResponse,\n  'type' | 'emoji_code' | 'custom'\n>;\n\nexport enum VisibilityState {\n  UNKNOWN = 'UNKNOWN',\n  VISIBLE = 'VISIBLE',\n  INVISIBLE = 'INVISIBLE',\n}\n\nexport enum DebounceType {\n  IMMEDIATE = 20,\n  FAST = 100,\n  MEDIUM = 600,\n  SLOW = 1200,\n}\n\nexport interface StreamVideoParticipant extends Participant {\n  /**\n   * The participant's audio stream, if they are publishing audio and\n   * we have subscribed to it.\n   */\n  audioStream?: MediaStream;\n\n  /**\n   * The participant's video stream, if they are sharing their video,\n   * and we are subscribed to it.\n   */\n  videoStream?: MediaStream;\n\n  /**\n   * The participant's screen share stream, if they are sharing their screen,\n   * and we are subscribed to it.\n   */\n  screenShareStream?: MediaStream;\n\n  /**\n   * The participant's screen audio stream, if they are sharing their audio,\n   * and we are subscribed to it.\n   */\n  screenShareAudioStream?: MediaStream;\n\n  /**\n   * The preferred video dimensions for this participant.\n   * Set it to `undefined` to unsubscribe from this participant's video.\n   */\n  videoDimension?: VideoDimension;\n\n  /**\n   * The preferred screen share dimensions for this participant.\n   * Set it to `undefined` to unsubscribe from this participant's screen share.\n   */\n  screenShareDimension?: VideoDimension;\n\n  /**\n   * True if the participant is the local participant.\n   */\n  isLocalParticipant?: boolean;\n\n  /**\n   * The pin state of the participant.\n   */\n  pin?: ParticipantPin;\n\n  /**\n   * The last reaction this user has sent to this call.\n   * Integrators can batch/collect past reactions and show them to the UI.\n   */\n  reaction?: StreamReaction;\n\n  /**\n   * The visibility state of the participant's tracks within a defined viewport.\n   */\n  viewportVisibilityState?: Record<VideoTrackType, VisibilityState>;\n\n  /**\n   * The volume of the participant's audio stream (from 0 to 1).\n   * Set it to `undefined` to use the default volume.\n   *\n   * Note: this value is not applicable in React Native.\n   */\n  audioVolume?: number;\n}\n\nexport type VideoTrackType = 'videoTrack' | 'screenShareTrack';\nexport type AudioTrackType = 'audioTrack' | 'screenShareAudioTrack';\nexport type TrackMuteType =\n  | 'audio'\n  | 'video'\n  | 'screenshare'\n  | 'screenshare_audio';\n\n/**\n * Represents a participant's pin state.\n */\nexport type ParticipantPin = {\n  /**\n   * Set to true if the participant is pinned by the local user.\n   * False if the participant is pinned server-side, by the call moderator.\n   */\n  isLocalPin: boolean;\n\n  /**\n   * Timestamp when the participant is pinned.\n   */\n  pinnedAt: number;\n};\n\n/**\n * A partial representation of the StreamVideoParticipant.\n */\nexport type StreamVideoParticipantPatch = Partial<StreamVideoParticipant>;\n\n/**\n * A collection of {@link StreamVideoParticipantPatch} organized by sessionId.\n */\nexport type StreamVideoParticipantPatches = {\n  [sessionId: string]: StreamVideoParticipantPatch;\n};\n\nexport type SubscriptionChange = {\n  /**\n   * The video dimension to request.\n   * Set it to `undefined` in case you want to unsubscribe.\n   */\n  dimension: VideoDimension | undefined;\n};\n\nexport type SubscriptionChanges = {\n  [sessionId: string]: SubscriptionChange;\n};\n\nexport type PublishOptions = {\n  preferredCodec?: string | null;\n  screenShareSettings?: ScreenShareSettings;\n};\n\nexport type ScreenShareSettings = {\n  /**\n   * Limits the maximum framerate (in frames per second) of the screen share.\n   * Defaults to 30.\n   */\n  maxFramerate?: number;\n\n  /**\n   * Limits the maximum bitrate (in bits per second) of the screen share.\n   * Defaults to 3000000 (3Mbps).\n   */\n  maxBitrate?: number;\n};\n\nexport type CallLeaveOptions = {\n  /**\n   * If true, the caller will get a `call.rejected` event.\n   * Has an effect only if the call is in the `ringing` state.\n   *\n   * @default `false`.\n   */\n  reject?: boolean;\n\n  /**\n   * The reason for leaving the call.\n   * This will be sent to the backend and will be visible in the logs.\n   */\n  reason?: string;\n};\n\n/**\n * The options to pass to {@link Call} constructor.\n */\nexport type CallConstructor = {\n  /**\n   * The streamClient instance to use.\n   */\n  streamClient: StreamClient;\n\n  /**\n   * The Call type.\n   */\n  type: string;\n\n  /**\n   * The Call ID.\n   */\n  id: string;\n\n  /**\n   * An optional list of {@link MemberResponse} from the backend.\n   * If provided, the call will be initialized with the data from this object.\n   * This is useful when initializing a new \"pending call\" from an event.\n   */\n  members?: MemberResponse[];\n\n  /**\n   * An optional list of {@link OwnCapability} coming from the backed.\n   * If provided, the call will be initialized with the data from this object.\n   * This is useful when initializing a new \"pending call\" from an event.\n   */\n  ownCapabilities?: OwnCapability[];\n\n  /**\n   * Flags the call as a ringing call.\n   * @default false\n   */\n  ringing?: boolean;\n\n  /**\n   * Set to true if this call instance should receive updates from the backend.\n   *\n   * @default false.\n   */\n  watching?: boolean;\n\n  /**\n   * The default comparator to use when sorting participants.\n   */\n  sortParticipantsBy?: Comparator<StreamVideoParticipant>;\n\n  /**\n   * The state store of the client\n   */\n  clientStore: StreamVideoWriteableStateStore;\n};\n\n/**\n * The options to pass to {@link Call.join} method.\n */\nexport type JoinCallData = Omit<JoinCallRequest, 'location'>;\nexport { AxiosError };\n","/* eslint-disable */\n// @generated by protobuf-ts 2.9.4 with parameter long_type_string,client_generic,server_none,eslint_disable\n// @generated from protobuf file \"video/sfu/signal_rpc/signal.proto\" (package \"stream.video.sfu.signal\", syntax proto3)\n// tslint:disable\nimport type {\n  RpcOptions,\n  RpcTransport,\n  ServiceInfo,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport { stackIntercept } from '@protobuf-ts/runtime-rpc';\nimport type {\n  ICERestartRequest,\n  ICERestartResponse,\n  ICETrickleResponse,\n  SendAnswerRequest,\n  SendAnswerResponse,\n  SendStatsRequest,\n  SendStatsResponse,\n  SetPublisherRequest,\n  SetPublisherResponse,\n  StartNoiseCancellationRequest,\n  StartNoiseCancellationResponse,\n  StopNoiseCancellationRequest,\n  StopNoiseCancellationResponse,\n  UpdateMuteStatesRequest,\n  UpdateMuteStatesResponse,\n  UpdateSubscriptionsRequest,\n  UpdateSubscriptionsResponse,\n} from './signal';\nimport { SignalServer } from './signal';\nimport type { ICETrickle } from '../models/models';\n\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */\nexport interface ISignalServerClient {\n  /**\n   * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n   *\n   * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n   */\n  setPublisher(\n    input: SetPublisherRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SetPublisherRequest, SetPublisherResponse>;\n  /**\n   * answer is sent by the client to the SFU after receiving a subscriber_offer.\n   *\n   * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n   */\n  sendAnswer(\n    input: SendAnswerRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendAnswerRequest, SendAnswerResponse>;\n  /**\n   * SendICECandidate sends an ICE candidate to the client\n   *\n   * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n   */\n  iceTrickle(\n    input: ICETrickle,\n    options?: RpcOptions,\n  ): UnaryCall<ICETrickle, ICETrickleResponse>;\n  /**\n   * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n   * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n   *\n   * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n   */\n  updateSubscriptions(\n    input: UpdateSubscriptionsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateSubscriptionsRequest, UpdateSubscriptionsResponse>;\n  /**\n   * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n   */\n  updateMuteStates(\n    input: UpdateMuteStatesRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateMuteStatesRequest, UpdateMuteStatesResponse>;\n  /**\n   * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n   */\n  iceRestart(\n    input: ICERestartRequest,\n    options?: RpcOptions,\n  ): UnaryCall<ICERestartRequest, ICERestartResponse>;\n  /**\n   * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n   */\n  sendStats(\n    input: SendStatsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendStatsRequest, SendStatsResponse>;\n  /**\n   * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n   */\n  startNoiseCancellation(\n    input: StartNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StartNoiseCancellationRequest, StartNoiseCancellationResponse>;\n  /**\n   * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n   */\n  stopNoiseCancellation(\n    input: StopNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StopNoiseCancellationRequest, StopNoiseCancellationResponse>;\n}\n/**\n * @generated from protobuf service stream.video.sfu.signal.SignalServer\n */\nexport class SignalServerClient implements ISignalServerClient, ServiceInfo {\n  typeName = SignalServer.typeName;\n  methods = SignalServer.methods;\n  options = SignalServer.options;\n  constructor(private readonly _transport: RpcTransport) {}\n  /**\n   * SetPublisher sends the WebRTC offer for the peer connection used to publish A/V\n   *\n   * @generated from protobuf rpc: SetPublisher(stream.video.sfu.signal.SetPublisherRequest) returns (stream.video.sfu.signal.SetPublisherResponse);\n   */\n  setPublisher(\n    input: SetPublisherRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SetPublisherRequest, SetPublisherResponse> {\n    const method = this.methods[0],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SetPublisherRequest, SetPublisherResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * answer is sent by the client to the SFU after receiving a subscriber_offer.\n   *\n   * @generated from protobuf rpc: SendAnswer(stream.video.sfu.signal.SendAnswerRequest) returns (stream.video.sfu.signal.SendAnswerResponse);\n   */\n  sendAnswer(\n    input: SendAnswerRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendAnswerRequest, SendAnswerResponse> {\n    const method = this.methods[1],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SendAnswerRequest, SendAnswerResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * SendICECandidate sends an ICE candidate to the client\n   *\n   * @generated from protobuf rpc: IceTrickle(stream.video.sfu.models.ICETrickle) returns (stream.video.sfu.signal.ICETrickleResponse);\n   */\n  iceTrickle(\n    input: ICETrickle,\n    options?: RpcOptions,\n  ): UnaryCall<ICETrickle, ICETrickleResponse> {\n    const method = this.methods[2],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<ICETrickle, ICETrickleResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * UpdateSubscribers is used to notify the SFU about the list of video subscriptions\n   * TODO: sync subscriptions based on this + update tracks using the dimension info sent by the user\n   *\n   * @generated from protobuf rpc: UpdateSubscriptions(stream.video.sfu.signal.UpdateSubscriptionsRequest) returns (stream.video.sfu.signal.UpdateSubscriptionsResponse);\n   */\n  updateSubscriptions(\n    input: UpdateSubscriptionsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateSubscriptionsRequest, UpdateSubscriptionsResponse> {\n    const method = this.methods[3],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      UpdateSubscriptionsRequest,\n      UpdateSubscriptionsResponse\n    >('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: UpdateMuteStates(stream.video.sfu.signal.UpdateMuteStatesRequest) returns (stream.video.sfu.signal.UpdateMuteStatesResponse);\n   */\n  updateMuteStates(\n    input: UpdateMuteStatesRequest,\n    options?: RpcOptions,\n  ): UnaryCall<UpdateMuteStatesRequest, UpdateMuteStatesResponse> {\n    const method = this.methods[4],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<UpdateMuteStatesRequest, UpdateMuteStatesResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: IceRestart(stream.video.sfu.signal.ICERestartRequest) returns (stream.video.sfu.signal.ICERestartResponse);\n   */\n  iceRestart(\n    input: ICERestartRequest,\n    options?: RpcOptions,\n  ): UnaryCall<ICERestartRequest, ICERestartResponse> {\n    const method = this.methods[5],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<ICERestartRequest, ICERestartResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: SendStats(stream.video.sfu.signal.SendStatsRequest) returns (stream.video.sfu.signal.SendStatsResponse);\n   */\n  sendStats(\n    input: SendStatsRequest,\n    options?: RpcOptions,\n  ): UnaryCall<SendStatsRequest, SendStatsResponse> {\n    const method = this.methods[6],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<SendStatsRequest, SendStatsResponse>(\n      'unary',\n      this._transport,\n      method,\n      opt,\n      input,\n    );\n  }\n  /**\n   * @generated from protobuf rpc: StartNoiseCancellation(stream.video.sfu.signal.StartNoiseCancellationRequest) returns (stream.video.sfu.signal.StartNoiseCancellationResponse);\n   */\n  startNoiseCancellation(\n    input: StartNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StartNoiseCancellationRequest, StartNoiseCancellationResponse> {\n    const method = this.methods[7],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      StartNoiseCancellationRequest,\n      StartNoiseCancellationResponse\n    >('unary', this._transport, method, opt, input);\n  }\n  /**\n   * @generated from protobuf rpc: StopNoiseCancellation(stream.video.sfu.signal.StopNoiseCancellationRequest) returns (stream.video.sfu.signal.StopNoiseCancellationResponse);\n   */\n  stopNoiseCancellation(\n    input: StopNoiseCancellationRequest,\n    options?: RpcOptions,\n  ): UnaryCall<StopNoiseCancellationRequest, StopNoiseCancellationResponse> {\n    const method = this.methods[8],\n      opt = this._transport.mergeOptions(options);\n    return stackIntercept<\n      StopNoiseCancellationRequest,\n      StopNoiseCancellationResponse\n    >('unary', this._transport, method, opt, input);\n  }\n}\n","import {\n  MethodInfo,\n  NextUnaryFn,\n  RpcInterceptor,\n  RpcOptions,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport {\n  TwirpFetchTransport,\n  TwirpOptions,\n} from '@protobuf-ts/twirp-transport';\nimport { SignalServerClient } from '../gen/video/sfu/signal_rpc/signal.client';\n\nconst defaultOptions: TwirpOptions = {\n  baseUrl: '',\n  sendJson: true,\n  timeout: 5 * 1000, // ms.\n  jsonOptions: {\n    ignoreUnknownFields: true,\n  },\n};\n\nexport const withHeaders = (\n  headers: Record<string, string>,\n): RpcInterceptor => {\n  return {\n    interceptUnary(\n      next: NextUnaryFn,\n      method: MethodInfo,\n      input: object,\n      options: RpcOptions,\n    ): UnaryCall {\n      options.meta = { ...options.meta, ...headers };\n      return next(method, input, options);\n    },\n  };\n};\n\n/**\n * Creates new SignalServerClient instance.\n *\n * @param options the twirp options.\n */\nexport const createSignalClient = (options?: TwirpOptions) => {\n  const transport = new TwirpFetchTransport({\n    ...defaultOptions,\n    ...options,\n  });\n\n  return new SignalServerClient(transport);\n};\n","/**\n * Checks whether we are using React Native\n */\nexport const isReactNative = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.product?.toLowerCase() === 'reactnative';\n};\n","import { Logger, LogLevel } from './coordinator/connection/types';\nimport { isReactNative } from './helpers/platforms';\n\n// log levels, sorted by verbosity\nexport const logLevels: Record<LogLevel, number> = Object.freeze({\n  trace: 0,\n  debug: 1,\n  info: 2,\n  warn: 3,\n  error: 4,\n});\n\nlet logger: Logger | undefined;\nlet level: LogLevel = 'info';\n\nexport const logToConsole: Logger = (logLevel, message, ...args) => {\n  let logMethod;\n  switch (logLevel) {\n    case 'error':\n      if (isReactNative()) {\n        message = `ERROR: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.error;\n      break;\n    case 'warn':\n      if (isReactNative()) {\n        message = `WARN: ${message}`;\n        logMethod = console.info;\n        break;\n      }\n      logMethod = console.warn;\n      break;\n    case 'info':\n      logMethod = console.info;\n      break;\n    case 'trace':\n      logMethod = console.trace;\n      break;\n    default:\n      logMethod = console.log;\n      break;\n  }\n\n  logMethod(message, ...args);\n};\n\nexport const setLogger = (l: Logger, lvl?: LogLevel) => {\n  logger = l;\n  if (lvl) {\n    setLogLevel(lvl);\n  }\n};\n\nexport const setLogLevel = (l: LogLevel) => {\n  level = l;\n};\n\nexport const getLogger = (withTags?: string[]) => {\n  const loggerMethod = logger || logToConsole;\n  const tags = (withTags || []).join(':');\n  const result: Logger = (logLevel, message, ...args) => {\n    if (logLevels[logLevel] >= logLevels[level]) {\n      loggerMethod(logLevel, `[${tags}]: ${message}`, ...args);\n    }\n  };\n  return result;\n};\n","import { getLogger } from '../logger';\n\nexport const getPreferredCodecs = (\n  kind: 'audio' | 'video',\n  preferredCodec: string,\n  codecToRemove?: string,\n): RTCRtpCodecCapability[] | undefined => {\n  const logger = getLogger(['codecs']);\n  if (!('getCapabilities' in RTCRtpReceiver)) {\n    logger('warn', 'RTCRtpReceiver.getCapabilities is not supported');\n    return;\n  }\n  const cap = RTCRtpReceiver.getCapabilities(kind);\n  if (!cap) return;\n  const matched: RTCRtpCodecCapability[] = [];\n  const partialMatched: RTCRtpCodecCapability[] = [];\n  const unmatched: RTCRtpCodecCapability[] = [];\n  cap.codecs.forEach((c) => {\n    const codec = c.mimeType.toLowerCase();\n    logger('debug', `Found supported codec: ${codec}`);\n    const shouldRemoveCodec =\n      codecToRemove && codec === `${kind}/${codecToRemove.toLowerCase()}`;\n    if (shouldRemoveCodec) return;\n    const matchesCodec = codec === `${kind}/${preferredCodec.toLowerCase()}`;\n    if (!matchesCodec) {\n      unmatched.push(c);\n      return;\n    }\n    // for h264 codecs that have sdpFmtpLine available, use only if the\n    // profile-level-id is 42e01f for cross-browser compatibility\n    if (codec === 'h264') {\n      if (c.sdpFmtpLine && c.sdpFmtpLine.includes('profile-level-id=42e01f')) {\n        matched.push(c);\n      } else {\n        partialMatched.push(c);\n      }\n      return;\n    }\n    matched.push(c);\n  });\n\n  return [...matched, ...partialMatched, ...unmatched];\n};\n\nexport const getGenericSdp = async (direction: RTCRtpTransceiverDirection) => {\n  const tempPc = new RTCPeerConnection();\n  tempPc.addTransceiver('video', { direction });\n  tempPc.addTransceiver('audio', { direction });\n\n  const offer = await tempPc.createOffer();\n  let sdp = offer.sdp ?? '';\n\n  tempPc.getTransceivers().forEach((t) => {\n    t.stop();\n  });\n  tempPc.close();\n  return sdp;\n};\n","import { CallEventListener, EventTypes } from '../coordinator/connection/types';\nimport type { SfuEvent } from '../gen/video/sfu/event/events';\nimport { getLogger } from '../logger';\n\nexport type SfuEventKinds = NonNullable<SfuEvent['eventPayload']['oneofKind']>;\nexport type AllSfuEvents = {\n  [K in SfuEventKinds]: K extends keyof Extract<\n    SfuEvent['eventPayload'],\n    { oneofKind: K }\n  >\n    ? Extract<SfuEvent['eventPayload'], { oneofKind: K }>[K]\n    : never;\n};\n\nexport type DispatchableMessage<K extends SfuEventKinds> = {\n  eventPayload: {\n    oneofKind: K;\n  } & {\n    [Key in K]: AllSfuEvents[Key];\n  };\n};\n\nconst sfuEventKinds: { [key in SfuEventKinds]: undefined } = {\n  subscriberOffer: undefined,\n  publisherAnswer: undefined,\n  connectionQualityChanged: undefined,\n  audioLevelChanged: undefined,\n  iceTrickle: undefined,\n  changePublishQuality: undefined,\n  participantJoined: undefined,\n  participantLeft: undefined,\n  dominantSpeakerChanged: undefined,\n  joinResponse: undefined,\n  healthCheckResponse: undefined,\n  trackPublished: undefined,\n  trackUnpublished: undefined,\n  error: undefined,\n  callGrantsUpdated: undefined,\n  goAway: undefined,\n  iceRestart: undefined,\n  pinsUpdated: undefined,\n  callEnded: undefined,\n  participantUpdated: undefined,\n};\n\nexport const isSfuEvent = (\n  eventName: SfuEventKinds | EventTypes,\n): eventName is SfuEventKinds => {\n  return Object.prototype.hasOwnProperty.call(sfuEventKinds, eventName);\n};\n\nexport class Dispatcher {\n  private readonly logger = getLogger(['Dispatcher']);\n  private subscribers: Partial<\n    Record<SfuEventKinds, CallEventListener<any>[] | undefined>\n  > = {};\n\n  dispatch = <K extends SfuEventKinds>(message: DispatchableMessage<K>) => {\n    const eventKind = message.eventPayload.oneofKind;\n    if (!eventKind) return;\n    const payload = message.eventPayload[eventKind];\n    this.logger('debug', `Dispatching ${eventKind}`, payload);\n    const listeners = this.subscribers[eventKind];\n    if (!listeners) return;\n    for (const fn of listeners) {\n      try {\n        fn(payload);\n      } catch (e) {\n        this.logger('warn', 'Listener failed with error', e);\n      }\n    }\n  };\n\n  on = <E extends keyof AllSfuEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    (this.subscribers[eventName] ??= []).push(fn as never);\n    return () => {\n      this.off(eventName, fn);\n    };\n  };\n\n  off = <E extends keyof AllSfuEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    this.subscribers[eventName] = (this.subscribers[eventName] || []).filter(\n      (f) => f !== fn,\n    );\n  };\n\n  offAll = (eventName?: SfuEventKinds) => {\n    if (eventName) {\n      this.subscribers[eventName] = [];\n    } else {\n      this.subscribers = {};\n    }\n  };\n}\n","import { ReplaySubject } from 'rxjs';\nimport { ICETrickle } from '../gen/video/sfu/event/events';\nimport { PeerType } from '../gen/video/sfu/models/models';\nimport { getLogger } from '../logger';\n\n/**\n * A buffer for ICE Candidates. Used for ICE Trickle:\n * - https://bloggeek.me/webrtcglossary/trickle-ice/\n */\nexport class IceTrickleBuffer {\n  readonly subscriberCandidates = new ReplaySubject<ICETrickle>();\n  readonly publisherCandidates = new ReplaySubject<ICETrickle>();\n  private readonly logger = getLogger(['sfu-client']);\n\n  push = (iceTrickle: ICETrickle) => {\n    if (iceTrickle.peerType === PeerType.SUBSCRIBER) {\n      this.subscriberCandidates.next(iceTrickle);\n    } else if (iceTrickle.peerType === PeerType.PUBLISHER_UNSPECIFIED) {\n      this.publisherCandidates.next(iceTrickle);\n    } else {\n      this.logger('warn', `ICETrickle, Unknown peer type`, iceTrickle);\n    }\n  };\n}\n","import { ICETrickle } from '../../gen/video/sfu/models/models';\n\nexport function getIceCandidate(\n  candidate: RTCIceCandidate,\n): ICETrickle['iceCandidate'] {\n  if (!candidate.usernameFragment) {\n    // react-native-webrtc doesn't include usernameFragment in the candidate\n    const splittedCandidate = candidate.candidate.split(' ');\n    const ufragIndex =\n      splittedCandidate.findIndex((s: string) => s === 'ufrag') + 1;\n    const usernameFragment = splittedCandidate[ufragIndex];\n    return JSON.stringify({ ...candidate, usernameFragment });\n  } else {\n    return JSON.stringify(candidate.toJSON());\n  }\n}\n","import { ClientDetails, Device, OS, Sdk } from './gen/video/sfu/models/models';\nimport { isReactNative } from './helpers/platforms';\nimport { UAParser } from 'ua-parser-js';\n\ntype WebRTCInfoType = {\n  version: string;\n};\n\nlet sdkInfo: Sdk | undefined;\nlet osInfo: OS | undefined;\nlet deviceInfo: Device | undefined;\nlet webRtcInfo: WebRTCInfoType | undefined;\n\nexport const setSdkInfo = (info: Sdk) => {\n  sdkInfo = info;\n};\n\nexport const getSdkInfo = () => {\n  return sdkInfo;\n};\n\nexport const setOSInfo = (info: OS) => {\n  osInfo = info;\n};\n\nexport const getOSInfo = () => {\n  return osInfo;\n};\n\nexport const setDeviceInfo = (info: Device) => {\n  deviceInfo = info;\n};\n\nexport const getDeviceInfo = () => {\n  return deviceInfo;\n};\n\nexport const getWebRTCInfo = () => {\n  return webRtcInfo;\n};\n\nexport const setWebRTCInfo = (info: WebRTCInfoType) => {\n  webRtcInfo = info;\n};\n\nexport type LocalClientDetailsType = ClientDetails & {\n  webRTCInfo?: WebRTCInfoType;\n};\n\nexport const getClientDetails = (): LocalClientDetailsType => {\n  if (isReactNative()) {\n    // Since RN doesn't support web, sharing browser info is not required\n    return {\n      sdk: getSdkInfo(),\n      os: getOSInfo(),\n      device: getDeviceInfo(),\n    };\n  }\n\n  const userAgent = new UAParser(navigator.userAgent);\n  const { browser, os, device, cpu } = userAgent.getResult();\n  return {\n    sdk: getSdkInfo(),\n    browser: {\n      name: browser.name || navigator.userAgent,\n      version: browser.version || '',\n    },\n    os: {\n      name: os.name || '',\n      version: os.version || '',\n      architecture: cpu.architecture || '',\n    },\n    device: {\n      name: [device.vendor, device.model, device.type]\n        .filter(Boolean)\n        .join(' '),\n      version: '',\n    },\n  };\n};\n","import { getOSInfo } from '../client-details';\nimport { ScreenShareSettings } from '../types';\nimport { TargetResolution } from '../gen/coordinator';\nimport { isReactNative } from '../helpers/platforms';\n\nexport type OptimalVideoLayer = RTCRtpEncodingParameters & {\n  width: number;\n  height: number;\n};\n\nconst DEFAULT_BITRATE = 1250000;\nconst defaultTargetResolution: TargetResolution = {\n  bitrate: DEFAULT_BITRATE,\n  width: 1280,\n  height: 720,\n};\n\nconst defaultBitratePerRid: Record<string, number> = {\n  q: 300000,\n  h: 750000,\n  f: DEFAULT_BITRATE,\n};\n\n/**\n * Determines the most optimal video layers for simulcasting\n * for the given track.\n *\n * @param videoTrack the video track to find optimal layers for.\n * @param targetResolution the expected target resolution.\n */\nexport const findOptimalVideoLayers = (\n  videoTrack: MediaStreamTrack,\n  targetResolution: TargetResolution = defaultTargetResolution,\n) => {\n  const optimalVideoLayers: OptimalVideoLayer[] = [];\n  const settings = videoTrack.getSettings();\n  const { width: w = 0, height: h = 0 } = settings;\n\n  const isRNIos = isReactNative() && getOSInfo()?.name.toLowerCase() === 'ios';\n\n  const maxBitrate = getComputedMaxBitrate(targetResolution, w, h);\n  let downscaleFactor = 1;\n  ['f', 'h', 'q'].forEach((rid) => {\n    // Reversing the order [f, h, q] to [q, h, f] as Chrome uses encoding index\n    // when deciding which layer to disable when CPU or bandwidth is constrained.\n    // Encodings should be ordered in increasing spatial resolution order.\n    optimalVideoLayers.unshift({\n      active: true,\n      rid,\n      width: Math.round(w / downscaleFactor),\n      height: Math.round(h / downscaleFactor),\n      maxBitrate:\n        Math.round(maxBitrate / downscaleFactor) || defaultBitratePerRid[rid],\n      scaleResolutionDownBy: downscaleFactor,\n      // Simulcast on iOS React-Native requires all encodings to share the same framerate\n      maxFramerate: {\n        f: 30,\n        h: isRNIos ? 30 : 25,\n        q: isRNIos ? 30 : 20,\n      }[rid],\n    });\n    downscaleFactor *= 2;\n  });\n\n  // for simplicity, we start with all layers enabled, then this function\n  // will clear/reassign the layers that are not needed\n  return withSimulcastConstraints(settings, optimalVideoLayers);\n};\n\n/**\n * Computes the maximum bitrate for a given resolution.\n * If the current resolution is lower than the target resolution,\n * we want to proportionally reduce the target bitrate.\n * If the current resolution is higher than the target resolution,\n * we want to use the target bitrate.\n *\n * @param targetResolution the target resolution.\n * @param currentWidth the current width of the track.\n * @param currentHeight the current height of the track.\n */\nexport const getComputedMaxBitrate = (\n  targetResolution: TargetResolution,\n  currentWidth: number,\n  currentHeight: number,\n): number => {\n  // if the current resolution is lower than the target resolution,\n  // we want to proportionally reduce the target bitrate\n  const { width: targetWidth, height: targetHeight } = targetResolution;\n  if (currentWidth < targetWidth || currentHeight < targetHeight) {\n    const currentPixels = currentWidth * currentHeight;\n    const targetPixels = targetWidth * targetHeight;\n    const reductionFactor = currentPixels / targetPixels;\n    return Math.round(targetResolution.bitrate * reductionFactor);\n  }\n  return targetResolution.bitrate;\n};\n\n/**\n * Browsers have different simulcast constraints for different video resolutions.\n *\n * This function modifies the provided list of video layers according to the\n * current implementation of simulcast constraints in the Chromium based browsers.\n *\n * https://chromium.googlesource.com/external/webrtc/+/refs/heads/main/media/engine/simulcast.cc#90\n */\nconst withSimulcastConstraints = (\n  settings: MediaTrackSettings,\n  optimalVideoLayers: OptimalVideoLayer[],\n) => {\n  let layers: OptimalVideoLayer[];\n\n  const size = Math.max(settings.width || 0, settings.height || 0);\n  if (size <= 320) {\n    // provide only one layer 320x240 (q), the one with the highest quality\n    layers = optimalVideoLayers.filter((layer) => layer.rid === 'f');\n  } else if (size <= 640) {\n    // provide two layers, 160x120 (q) and 640x480 (h)\n    layers = optimalVideoLayers.filter((layer) => layer.rid !== 'h');\n  } else {\n    // provide three layers for sizes > 640x480\n    layers = optimalVideoLayers;\n  }\n\n  const ridMapping = ['q', 'h', 'f'];\n  return layers.map<OptimalVideoLayer>((layer, index) => ({\n    ...layer,\n    rid: ridMapping[index], // reassign rid\n  }));\n};\n\nexport const findOptimalScreenSharingLayers = (\n  videoTrack: MediaStreamTrack,\n  preferences?: ScreenShareSettings,\n  defaultMaxBitrate = 3000000,\n): OptimalVideoLayer[] => {\n  const settings = videoTrack.getSettings();\n  return [\n    {\n      active: true,\n      rid: 'q', // single track, start from 'q'\n      width: settings.width || 0,\n      height: settings.height || 0,\n      scaleResolutionDownBy: 1,\n      maxBitrate: preferences?.maxBitrate ?? defaultMaxBitrate,\n      maxFramerate: preferences?.maxFramerate ?? 30,\n    },\n  ];\n};\n","import { TrackType } from '../../gen/video/sfu/models/models';\nimport type { StreamVideoParticipant } from '../../types';\nimport { TrackMuteType } from '../../types';\n\nexport const trackTypeToParticipantStreamKey = (\n  trackType: TrackType,\n): keyof StreamVideoParticipant => {\n  switch (trackType) {\n    case TrackType.SCREEN_SHARE:\n      return 'screenShareStream';\n    case TrackType.SCREEN_SHARE_AUDIO:\n      return 'screenShareAudioStream';\n    case TrackType.VIDEO:\n      return 'videoStream';\n    case TrackType.AUDIO:\n      return 'audioStream';\n    case TrackType.UNSPECIFIED:\n      throw new Error('Track type is unspecified');\n    default:\n      const exhaustiveTrackTypeCheck: never = trackType;\n      throw new Error(`Unknown track type: ${exhaustiveTrackTypeCheck}`);\n  }\n};\n\nexport const muteTypeToTrackType = (muteType: TrackMuteType): TrackType => {\n  switch (muteType) {\n    case 'audio':\n      return TrackType.AUDIO;\n    case 'video':\n      return TrackType.VIDEO;\n    case 'screenshare':\n      return TrackType.SCREEN_SHARE;\n    case 'screenshare_audio':\n      return TrackType.SCREEN_SHARE_AUDIO;\n    default:\n      const exhaustiveMuteTypeCheck: never = muteType;\n      throw new Error(`Unknown mute type: ${exhaustiveMuteTypeCheck}`);\n  }\n};\n","import { combineLatest, Observable, Subject } from 'rxjs';\n\ntype FunctionPatch<T> = (currentValue: T) => T;\n\n/**\n * A value or a function which takes the current value and returns a new value.\n */\nexport type Patch<T> = T | FunctionPatch<T>;\n\n/**\n * Checks if the provided update is a function patch.\n *\n * @param update the value to check.\n */\nconst isFunctionPatch = <T>(update: Patch<T>): update is FunctionPatch<T> =>\n  typeof update === 'function';\n\n/**\n * Gets the current value of an observable, or undefined if the observable has\n * not emitted a value yet.\n *\n * @param observable$ the observable to get the value from.\n */\nexport const getCurrentValue = <T>(observable$: Observable<T>) => {\n  let value!: T;\n  let err: Error | undefined = undefined;\n  combineLatest([observable$])\n    .subscribe({\n      next: ([v]) => {\n        value = v;\n      },\n      error: (e) => {\n        err = e;\n      },\n    })\n    .unsubscribe();\n\n  if (err) throw err;\n  return value;\n};\n\n/**\n * Updates the value of the provided Subject.\n * An `update` can either be a new value or a function which takes\n * the current value and returns a new value.\n *\n * @param subject the subject to update.\n * @param update the update to apply to the subject.\n * @return the updated value.\n */\nexport const setCurrentValue = <T>(subject: Subject<T>, update: Patch<T>) => {\n  const next = isFunctionPatch(update)\n    ? update(getCurrentValue(subject))\n    : update;\n\n  subject.next(next);\n  return next;\n};\n\n/**\n * Creates a subscription and returns a function to unsubscribe.\n *\n * @param observable the observable to subscribe to.\n * @param handler the handler to call when the observable emits a value.\n */\nexport const createSubscription = <T>(\n  observable: Observable<T>,\n  handler: (value: T) => void,\n) => {\n  const subscription = observable.subscribe(handler);\n  return () => {\n    subscription.unsubscribe();\n  };\n};\n","/**\n * Defines a comparator function which can be used for sorting items.\n */\nexport type Comparator<T> = (a: T, b: T) => -1 | 0 | 1;\n\n/**\n * Creates a new combined {@link Comparator<T>} which sorts items by the given comparators.\n * The comparators are applied in the order they are given (left -> right).\n *\n * @param comparators the comparators to use for sorting.\n * @returns a combined {@link Comparator<T>}.\n */\nexport const combineComparators = <T>(\n  ...comparators: Comparator<T>[]\n): Comparator<T> => {\n  return (a, b) => {\n    for (const comparator of comparators) {\n      const result = comparator(a, b);\n      if (result !== 0) return result;\n    }\n    return 0;\n  };\n};\n\n/**\n * Creates a new comparator which sorts items in descending order.\n *\n * @example\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const byValueDesc = descending(byValue);\n *\n * @param comparator the comparator to wrap.\n */\nexport const descending = <T>(comparator: Comparator<T>): Comparator<T> => {\n  return (a, b) => comparator(b, a);\n};\n\n/**\n * Creates a new comparator which conditionally applies the given comparator.\n *\n * @example\n * const shouldSortByValue = (a, b) => a % 2 === 0; // return false to turn it off\n * const byValue = (a, b) => a < b ? - 1 : a > b ? 1 : 0;\n * const comparator = conditional(shouldSortByValue)(byValue);\n *\n * @param predicate the predicate to use for determining whether to apply the comparator.\n */\nexport const conditional = <T>(predicate: (a: T, b: T) => boolean) => {\n  return (comparator: Comparator<T>): Comparator<T> => {\n    return (a, b) => {\n      if (!predicate(a, b)) return 0;\n      return comparator(a, b);\n    };\n  };\n};\n\n/**\n * A no-op comparator which always returns 0.\n */\nexport const noopComparator = <T>(): Comparator<T> => {\n  return () => 0;\n};\n","import { StreamVideoParticipant } from '../types';\nimport { TrackType } from '../gen/video/sfu/models/models';\n\n/**\n * Check if a participant has a video.\n *\n * @param p the participant to check.\n */\nexport const hasVideo = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.VIDEO);\n\n/**\n * Check if a participant has audio.\n *\n * @param p the participant to check.\n */\nexport const hasAudio = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.AUDIO);\n\n/**\n * Check if a participant is screen sharing.\n *\n * @param p the participant to check.\n */\nexport const hasScreenShare = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.SCREEN_SHARE);\n\n/**\n * Check if a participant is screen sharing audio.\n *\n * @param p the participant to check.\n */\nexport const hasScreenShareAudio = (p: StreamVideoParticipant): boolean =>\n  p.publishedTracks.includes(TrackType.SCREEN_SHARE_AUDIO);\n\n/**\n * Check if the participant is pinned.\n *\n * @param p the participant.\n */\nexport const isPinned = (p: StreamVideoParticipant): boolean =>\n  !!p.pin && (p.pin.isLocalPin || p.pin.pinnedAt > 0);\n","import { Comparator } from './';\nimport { StreamVideoParticipant } from '../types';\nimport {\n  hasAudio,\n  hasScreenShare,\n  hasVideo,\n} from '../helpers/participantUtils';\n\n/**\n * A comparator which sorts participants by the fact that they are the dominant speaker or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const dominantSpeaker: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.isDominantSpeaker && !b.isDominantSpeaker) return -1;\n  if (!a.isDominantSpeaker && b.isDominantSpeaker) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by the fact that they are speaking or not.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const speaking: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.isSpeaking && !b.isSpeaking) return -1;\n  if (!a.isSpeaking && b.isSpeaking) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by screen sharing status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const screenSharing: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasScreenShare(a) && !hasScreenShare(b)) return -1;\n  if (!hasScreenShare(a) && hasScreenShare(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by video status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const publishingVideo: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasVideo(a) && !hasVideo(b)) return -1;\n  if (!hasVideo(a) && hasVideo(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which sorts participants by audio status.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const publishingAudio: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (hasAudio(a) && !hasAudio(b)) return -1;\n  if (!hasAudio(a) && hasAudio(b)) return 1;\n  return 0;\n};\n\n/**\n * A comparator which prioritizes participants who are pinned.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const pinned: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.pin && b.pin) {\n    if (!a.pin.isLocalPin && b.pin.isLocalPin) return -1;\n    if (a.pin.isLocalPin && !b.pin.isLocalPin) return 1;\n    if (a.pin.pinnedAt > b.pin.pinnedAt) return -1;\n    if (a.pin.pinnedAt < b.pin.pinnedAt) return 1;\n  }\n\n  if (a.pin && !b.pin) return -1;\n  if (!a.pin && b.pin) return 1;\n\n  return 0;\n};\n\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific reaction.\n *\n * @param type the reaction type.\n */\nexport const reactionType = (\n  type: string,\n): Comparator<StreamVideoParticipant> => {\n  return (a, b) => {\n    if (a.reaction?.type === type && b.reaction?.type !== type) return -1;\n    if (a.reaction?.type !== type && b.reaction?.type === type) return 1;\n    return 0;\n  };\n};\n\n/**\n * A comparator creator which will set up a comparator which prioritizes\n * participants who have a specific role.\n *\n * @param roles the roles to prioritize.\n */\nexport const role =\n  (...roles: string[]): Comparator<StreamVideoParticipant> =>\n  (a, b) => {\n    if (hasAnyRole(a, roles) && !hasAnyRole(b, roles)) return -1;\n    if (!hasAnyRole(a, roles) && hasAnyRole(b, roles)) return 1;\n    return 0;\n  };\n\n/**\n * A comparator which sorts participants by name.\n *\n * @param a the first participant.\n * @param b the second participant.\n */\nexport const name: Comparator<StreamVideoParticipant> = (a, b) => {\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\nconst hasAnyRole = (p: StreamVideoParticipant, roles: string[]) =>\n  (p.roles || []).some((r) => roles.includes(r));\n","import { StreamVideoParticipant, VisibilityState } from '../types';\nimport { combineComparators, conditional } from './comparator';\nimport {\n  dominantSpeaker,\n  pinned,\n  publishingAudio,\n  publishingVideo,\n  reactionType,\n  role,\n  screenSharing,\n  speaking,\n} from './participants';\n\n// a comparator decorator which applies the decorated comparator only if the\n// participant is invisible.\n// This ensures stable sorting when all participants are visible.\nconst ifInvisibleBy = conditional(\n  (a: StreamVideoParticipant, b: StreamVideoParticipant) =>\n    a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE,\n);\n\n/**\n * A comparator that applies the decorated comparator when a participant is\n * either invisible or its visibility state isn't known.\n * For visible participants, it ensures stable sorting.\n */\nconst ifInvisibleOrUnknownBy = conditional(\n  (a: StreamVideoParticipant, b: StreamVideoParticipant) =>\n    a.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    a.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.INVISIBLE ||\n    b.viewportVisibilityState?.videoTrack === VisibilityState.UNKNOWN,\n);\n\n/**\n * The default sorting preset.\n */\nexport const defaultSortPreset = combineComparators(\n  pinned,\n  screenSharing,\n  ifInvisibleBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleBy(name),\n);\n\n/**\n * The sorting preset for speaker layout.\n */\nexport const speakerLayoutSortPreset = combineComparators(\n  pinned,\n  screenSharing,\n  dominantSpeaker,\n  ifInvisibleBy(\n    combineComparators(\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleBy(name),\n);\n\n/**\n * The sorting preset for layouts that don't render all participants but\n * instead, render them in pages.\n */\nexport const paginatedLayoutSortPreset = combineComparators(\n  pinned,\n  ifInvisibleOrUnknownBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  // ifInvisibleOrUnknownBy(name),\n);\n\n/**\n * The sorting preset for livestreams and audio rooms.\n */\nexport const livestreamOrAudioRoomSortPreset = combineComparators(\n  ifInvisibleBy(\n    combineComparators(\n      dominantSpeaker,\n      speaking,\n      reactionType('raised-hand'),\n      publishingVideo,\n      publishingAudio,\n    ),\n  ),\n  role('admin', 'host', 'speaker'),\n  // name,\n);\n","import {\n  BehaviorSubject,\n  distinctUntilChanged,\n  map,\n  Observable,\n  shareReplay,\n} from 'rxjs';\nimport type { Patch } from './rxUtils';\nimport * as RxUtils from './rxUtils';\nimport {\n  StreamVideoParticipant,\n  StreamVideoParticipantPatch,\n  StreamVideoParticipantPatches,\n} from '../types';\nimport { CallStatsReport } from '../stats';\nimport {\n  BlockedUserEvent,\n  CallHLSBroadcastingStartedEvent,\n  CallIngressResponse,\n  CallMemberAddedEvent,\n  CallMemberRemovedEvent,\n  CallMemberUpdatedEvent,\n  CallMemberUpdatedPermissionEvent,\n  CallReactionEvent,\n  CallResponse,\n  CallSessionParticipantJoinedEvent,\n  CallSessionParticipantLeftEvent,\n  CallSessionResponse,\n  CallSettingsResponse,\n  EgressResponse,\n  MemberResponse,\n  OwnCapability,\n  ThumbnailResponse,\n  UnblockedUserEvent,\n  UpdatedCallPermissionsEvent,\n  UserResponse,\n  WSEvent,\n} from '../gen/coordinator';\nimport { Pin } from '../gen/video/sfu/models/models';\nimport { Comparator, defaultSortPreset } from '../sorting';\nimport { getLogger } from '../logger';\nimport { hasScreenShare } from '../helpers/participantUtils';\n\n/**\n * Represents the state of the current call.\n */\nexport enum CallingState {\n  /**\n   * The call is in an unknown state.\n   */\n  UNKNOWN = 'unknown',\n  /**\n   * The call is in an idle state.\n   */\n  IDLE = 'idle',\n\n  /**\n   * The call is in the process of ringing.\n   * (User hasn't accepted nor rejected the call yet.)\n   */\n  RINGING = 'ringing',\n\n  /**\n   * The call is in the process of joining.\n   */\n  JOINING = 'joining',\n\n  /**\n   * The call is currently active.\n   */\n  JOINED = 'joined',\n\n  /**\n   * The call has been left.\n   */\n  LEFT = 'left',\n\n  /**\n   * The call is in the process of reconnecting.\n   */\n  RECONNECTING = 'reconnecting',\n\n  /**\n   * The call is in the process of migrating from one node to another.\n   */\n  MIGRATING = 'migrating',\n\n  /**\n   * The call has failed to reconnect.\n   */\n  RECONNECTING_FAILED = 'reconnecting-failed',\n\n  /**\n   * The call is in offline mode.\n   */\n  OFFLINE = 'offline',\n}\n\n/**\n * Returns the default egress object - when no egress data is available.\n */\nconst defaultEgress: EgressResponse = {\n  broadcasting: false,\n  hls: { playlist_url: '' },\n  rtmps: [],\n};\n\n/**\n * Holds the state of the current call.\n * @react You don't have to use this class directly, as we are exposing the state through Hooks.\n */\nexport class CallState {\n  private backstageSubject = new BehaviorSubject<boolean>(true);\n  private blockedUserIdsSubject = new BehaviorSubject<string[]>([]);\n  private createdAtSubject = new BehaviorSubject<Date>(new Date());\n  private endedAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private startsAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private updatedAtSubject = new BehaviorSubject<Date>(new Date());\n  private createdBySubject = new BehaviorSubject<UserResponse | undefined>(\n    undefined,\n  );\n  private customSubject = new BehaviorSubject<Record<string, any>>({});\n  private egressSubject = new BehaviorSubject<EgressResponse | undefined>(\n    undefined,\n  );\n  private ingressSubject = new BehaviorSubject<CallIngressResponse | undefined>(\n    undefined,\n  );\n  private recordingSubject = new BehaviorSubject<boolean>(false);\n  private sessionSubject = new BehaviorSubject<CallSessionResponse | undefined>(\n    undefined,\n  );\n  private settingsSubject = new BehaviorSubject<\n    CallSettingsResponse | undefined\n  >(undefined);\n  private transcribingSubject = new BehaviorSubject<boolean>(false);\n  private endedBySubject = new BehaviorSubject<UserResponse | undefined>(\n    undefined,\n  );\n  private thumbnailsSubject = new BehaviorSubject<\n    ThumbnailResponse | undefined\n  >(undefined);\n  private membersSubject = new BehaviorSubject<MemberResponse[]>([]);\n  private ownCapabilitiesSubject = new BehaviorSubject<OwnCapability[]>([]);\n  private callingStateSubject = new BehaviorSubject<CallingState>(\n    CallingState.UNKNOWN,\n  );\n  private startedAtSubject = new BehaviorSubject<Date | undefined>(undefined);\n  private participantCountSubject = new BehaviorSubject<number>(0);\n  private anonymousParticipantCountSubject = new BehaviorSubject<number>(0);\n  private participantsSubject = new BehaviorSubject<StreamVideoParticipant[]>(\n    [],\n  );\n  private callStatsReportSubject = new BehaviorSubject<\n    CallStatsReport | undefined\n  >(undefined);\n\n  // Derived state\n\n  /**\n   * The time the call session actually started.\n   * Useful for displaying the call duration.\n   */\n  startedAt$: Observable<Date | undefined>;\n\n  /**\n   * The server-side counted number of participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  participantCount$: Observable<number>;\n\n  /**\n   * The server-side counted number of anonymous participants connected to the current call.\n   * This number excludes the regular participants.\n   */\n  anonymousParticipantCount$: Observable<number>;\n\n  /**\n   * All participants of the current call (this includes the current user and other participants as well).\n   */\n  participants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * Remote participants of the current call (this includes every participant except the logged-in user).\n   */\n  remoteParticipants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * The local participant of the current call (the logged-in user).\n   */\n  localParticipant$: Observable<StreamVideoParticipant | undefined>;\n\n  /**\n   * Pinned participants of the current call.\n   */\n  pinnedParticipants$: Observable<StreamVideoParticipant[]>;\n\n  /**\n   * The currently elected dominant speaker in the current call.\n   */\n  dominantSpeaker$: Observable<StreamVideoParticipant | undefined>;\n\n  /**\n   * Emits true whenever there is an active screen sharing session within\n   * the current call. Useful for displaying a \"screen sharing\" indicator and\n   * switching the layout to a screen sharing layout.\n   *\n   * The actual screen sharing track isn't exposed here, but can be retrieved\n   * from the list of call participants. We also don't want to be limiting\n   * to the number of share screen tracks are displayed in a call.\n   */\n  hasOngoingScreenShare$: Observable<boolean>;\n\n  /**\n   * The latest stats report of the current call.\n   * When stats gathering is enabled, this observable will emit a new value\n   * at a regular (configurable) interval.\n   *\n   * Consumers of this observable can implement their own batching logic\n   * in case they want to show historical stats data.\n   */\n  callStatsReport$: Observable<CallStatsReport | undefined>;\n\n  /**\n   * The list of members in the current call.\n   */\n  members$: Observable<MemberResponse[]>;\n\n  /**\n   * The list of capabilities of the current user.\n   */\n  ownCapabilities$: Observable<OwnCapability[]>;\n\n  /**\n   * The calling state.\n   */\n  callingState$: Observable<CallingState>;\n\n  /**\n   * The backstage state.\n   */\n  backstage$: Observable<boolean>;\n\n  /**\n   * Will provide the list of blocked user IDs.\n   */\n  blockedUserIds$: Observable<string[]>;\n\n  /**\n   * Will provide the time when this call has been created.\n   */\n  createdAt$: Observable<Date>;\n\n  /**\n   * Will provide the time when this call has been ended.\n   */\n  endedAt$: Observable<Date | undefined>;\n\n  /**\n   * Will provide the time when this call has been scheduled to start.\n   */\n  startsAt$: Observable<Date | undefined>;\n\n  /**\n   * Will provide the time when this call has been updated.\n   */\n  updatedAt$: Observable<Date>;\n\n  /**\n   * Will provide the user who created this call.\n   */\n  createdBy$: Observable<UserResponse | undefined>;\n\n  /**\n   * Will provide the custom data of this call.\n   */\n  custom$: Observable<Record<string, any>>;\n\n  /**\n   * Will provide the egress data of this call.\n   */\n  egress$: Observable<EgressResponse | undefined>;\n\n  /**\n   * Will provide the ingress data of this call.\n   */\n  ingress$: Observable<CallIngressResponse | undefined>;\n\n  /**\n   * Will provide the recording state of this call.\n   */\n  recording$: Observable<boolean>;\n\n  /**\n   * Will provide the session data of this call.\n   */\n  session$: Observable<CallSessionResponse | undefined>;\n\n  /**\n   * Will provide the settings of this call.\n   */\n  settings$: Observable<CallSettingsResponse | undefined>;\n\n  /**\n   * Will provide the transcribing state of this call.\n   */\n  transcribing$: Observable<boolean>;\n\n  /**\n   * Will provide the user who ended this call.\n   */\n  endedBy$: Observable<UserResponse | undefined>;\n\n  /**\n   * Will provide the thumbnails of this call.\n   */\n  thumbnails$: Observable<ThumbnailResponse | undefined>;\n\n  readonly logger = getLogger(['CallState']);\n\n  /**\n   * A list of comparators that are used to sort the participants.\n   *\n   * @private\n   */\n  private sortParticipantsBy = defaultSortPreset;\n\n  private readonly eventHandlers: {\n    [EventType in WSEvent['type']]:\n      | ((event: Extract<WSEvent, { type: EventType }>) => void)\n      | undefined;\n  };\n\n  /**\n   * Creates a new instance of the CallState class.\n   *\n   */\n  constructor() {\n    this.participants$ = this.participantsSubject.asObservable().pipe(\n      // maintain stable-sort by mutating the participants stored\n      // in the original subject\n      map((ps) => ps.sort(this.sortParticipantsBy)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.localParticipant$ = this.participants$.pipe(\n      map((participants) => participants.find((p) => p.isLocalParticipant)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.remoteParticipants$ = this.participants$.pipe(\n      map((participants) => participants.filter((p) => !p.isLocalParticipant)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.pinnedParticipants$ = this.participants$.pipe(\n      map((participants) => participants.filter((p) => !!p.pin)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.dominantSpeaker$ = this.participants$.pipe(\n      map((participants) => participants.find((p) => p.isDominantSpeaker)),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    this.hasOngoingScreenShare$ = this.participants$.pipe(\n      map((participants) => participants.some((p) => hasScreenShare(p))),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    // dates\n    this.createdAt$ = this.createdAtSubject.asObservable();\n    this.endedAt$ = this.endedAtSubject.asObservable();\n    this.startsAt$ = this.startsAtSubject.asObservable();\n    this.startedAt$ = this.startedAtSubject.asObservable();\n    this.updatedAt$ = this.updatedAtSubject.asObservable();\n\n    this.callStatsReport$ = this.callStatsReportSubject.asObservable();\n    this.members$ = this.membersSubject.asObservable();\n\n    // complex objects should work as streams of data\n    this.createdBy$ = this.createdBySubject.asObservable();\n    this.custom$ = this.customSubject.asObservable();\n    this.egress$ = this.egressSubject.asObservable();\n    this.ingress$ = this.ingressSubject.asObservable();\n    this.session$ = this.sessionSubject.asObservable();\n    this.settings$ = this.settingsSubject.asObservable();\n    this.endedBy$ = this.endedBySubject.asObservable();\n    this.thumbnails$ = this.thumbnailsSubject.asObservable();\n\n    /**\n     * Performs shallow comparison of two arrays.\n     * Expects primitive values: [1, 2, 3] is equal to [2, 1, 3].\n     */\n    const isShallowEqual = <T>(a: Array<T>, b: Array<T>): boolean => {\n      if (a.length !== b.length) return false;\n      for (const item of a) if (!b.includes(item)) return false;\n      for (const item of b) if (!a.includes(item)) return false;\n      return true;\n    };\n\n    /**\n     * Creates an Observable from the given subject by piping to the\n     * `distinctUntilChanged()` operator.\n     */\n    const duc = <T>(\n      subject: BehaviorSubject<T>,\n      comparator?: (a: T, b: T) => boolean,\n    ): Observable<T> =>\n      subject.asObservable().pipe(distinctUntilChanged(comparator));\n\n    // primitive values should only emit once the value they hold changes\n    this.anonymousParticipantCount$ = duc(\n      this.anonymousParticipantCountSubject,\n    );\n    this.blockedUserIds$ = duc(this.blockedUserIdsSubject, isShallowEqual);\n    this.backstage$ = duc(this.backstageSubject);\n    this.callingState$ = duc(this.callingStateSubject);\n    this.ownCapabilities$ = duc(this.ownCapabilitiesSubject, isShallowEqual);\n    this.participantCount$ = duc(this.participantCountSubject);\n    this.recording$ = duc(this.recordingSubject);\n    this.transcribing$ = duc(this.transcribingSubject);\n\n    this.eventHandlers = {\n      // these events are not updating the call state:\n      'call.closed_caption': undefined,\n      'call.deleted': undefined,\n      'call.permission_request': undefined,\n      'call.recording_failed': undefined,\n      'call.recording_ready': undefined,\n      'call.transcription_ready': undefined,\n      'call.user_muted': undefined,\n      'connection.error': undefined,\n      'connection.ok': undefined,\n      'health.check': undefined,\n      custom: undefined,\n\n      // events that update call state:\n      'call.accepted': (e) => this.updateFromCallResponse(e.call),\n      'call.blocked_user': this.blockUser,\n      'call.created': (e) => this.updateFromCallResponse(e.call),\n      'call.ended': (e) => {\n        this.updateFromCallResponse(e.call);\n        this.setCurrentValue(this.endedBySubject, e.user);\n      },\n      'call.hls_broadcasting_failed': this.updateFromHLSBroadcastingFailed,\n      'call.hls_broadcasting_started': this.updateFromHLSBroadcastStarted,\n      'call.hls_broadcasting_stopped': this.updateFromHLSBroadcastStopped,\n      'call.live_started': (e) => this.updateFromCallResponse(e.call),\n      'call.member_added': this.updateFromMemberAdded,\n      'call.member_removed': this.updateFromMemberRemoved,\n      'call.member_updated_permission': this.updateMembers,\n      'call.member_updated': this.updateMembers,\n      'call.notification': (e) => {\n        this.updateFromCallResponse(e.call);\n        this.setMembers(e.members);\n      },\n      'call.permissions_updated': this.updateOwnCapabilities,\n      'call.reaction_new': this.updateParticipantReaction,\n      'call.recording_started': () =>\n        this.setCurrentValue(this.recordingSubject, true),\n      'call.recording_stopped': () =>\n        this.setCurrentValue(this.recordingSubject, false),\n      'call.rejected': (e) => this.updateFromCallResponse(e.call),\n      'call.ring': (e) => this.updateFromCallResponse(e.call),\n      'call.session_ended': (e) => this.updateFromCallResponse(e.call),\n      'call.session_participant_joined':\n        this.updateFromSessionParticipantJoined,\n      'call.session_participant_left': this.updateFromSessionParticipantLeft,\n      'call.session_started': (e) => this.updateFromCallResponse(e.call),\n      'call.transcription_started': () => {\n        this.setCurrentValue(this.transcribingSubject, true);\n      },\n      'call.transcription_stopped': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.transcription_failed': () => {\n        this.setCurrentValue(this.transcribingSubject, false);\n      },\n      'call.unblocked_user': this.unblockUser,\n      'call.updated': (e) => this.updateFromCallResponse(e.call),\n    };\n  }\n\n  /**\n   * Sets the list of criteria that are used to sort the participants.\n   * To disable sorting, you can pass `noopComparator()`.\n   *\n   * @param comparator the comparator to use to sort the participants.\n   */\n  setSortParticipantsBy = (comparator: Comparator<StreamVideoParticipant>) => {\n    this.sortParticipantsBy = comparator;\n    // trigger re-sorting of participants\n    this.setCurrentValue(this.participantsSubject, (ps) => ps);\n  };\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  setCurrentValue = RxUtils.setCurrentValue;\n\n  /**\n   * The server-side counted number of participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get participantCount() {\n    return this.getCurrentValue(this.participantCount$);\n  }\n\n  /**\n   * Sets the number of participants in the current call.\n   *\n   * @internal\n   * @param count the number of participants.\n   */\n  setParticipantCount = (count: Patch<number>) => {\n    return this.setCurrentValue(this.participantCountSubject, count);\n  };\n\n  /**\n   * The time the call session actually started.\n   * Useful for displaying the call duration.\n   */\n  get startedAt() {\n    return this.getCurrentValue(this.startedAt$);\n  }\n\n  /**\n   * Sets the time the call session actually started.\n   *\n   * @internal\n   * @param startedAt the time the call session actually started.\n   */\n  setStartedAt = (startedAt: Patch<Date | undefined>) => {\n    return this.setCurrentValue(this.startedAtSubject, startedAt);\n  };\n\n  /**\n   * The server-side counted number of anonymous participants connected to the current call.\n   * This number includes the anonymous participants as well.\n   */\n  get anonymousParticipantCount() {\n    return this.getCurrentValue(this.anonymousParticipantCount$);\n  }\n\n  /**\n   * Sets the number of anonymous participants in the current call.\n   *\n   * @internal\n   * @param count the number of anonymous participants.\n   */\n  setAnonymousParticipantCount = (count: Patch<number>) => {\n    return this.setCurrentValue(this.anonymousParticipantCountSubject, count);\n  };\n\n  /**\n   * The list of participants in the current call.\n   */\n  get participants() {\n    return this.getCurrentValue(this.participants$);\n  }\n\n  /**\n   * Sets the list of participants in the current call.\n   *\n   * @internal\n   *\n   * @param participants the list of participants.\n   */\n  setParticipants = (participants: Patch<StreamVideoParticipant[]>) => {\n    return this.setCurrentValue(this.participantsSubject, participants);\n  };\n\n  /**\n   * The local participant in the current call.\n   */\n  get localParticipant() {\n    return this.getCurrentValue(this.localParticipant$);\n  }\n\n  /**\n   * The list of remote participants in the current call.\n   */\n  get remoteParticipants() {\n    return this.getCurrentValue(this.remoteParticipants$);\n  }\n\n  /**\n   * The dominant speaker in the current call.\n   */\n  get dominantSpeaker() {\n    return this.getCurrentValue(this.dominantSpeaker$);\n  }\n\n  /**\n   * The list of pinned participants in the current call.\n   */\n  get pinnedParticipants() {\n    return this.getCurrentValue(this.pinnedParticipants$);\n  }\n\n  /**\n   * Tell if there is an ongoing screen share in this call.\n   */\n  get hasOngoingScreenShare() {\n    return this.getCurrentValue(this.hasOngoingScreenShare$);\n  }\n\n  /**\n   * The calling state.\n   */\n  get callingState() {\n    return this.getCurrentValue(this.callingState$);\n  }\n\n  /**\n   * Sets the calling state.\n   *\n   * @internal\n   * @param state the new calling state.\n   */\n  setCallingState = (state: Patch<CallingState>) => {\n    return this.setCurrentValue(this.callingStateSubject, state);\n  };\n\n  /**\n   * The call stats report.\n   */\n  get callStatsReport() {\n    return this.getCurrentValue(this.callStatsReport$);\n  }\n\n  /**\n   * Sets the call stats report.\n   *\n   * @internal\n   * @param report the report to set.\n   */\n  setCallStatsReport = (report: Patch<CallStatsReport | undefined>) => {\n    return this.setCurrentValue(this.callStatsReportSubject, report);\n  };\n\n  /**\n   * The members of the current call.\n   */\n  get members() {\n    return this.getCurrentValue(this.members$);\n  }\n\n  /**\n   * Sets the members of the current call.\n   *\n   * @internal\n   * @param members the members to set.\n   */\n  setMembers = (members: Patch<MemberResponse[]>) => {\n    this.setCurrentValue(this.membersSubject, members);\n  };\n\n  /**\n   * The capabilities of the current user for the current call.\n   */\n  get ownCapabilities() {\n    return this.getCurrentValue(this.ownCapabilities$);\n  }\n\n  /**\n   * Sets the own capabilities.\n   *\n   * @internal\n   * @param capabilities the capabilities to set.\n   */\n  setOwnCapabilities = (capabilities: Patch<OwnCapability[]>) => {\n    return this.setCurrentValue(this.ownCapabilitiesSubject, capabilities);\n  };\n\n  /**\n   * The backstage state.\n   */\n  get backstage() {\n    return this.getCurrentValue(this.backstage$);\n  }\n\n  /**\n   * Will provide the list of blocked user IDs.\n   */\n  get blockedUserIds() {\n    return this.getCurrentValue(this.blockedUserIds$);\n  }\n\n  /**\n   * Will provide the time when this call has been created.\n   */\n  get createdAt() {\n    return this.getCurrentValue(this.createdAt$);\n  }\n\n  /**\n   * Will provide the time when this call has been ended.\n   */\n  get endedAt() {\n    return this.getCurrentValue(this.endedAt$);\n  }\n\n  /**\n   * Will provide the time when this call has been scheduled to start.\n   */\n  get startsAt() {\n    return this.getCurrentValue(this.startsAt$);\n  }\n\n  /**\n   * Will provide the time when this call has been updated.\n   */\n  get updatedAt() {\n    return this.getCurrentValue(this.updatedAt$);\n  }\n\n  /**\n   * Will provide the user who created this call.\n   */\n  get createdBy() {\n    return this.getCurrentValue(this.createdBy$);\n  }\n\n  /**\n   * Will provide the custom data of this call.\n   */\n  get custom() {\n    return this.getCurrentValue(this.custom$);\n  }\n\n  /**\n   * Will provide the egress data of this call.\n   */\n  get egress() {\n    return this.getCurrentValue(this.egress$);\n  }\n\n  /**\n   * Will provide the ingress data of this call.\n   */\n  get ingress() {\n    return this.getCurrentValue(this.ingress$);\n  }\n\n  /**\n   * Will provide the recording state of this call.\n   */\n  get recording() {\n    return this.getCurrentValue(this.recording$);\n  }\n\n  /**\n   * Will provide the session data of this call.\n   */\n  get session() {\n    return this.getCurrentValue(this.session$);\n  }\n\n  /**\n   * Will provide the settings of this call.\n   */\n  get settings() {\n    return this.getCurrentValue(this.settings$);\n  }\n\n  /**\n   * Will provide the transcribing state of this call.\n   */\n  get transcribing() {\n    return this.getCurrentValue(this.transcribing$);\n  }\n\n  /**\n   * Will provide the user who ended this call.\n   */\n  get endedBy() {\n    return this.getCurrentValue(this.endedBy$);\n  }\n\n  /**\n   * Will provide the thumbnails of this call, if enabled in the call settings.\n   */\n  get thumbnails() {\n    return this.getCurrentValue(this.thumbnails$);\n  }\n\n  /**\n   * Will try to find the participant with the given sessionId in the current call.\n   *\n   * @param sessionId the sessionId of the participant to find.\n   * @returns the participant with the given sessionId or undefined if not found.\n   */\n  findParticipantBySessionId = (\n    sessionId: string,\n  ): StreamVideoParticipant | undefined => {\n    return this.participants.find((p) => p.sessionId === sessionId);\n  };\n\n  /**\n   * Returns a new lookup table of participants indexed by their session ID.\n   */\n  getParticipantLookupBySessionId = () => {\n    return this.participants.reduce<{\n      [sessionId: string]: StreamVideoParticipant | undefined;\n    }>((lookupTable, participant) => {\n      lookupTable[participant.sessionId] = participant;\n      return lookupTable;\n    }, {});\n  };\n\n  /**\n   * Updates a participant in the current call identified by the given `sessionId`.\n   * If the participant can't be found, this operation is no-op.\n   *\n   * @internal\n   *\n   * @param sessionId the session ID of the participant to update.\n   * @param patch the patch to apply to the participant.\n   * @returns the updated participant or `undefined` if the participant couldn't be found.\n   */\n  updateParticipant = (\n    sessionId: string,\n    patch:\n      | StreamVideoParticipantPatch\n      | ((p: StreamVideoParticipant) => StreamVideoParticipantPatch),\n  ) => {\n    const participant = this.findParticipantBySessionId(sessionId);\n    if (!participant) {\n      this.logger('warn', `Participant with sessionId ${sessionId} not found`);\n      return;\n    }\n\n    const thePatch = typeof patch === 'function' ? patch(participant) : patch;\n    const updatedParticipant: StreamVideoParticipant = {\n      // FIXME OL: this is not a deep merge, we might want to revisit this\n      ...participant,\n      ...thePatch,\n    };\n    return this.setParticipants((participants) =>\n      participants.map((p) =>\n        p.sessionId === sessionId ? updatedParticipant : p,\n      ),\n    );\n  };\n\n  /**\n   * Updates a participant in the current call identified by the given `sessionId`.\n   * If a participant with matching `sessionId` can't be found, the provided\n   * `participant` is added to the list of participants.\n   *\n   * @param sessionId the session ID of the participant to update.\n   * @param participant the participant to update or add.\n   */\n  updateOrAddParticipant = (\n    sessionId: string,\n    participant: StreamVideoParticipant,\n  ) => {\n    return this.setParticipants((participants) => {\n      let add = true;\n      const nextParticipants = participants.map((p) => {\n        if (p.sessionId === sessionId) {\n          add = false;\n          return {\n            ...p,\n            ...participant,\n          };\n        }\n        return p;\n      });\n      if (add) nextParticipants.push(participant);\n      return nextParticipants;\n    });\n  };\n\n  /**\n   * Updates all participants in the current call whose session ID is in the given `sessionIds`.\n   * If no patches are provided, this operation is no-op.\n   *\n   * @internal\n   *\n   * @param patch the patch to apply to the participants.\n   * @returns all participants, with all patch applied.\n   */\n  updateParticipants = (patch: StreamVideoParticipantPatches) => {\n    if (Object.keys(patch).length === 0) return;\n    return this.setParticipants((participants) =>\n      participants.map((p) => {\n        const thePatch = patch[p.sessionId];\n        if (thePatch) {\n          return {\n            ...p,\n            ...thePatch,\n          };\n        }\n        return p;\n      }),\n    );\n  };\n\n  /**\n   * Updates the call state with the data received from the server.\n   *\n   * @internal\n   *\n   * @param event the video event that our backend sent us.\n   */\n  updateFromEvent = (event: WSEvent) => {\n    const update = this.eventHandlers[event.type];\n    if (update) {\n      update(event as any);\n    }\n  };\n\n  /**\n   * Updates the participant pinned state with server side pinning data.\n   *\n   * @param pins the latest pins from the server.\n   */\n  setServerSidePins = (pins: Pin[]) => {\n    const pinsLookup = pins.reduce<{ [sessionId: string]: number | undefined }>(\n      (lookup, pin) => {\n        lookup[pin.sessionId] = Date.now();\n        return lookup;\n      },\n      {},\n    );\n\n    return this.setParticipants((participants) =>\n      participants.map((participant) => {\n        const serverSidePinnedAt = pinsLookup[participant.sessionId];\n        // the participant is newly pinned\n        if (serverSidePinnedAt) {\n          return {\n            ...participant,\n            pin: {\n              isLocalPin: false,\n              pinnedAt: serverSidePinnedAt,\n            },\n          };\n        }\n        // the participant is no longer pinned server side\n        // we need to reset the pin\n        if (participant.pin && !participant.pin.isLocalPin) {\n          return {\n            ...participant,\n            pin: undefined,\n          };\n        }\n        // no changes to be applied\n        return participant;\n      }),\n    );\n  };\n\n  /**\n   * Updates the call state with the data received from the server.\n   *\n   * @internal\n   *\n   * @param call the call response from the server.\n   */\n  updateFromCallResponse = (call: CallResponse) => {\n    this.setCurrentValue(this.backstageSubject, call.backstage);\n    this.setCurrentValue(this.blockedUserIdsSubject, call.blocked_user_ids);\n    this.setCurrentValue(this.createdAtSubject, new Date(call.created_at));\n    this.setCurrentValue(this.updatedAtSubject, new Date(call.updated_at));\n    this.setCurrentValue(\n      this.startsAtSubject,\n      call.starts_at ? new Date(call.starts_at) : undefined,\n    );\n    this.setCurrentValue(\n      this.endedAtSubject,\n      call.ended_at ? new Date(call.ended_at) : undefined,\n    );\n    this.setCurrentValue(this.createdBySubject, call.created_by);\n    this.setCurrentValue(this.customSubject, call.custom);\n    this.setCurrentValue(this.egressSubject, call.egress);\n    this.setCurrentValue(this.ingressSubject, call.ingress);\n    this.setCurrentValue(this.recordingSubject, call.recording);\n    this.setCurrentValue(this.sessionSubject, call.session);\n    this.setCurrentValue(this.settingsSubject, call.settings);\n    this.setCurrentValue(this.transcribingSubject, call.transcribing);\n    this.setCurrentValue(this.thumbnailsSubject, call.thumbnails);\n  };\n\n  private updateFromMemberRemoved = (event: CallMemberRemovedEvent) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) =>\n      members.filter((m) => event.members.indexOf(m.user_id) === -1),\n    );\n  };\n\n  private updateFromMemberAdded = (event: CallMemberAddedEvent) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) => [\n      ...members,\n      ...event.members,\n    ]);\n  };\n\n  private updateFromHLSBroadcastStopped = () => {\n    this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n      ...egress,\n      broadcasting: false,\n    }));\n  };\n\n  private updateFromHLSBroadcastingFailed = () => {\n    this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n      ...egress,\n      broadcasting: false,\n    }));\n  };\n\n  private updateFromHLSBroadcastStarted = (\n    event: CallHLSBroadcastingStartedEvent,\n  ) => {\n    this.setCurrentValue(this.egressSubject, (egress = defaultEgress) => ({\n      ...egress,\n      broadcasting: true,\n      hls: {\n        ...egress.hls,\n        playlist_url: event.hls_playlist_url,\n      },\n    }));\n  };\n\n  private updateFromSessionParticipantLeft = (\n    event: CallSessionParticipantLeftEvent,\n  ) => {\n    this.setCurrentValue(this.sessionSubject, (session) => {\n      if (!session) {\n        this.logger(\n          'warn',\n          `Received call.session_participant_left event but no session is available.`,\n          event,\n        );\n        return session;\n      }\n      const { participants, participants_count_by_role } = session;\n      const { user, user_session_id } = event.participant;\n      return {\n        ...session,\n        participants: participants.filter(\n          (p) => p.user_session_id !== user_session_id,\n        ),\n        participants_count_by_role: {\n          ...participants_count_by_role,\n          [user.role]: Math.max(\n            0,\n            (participants_count_by_role[user.role] || 0) - 1,\n          ),\n        },\n      };\n    });\n  };\n\n  private updateFromSessionParticipantJoined = (\n    event: CallSessionParticipantJoinedEvent,\n  ) => {\n    this.setCurrentValue(this.sessionSubject, (session) => {\n      if (!session) {\n        this.logger(\n          'warn',\n          `Received call.session_participant_joined event but no session is available.`,\n          event,\n        );\n        return session;\n      }\n      const { participants, participants_count_by_role } = session;\n      const { user, user_session_id } = event.participant;\n      // It could happen that the backend delivers the same participant more than once.\n      // Once with the call.session_started event and once again with the\n      // call.session_participant_joined event. In this case,\n      // we should update the existing participant and prevent duplicating it.\n      let shouldInsertParticipant = true;\n      const updatedParticipants = participants.map((p) => {\n        if (p.user_session_id === user_session_id) {\n          shouldInsertParticipant = false;\n          return event.participant;\n        }\n        return p;\n      });\n      if (shouldInsertParticipant) {\n        // this is a new array, we can safely push the new participant\n        updatedParticipants.push(event.participant);\n      }\n\n      // If we are updating an existing participant, we don't want to increment\n      // the participant_by_role count.\n      const increment = shouldInsertParticipant ? 1 : 0;\n      return {\n        ...session,\n        participants: updatedParticipants,\n        participants_count_by_role: {\n          ...participants_count_by_role,\n          [user.role]: (participants_count_by_role[user.role] || 0) + increment,\n        },\n      };\n    });\n  };\n\n  private updateMembers = (\n    event: CallMemberUpdatedEvent | CallMemberUpdatedPermissionEvent,\n  ) => {\n    this.updateFromCallResponse(event.call);\n    this.setCurrentValue(this.membersSubject, (members) =>\n      members.map((member) => {\n        const memberUpdate = event.members.find(\n          (m) => m.user_id === member.user_id,\n        );\n        return memberUpdate ? memberUpdate : member;\n      }),\n    );\n  };\n\n  private updateParticipantReaction = (event: CallReactionEvent) => {\n    const { user, custom, type, emoji_code } = event.reaction;\n    this.setParticipants((participants) => {\n      return participants.map((p) => {\n        // skip if the reaction is not for this participant\n        if (p.userId !== user.id) return p;\n        // update the participant with the new reaction\n        return {\n          ...p,\n          reaction: {\n            type,\n            emoji_code,\n            custom,\n          },\n        };\n      });\n    });\n  };\n\n  private unblockUser = (event: UnblockedUserEvent) => {\n    this.setCurrentValue(this.blockedUserIdsSubject, (current) => {\n      if (!current) return current;\n      return current.filter((id) => id !== event.user.id);\n    });\n  };\n\n  private blockUser = (event: BlockedUserEvent) => {\n    this.setCurrentValue(this.blockedUserIdsSubject, (current) => [\n      ...(current || []),\n      event.user.id,\n    ]);\n  };\n\n  private updateOwnCapabilities = (event: UpdatedCallPermissionsEvent) => {\n    if (event.user.id === this.localParticipant?.userId) {\n      this.setCurrentValue(this.ownCapabilitiesSubject, event.own_capabilities);\n    }\n  };\n}\n","import { BehaviorSubject, Observable } from 'rxjs';\nimport type { Patch } from './rxUtils';\nimport * as RxUtils from './rxUtils';\nimport { Call } from '../Call';\nimport { CallingState } from './CallState';\nimport type { OwnUserResponse } from '../gen/coordinator';\nimport { getLogger } from '../logger';\n\nexport class StreamVideoWriteableStateStore {\n  /**\n   * A store keeping data of a successfully connected user over WS to the coordinator server.\n   */\n  connectedUserSubject = new BehaviorSubject<OwnUserResponse | undefined>(\n    undefined,\n  );\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  callsSubject = new BehaviorSubject<Call[]>([]);\n\n  constructor() {\n    this.connectedUserSubject.subscribe(async (user) => {\n      // leave all calls when the user disconnects.\n      if (!user) {\n        const logger = getLogger(['client-state']);\n        for (const call of this.calls) {\n          if (call.state.callingState === CallingState.LEFT) continue;\n\n          logger('info', `User disconnected, leaving call: ${call.cid}`);\n          await call\n            .leave({ reason: 'client.disconnectUser() called' })\n            .catch((err) => {\n              logger('error', `Error leaving call: ${call.cid}`, err);\n            });\n        }\n      }\n    });\n  }\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  private getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  private setCurrentValue = RxUtils.setCurrentValue;\n\n  /**\n   * The currently connected user.\n   */\n  get connectedUser(): OwnUserResponse | undefined {\n    return this.getCurrentValue(this.connectedUserSubject);\n  }\n\n  /**\n   * Sets the currently connected user.\n   *\n   * @internal\n   * @param user the user to set as connected.\n   */\n  setConnectedUser = (user: Patch<OwnUserResponse | undefined>) => {\n    return this.setCurrentValue(this.connectedUserSubject, user);\n  };\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls(): Call[] {\n    return this.getCurrentValue(this.callsSubject);\n  }\n\n  /**\n   * Sets the list of {@link Call} objects created/tracked by this client.\n   * @param calls\n   */\n  setCalls = (calls: Patch<Call[]>) => {\n    return this.setCurrentValue(this.callsSubject, calls);\n  };\n\n  /**\n   * Adds a {@link Call} object to the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param call the call to add.\n   */\n  registerCall = (call: Call) => {\n    if (!this.calls.find((c) => c.cid === call.cid)) {\n      this.setCalls((calls) => [...calls, call]);\n    }\n  };\n\n  /**\n   * Removes a {@link Call} object from the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param call the call to remove\n   */\n  unregisterCall = (call: Call) => {\n    return this.setCalls((calls) => calls.filter((c) => c !== call));\n  };\n\n  /**\n   * Finds a {@link Call} object in the list of {@link Call} objects created/tracked by this client.\n   *\n   * @param type the type of call to find.\n   * @param id the id of the call to find.\n   */\n  findCall = (type: string, id: string) => {\n    return this.calls.find((c) => c.type === type && c.id === id);\n  };\n}\n\n/**\n * A reactive store that exposes state variables in a reactive manner.\n * You can subscribe to changes of the different state variables.\n * This central store contains all the state variables related to [`StreamVideoClient`](./StreamVideClient.md) and [`Call`](./Call.md).\n */\nexport class StreamVideoReadOnlyStateStore {\n  /**\n   * Data describing a user successfully connected over WS to coordinator server.\n   */\n  connectedUser$: Observable<OwnUserResponse | undefined>;\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  calls$: Observable<Call[]>;\n\n  /**\n   * This method allows you the get the current value of a state variable.\n   *\n   * @param observable the observable to get the current value of.\n   * @returns the current value of the observable.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  constructor(store: StreamVideoWriteableStateStore) {\n    // convert and expose subjects as observables\n    this.connectedUser$ = store.connectedUserSubject.asObservable();\n    this.calls$ = store.callsSubject.asObservable();\n  }\n\n  /**\n   * The current user connected over WS to the backend.\n   */\n  get connectedUser(): OwnUserResponse | undefined {\n    return RxUtils.getCurrentValue(this.connectedUser$);\n  }\n\n  /**\n   * A list of {@link Call} objects created/tracked by this client.\n   */\n  get calls(): Call[] {\n    return RxUtils.getCurrentValue(this.calls$);\n  }\n}\n","import * as SDP from 'sdp-transform';\n\ntype Media = {\n  original: string;\n  mediaWithPorts: string;\n  codecOrder: string;\n};\n\ntype RtpMap = {\n  original: string;\n  payload: string;\n  codec: string;\n};\n\ntype Fmtp = {\n  original: string;\n  payload: string;\n  config: string;\n};\n\nconst getRtpMap = (line: string): RtpMap | undefined => {\n  // Example: a=rtpmap:110 opus/48000/2\n  const rtpRegex = /^a=rtpmap:(\\d*) ([\\w\\-.]*)(?:\\s*\\/(\\d*)(?:\\s*\\/(\\S*))?)?/;\n  // The first captured group is the payload type number, the second captured group is the encoding name, the third captured group is the clock rate, and the fourth captured group is any additional parameters.\n  const rtpMatch = rtpRegex.exec(line);\n  if (rtpMatch) {\n    return {\n      original: rtpMatch[0],\n      payload: rtpMatch[1],\n      codec: rtpMatch[2],\n    };\n  }\n};\n\nconst getFmtp = (line: string): Fmtp | undefined => {\n  // Example: a=fmtp:111 minptime=10; useinbandfec=1\n  const fmtpRegex = /^a=fmtp:(\\d*) (.*)/;\n  const fmtpMatch = fmtpRegex.exec(line);\n  // The first captured group is the payload type number, the second captured group is any additional parameters.\n  if (fmtpMatch) {\n    return {\n      original: fmtpMatch[0],\n      payload: fmtpMatch[1],\n      config: fmtpMatch[2],\n    };\n  }\n};\n\n/**\n * gets the media section for the specified media type.\n * The media section contains the media type, port, codec, and payload type.\n * Example: m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n */\nconst getMedia = (line: string, mediaType: string): Media | undefined => {\n  const regex = new RegExp(`(m=${mediaType} \\\\d+ [\\\\w/]+) ([\\\\d\\\\s]+)`);\n  const match = regex.exec(line);\n  if (match) {\n    return {\n      original: match[0],\n      mediaWithPorts: match[1],\n      codecOrder: match[2],\n    };\n  }\n};\n\nconst getMediaSection = (sdp: string, mediaType: 'video' | 'audio') => {\n  let media: Media | undefined;\n  const rtpMap: RtpMap[] = [];\n  const fmtp: Fmtp[] = [];\n  let isTheRequiredMediaSection = false;\n  sdp.split(/(\\r\\n|\\r|\\n)/).forEach((line) => {\n    const isValidLine = /^([a-z])=(.*)/.test(line);\n    if (!isValidLine) return;\n    /*\n      NOTE: according to https://www.rfc-editor.org/rfc/rfc8866.pdf\n      Each media description starts with an \"m=\" line and continues to the next media description or the end of the whole session description, whichever comes first\n    */\n    const type = line[0];\n    if (type === 'm') {\n      const _media = getMedia(line, mediaType);\n      isTheRequiredMediaSection = !!_media;\n      if (_media) {\n        media = _media;\n      }\n    } else if (isTheRequiredMediaSection && type === 'a') {\n      const rtpMapLine = getRtpMap(line);\n      const fmtpLine = getFmtp(line);\n      if (rtpMapLine) {\n        rtpMap.push(rtpMapLine);\n      } else if (fmtpLine) {\n        fmtp.push(fmtpLine);\n      }\n    }\n  });\n  if (media) {\n    return {\n      media,\n      rtpMap,\n      fmtp,\n    };\n  }\n};\n\n/**\n * Returns a string of codec IDs with the preferred codec ID in front of the other codec IDs.\n * It is used to ensure that a preferred codec is used when decoding a media stream.\n * Example: Suppose we want to prefer VP8 which has id 96\n * 1. If codec order is 100 101 96 97 35 36 102 125 127\n * 2. The function returns 96 100 101 97 35 36 102 125 127\n */\nconst moveCodecToFront = (codecOrder: string, preferredCodecId: string) => {\n  const codecIds = codecOrder.split(' ');\n  const index = codecIds.indexOf(preferredCodecId);\n  if (index > -1) {\n    codecIds.splice(index, 1);\n    codecIds.unshift(preferredCodecId);\n  }\n  return codecIds.join(' ');\n};\n\n/**\n * Returns a string of codec IDs with the given codec ID removed\n * It is used to ensure that a codec is disabled when processing a media stream.\n * Example: Suppose we want to prefer RED which has id 63\n * 1. If codec order is 111 63 103 104 9 102 0 8 106 105 13 110 112 113 126\n * 2. The function returns 111 103 104 9 102 0 8 106 105 13 110 112 113 126\n */\nconst removeCodecFromOrder = (codecOrder: string, codecIdToRemove: string) => {\n  const codecIds = codecOrder.split(' ');\n  return codecIds.filter((codecID) => codecID !== codecIdToRemove).join(' ');\n};\n\n/**\n * Returns an SDP with the preferred codec in front of the other codecs.\n * Example: Suppose we want to prefer VP8\n * 1. find video media specification m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n * 2. look for specified codec (VP8)  a=rtpmap:96 VP8/90000\n * 3. extract 96 as an identifier of VP8\n * 4. move 96 to the front\n * 5. now media looks like this: m=video 9 UDP/TLS/RTP/SAVPF 96 100 101 97 35 36 102 125 127\n */\nexport const setPreferredCodec = (\n  sdp: string,\n  mediaType: 'video' | 'audio',\n  preferredCodec: string,\n) => {\n  const section = getMediaSection(sdp, mediaType);\n  if (!section) return sdp;\n  const rtpMap = section.rtpMap.find(\n    (r) => r.codec.toLowerCase() === preferredCodec.toLowerCase(),\n  );\n  const codecId = rtpMap?.payload;\n  if (!codecId) return sdp;\n  const newCodecOrder = moveCodecToFront(section.media.codecOrder, codecId);\n  return sdp.replace(\n    section.media.original,\n    `${section.media.mediaWithPorts} ${newCodecOrder}`,\n  );\n};\n\n/**\n * Returns an SDP with the specified codec removed.\n * Example: Suppose we want to remove RED\n *  1. find audio media specification m=video 9 UDP/TLS/RTP/SAVPF 100 101 96 97 35 36 102 125 127\n *  2. look for specified codec (RED)  a=rtpmap:127 red/90000\n *  3. extract 127 as an identifier of RED\n *  4. remove 127 from the codec order\n *  5. remove a=rtpmap:127 red/90000\n *  6. remove a=fmtp:127 ...\n */\nexport const removeCodec = (\n  sdp: string,\n  mediaType: 'video' | 'audio',\n  codecToRemove: string,\n): string => {\n  const section = getMediaSection(sdp, mediaType);\n  const mediaSection = section?.media;\n  if (!mediaSection) {\n    return sdp;\n  }\n  const rtpMap = section?.rtpMap.find(\n    (r) => r.codec.toLowerCase() === codecToRemove.toLowerCase(),\n  );\n  const codecId = rtpMap?.payload;\n  if (!codecId) {\n    return sdp;\n  }\n  const newCodecOrder = removeCodecFromOrder(mediaSection.codecOrder, codecId);\n  const fmtp = section?.fmtp.find((f) => f.payload === codecId);\n  return sdp\n    .replace(\n      mediaSection.original,\n      `${mediaSection.mediaWithPorts} ${newCodecOrder}`,\n    )\n    .replace(new RegExp(`${rtpMap.original}[\\r\\n]+`), '') // remove the corresponding rtpmap line\n    .replace(fmtp?.original ? new RegExp(`${fmtp?.original}[\\r\\n]+`) : '', ''); // remove the corresponding fmtp line\n};\n\n/**\n * Gets the fmtp line corresponding to opus\n */\nconst getOpusFmtp = (sdp: string): Fmtp | undefined => {\n  const section = getMediaSection(sdp, 'audio');\n  const rtpMap = section?.rtpMap.find((r) => r.codec.toLowerCase() === 'opus');\n  const codecId = rtpMap?.payload;\n  if (codecId) {\n    return section?.fmtp.find((f) => f.payload === codecId);\n  }\n};\n\n/**\n * Returns an SDP with DTX enabled or disabled.\n */\nexport const toggleDtx = (sdp: string, enable: boolean): string => {\n  const opusFmtp = getOpusFmtp(sdp);\n  if (opusFmtp) {\n    const matchDtx = /usedtx=(\\d)/.exec(opusFmtp.config);\n    const requiredDtxConfig = `usedtx=${enable ? '1' : '0'}`;\n    if (matchDtx) {\n      const newFmtp = opusFmtp.original.replace(\n        /usedtx=(\\d)/,\n        requiredDtxConfig,\n      );\n      return sdp.replace(opusFmtp.original, newFmtp);\n    } else {\n      const newFmtp = `${opusFmtp.original};${requiredDtxConfig}`;\n      return sdp.replace(opusFmtp.original, newFmtp);\n    }\n  }\n  return sdp;\n};\n\n/**\n * Enables high-quality audio through SDP munging for the given trackMid.\n *\n * @param sdp the SDP to munge.\n * @param trackMid the trackMid.\n * @param maxBitrate the max bitrate to set.\n */\nexport const enableHighQualityAudio = (\n  sdp: string,\n  trackMid: string,\n  maxBitrate: number = 510000,\n): string => {\n  maxBitrate = Math.max(Math.min(maxBitrate, 510000), 96000);\n\n  const parsedSdp = SDP.parse(sdp);\n  const audioMedia = parsedSdp.media.find(\n    (m) => m.type === 'audio' && String(m.mid) === trackMid,\n  );\n\n  if (!audioMedia) return sdp;\n\n  const opusRtp = audioMedia.rtp.find((r) => r.codec === 'opus');\n  if (!opusRtp) return sdp;\n\n  const opusFmtp = audioMedia.fmtp.find((f) => f.payload === opusRtp.payload);\n  if (!opusFmtp) return sdp;\n\n  // enable stereo, if not already enabled\n  if (opusFmtp.config.match(/stereo=(\\d)/)) {\n    opusFmtp.config = opusFmtp.config.replace(/stereo=(\\d)/, 'stereo=1');\n  } else {\n    opusFmtp.config = `${opusFmtp.config};stereo=1`;\n  }\n\n  // set maxaveragebitrate, to the given value\n  if (opusFmtp.config.match(/maxaveragebitrate=(\\d*)/)) {\n    opusFmtp.config = opusFmtp.config.replace(\n      /maxaveragebitrate=(\\d*)/,\n      `maxaveragebitrate=${maxBitrate}`,\n    );\n  } else {\n    opusFmtp.config = `${opusFmtp.config};maxaveragebitrate=${maxBitrate}`;\n  }\n\n  return SDP.write(parsedSdp);\n};\n","import * as SDP from 'sdp-transform';\nimport { StreamSfuClient } from '../StreamSfuClient';\nimport {\n  PeerType,\n  TrackInfo,\n  TrackType,\n  VideoLayer,\n  VideoQuality,\n} from '../gen/video/sfu/models/models';\nimport { getIceCandidate } from './helpers/iceCandidate';\nimport {\n  findOptimalScreenSharingLayers,\n  findOptimalVideoLayers,\n  OptimalVideoLayer,\n} from './videoLayers';\nimport { getPreferredCodecs } from './codecs';\nimport { trackTypeToParticipantStreamKey } from './helpers/tracks';\nimport { CallingState, CallState } from '../store';\nimport { PublishOptions } from '../types';\nimport { isReactNative } from '../helpers/platforms';\nimport { enableHighQualityAudio, toggleDtx } from '../helpers/sdp-munging';\nimport { Logger } from '../coordinator/connection/types';\nimport { getLogger } from '../logger';\nimport { Dispatcher } from './Dispatcher';\nimport { getOSInfo } from '../client-details';\nimport { VideoLayerSetting } from '../gen/video/sfu/event/events';\n\nconst logger: Logger = getLogger(['Publisher']);\n\nexport type PublisherConstructorOpts = {\n  sfuClient: StreamSfuClient;\n  state: CallState;\n  dispatcher: Dispatcher;\n  connectionConfig?: RTCConfiguration;\n  isDtxEnabled: boolean;\n  isRedEnabled: boolean;\n  iceRestartDelay?: number;\n};\n\n/**\n * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU\n * @internal\n */\nexport class Publisher {\n  private pc: RTCPeerConnection;\n  private readonly state: CallState;\n\n  private readonly transceiverRegistry: {\n    [key in TrackType]: RTCRtpTransceiver | undefined;\n  } = {\n    [TrackType.AUDIO]: undefined,\n    [TrackType.VIDEO]: undefined,\n    [TrackType.SCREEN_SHARE]: undefined,\n    [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n    [TrackType.UNSPECIFIED]: undefined,\n  };\n\n  private readonly publishOptionsPerTrackType = new Map<\n    TrackType,\n    PublishOptions\n  >();\n\n  /**\n   * An array maintaining the order how transceivers were added to the peer connection.\n   * This is needed because some browsers (Firefox) don't reliably report\n   * trackId and `mid` parameters.\n   *\n   * @private\n   */\n  private transceiverInitOrder: TrackType[] = [];\n\n  private readonly trackKindMapping: {\n    [key in TrackType]: 'video' | 'audio' | undefined;\n  } = {\n    [TrackType.AUDIO]: 'audio',\n    [TrackType.VIDEO]: 'video',\n    [TrackType.SCREEN_SHARE]: 'video',\n    [TrackType.SCREEN_SHARE_AUDIO]: 'audio',\n    [TrackType.UNSPECIFIED]: undefined,\n  };\n\n  private readonly trackLayersCache: {\n    [key in TrackType]: OptimalVideoLayer[] | undefined;\n  } = {\n    [TrackType.AUDIO]: undefined,\n    [TrackType.VIDEO]: undefined,\n    [TrackType.SCREEN_SHARE]: undefined,\n    [TrackType.SCREEN_SHARE_AUDIO]: undefined,\n    [TrackType.UNSPECIFIED]: undefined,\n  };\n\n  private readonly isDtxEnabled: boolean;\n  private readonly isRedEnabled: boolean;\n\n  private readonly unsubscribeOnIceRestart: () => void;\n\n  private readonly iceRestartDelay: number;\n  private isIceRestarting = false;\n  private iceRestartTimeout?: NodeJS.Timeout;\n\n  // workaround for the lack of RTCPeerConnection.getConfiguration() method in react-native-webrtc\n  private _connectionConfiguration: RTCConfiguration | undefined;\n\n  /**\n   * Returns the current connection configuration.\n   *\n   * @internal\n   */\n  get connectionConfiguration() {\n    if (this.pc.getConfiguration) return this.pc.getConfiguration();\n    return this._connectionConfiguration;\n  }\n\n  /**\n   * The SFU client instance to use for publishing and signaling.\n   */\n  sfuClient: StreamSfuClient;\n\n  /**\n   * Constructs a new `Publisher` instance.\n   *\n   * @param connectionConfig the connection configuration to use.\n   * @param sfuClient the SFU client to use.\n   * @param state the call state to use.\n   * @param dispatcher the dispatcher to use.\n   * @param isDtxEnabled whether DTX is enabled.\n   * @param isRedEnabled whether RED is enabled.\n   * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.\n   */\n  constructor({\n    connectionConfig,\n    sfuClient,\n    dispatcher,\n    state,\n    isDtxEnabled,\n    isRedEnabled,\n    iceRestartDelay = 2500,\n  }: PublisherConstructorOpts) {\n    this.pc = this.createPeerConnection(connectionConfig);\n    this.sfuClient = sfuClient;\n    this.state = state;\n    this.isDtxEnabled = isDtxEnabled;\n    this.isRedEnabled = isRedEnabled;\n    this.iceRestartDelay = iceRestartDelay;\n\n    this.unsubscribeOnIceRestart = dispatcher.on('iceRestart', (iceRestart) => {\n      if (iceRestart.peerType !== PeerType.PUBLISHER_UNSPECIFIED) return;\n      this.restartIce().catch((err) => {\n        logger('warn', `ICERestart failed`, err);\n      });\n    });\n  }\n\n  private createPeerConnection = (connectionConfig?: RTCConfiguration) => {\n    const pc = new RTCPeerConnection(connectionConfig);\n    this._connectionConfiguration = connectionConfig;\n    pc.addEventListener('icecandidate', this.onIceCandidate);\n    pc.addEventListener('negotiationneeded', this.onNegotiationNeeded);\n\n    pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n    pc.addEventListener(\n      'iceconnectionstatechange',\n      this.onIceConnectionStateChange,\n    );\n    pc.addEventListener(\n      'icegatheringstatechange',\n      this.onIceGatheringStateChange,\n    );\n    pc.addEventListener('signalingstatechange', this.onSignalingStateChange);\n    return pc;\n  };\n\n  /**\n   * Closes the publisher PeerConnection and cleans up the resources.\n   */\n  close = ({ stopTracks = true } = {}) => {\n    if (stopTracks) {\n      this.stopPublishing();\n      Object.keys(this.transceiverRegistry).forEach((trackType) => {\n        // @ts-ignore\n        this.transceiverRegistry[trackType] = undefined;\n      });\n      Object.keys(this.trackLayersCache).forEach((trackType) => {\n        // @ts-ignore\n        this.trackLayersCache[trackType] = undefined;\n      });\n    }\n\n    clearTimeout(this.iceRestartTimeout);\n    this.unsubscribeOnIceRestart();\n    this.pc.removeEventListener('negotiationneeded', this.onNegotiationNeeded);\n    this.pc.close();\n  };\n\n  /**\n   * Starts publishing the given track of the given media stream.\n   *\n   * Consecutive calls to this method will replace the stream.\n   * The previous stream will be stopped.\n   *\n   * @param mediaStream the media stream to publish.\n   * @param track the track to publish.\n   * @param trackType the track type to publish.\n   * @param opts the optional publish options to use.\n   */\n  publishStream = async (\n    mediaStream: MediaStream,\n    track: MediaStreamTrack,\n    trackType: TrackType,\n    opts: PublishOptions = {},\n  ) => {\n    if (track.readyState === 'ended') {\n      throw new Error(`Can't publish a track that has ended already.`);\n    }\n\n    let transceiver = this.pc\n      .getTransceivers()\n      .find(\n        (t) =>\n          t === this.transceiverRegistry[trackType] &&\n          t.sender.track &&\n          t.sender.track?.kind === this.trackKindMapping[trackType],\n      );\n\n    /**\n     * An event handler which listens for the 'ended' event on the track.\n     * Once the track has ended, it will notify the SFU and update the state.\n     */\n    const handleTrackEnded = async () => {\n      logger(\n        'info',\n        `Track ${TrackType[trackType]} has ended, notifying the SFU`,\n      );\n      await this.notifyTrackMuteStateChanged(mediaStream, trackType, true);\n      // clean-up, this event listener needs to run only once.\n      track.removeEventListener('ended', handleTrackEnded);\n    };\n\n    if (!transceiver) {\n      const { settings } = this.state;\n      const targetResolution = settings?.video.target_resolution;\n      const screenShareBitrate =\n        settings?.screensharing.target_resolution?.bitrate;\n\n      const videoEncodings =\n        trackType === TrackType.VIDEO\n          ? findOptimalVideoLayers(track, targetResolution)\n          : trackType === TrackType.SCREEN_SHARE\n          ? findOptimalScreenSharingLayers(\n              track,\n              opts.screenShareSettings,\n              screenShareBitrate,\n            )\n          : undefined;\n\n      let preferredCodec = opts.preferredCodec;\n      if (!preferredCodec && trackType === TrackType.VIDEO) {\n        if (isReactNative()) {\n          const osName = getOSInfo()?.name.toLowerCase();\n          if (osName === 'ipados') {\n            // in ipads it was noticed that if vp8 codec is used\n            // then the bytes sent is 0 in the outbound-rtp\n            // so we are forcing h264 codec for ipads\n            preferredCodec = 'H264';\n          } else if (osName === 'android') {\n            preferredCodec = 'VP8';\n          }\n        }\n      }\n      const codecPreferences = this.getCodecPreferences(\n        trackType,\n        preferredCodec,\n      );\n\n      // listen for 'ended' event on the track as it might be ended abruptly\n      // by an external factor as permission revokes, device disconnected, etc.\n      // keep in mind that `track.stop()` doesn't trigger this event.\n      track.addEventListener('ended', handleTrackEnded);\n      if (!track.enabled) {\n        track.enabled = true;\n      }\n\n      transceiver = this.pc.addTransceiver(track, {\n        direction: 'sendonly',\n        streams:\n          trackType === TrackType.VIDEO || trackType === TrackType.SCREEN_SHARE\n            ? [mediaStream]\n            : undefined,\n        sendEncodings: videoEncodings,\n      });\n\n      logger('debug', `Added ${TrackType[trackType]} transceiver`);\n      this.transceiverInitOrder.push(trackType);\n      this.transceiverRegistry[trackType] = transceiver;\n      this.publishOptionsPerTrackType.set(trackType, opts);\n\n      if ('setCodecPreferences' in transceiver && codecPreferences) {\n        logger(\n          'info',\n          `Setting ${TrackType[trackType]} codec preferences`,\n          codecPreferences,\n        );\n        try {\n          transceiver.setCodecPreferences(codecPreferences);\n        } catch (err) {\n          logger('warn', `Couldn't set codec preferences`, err);\n        }\n      }\n    } else {\n      const previousTrack = transceiver.sender.track;\n      // don't stop the track if we are re-publishing the same track\n      if (previousTrack && previousTrack !== track) {\n        previousTrack.stop();\n        previousTrack.removeEventListener('ended', handleTrackEnded);\n        track.addEventListener('ended', handleTrackEnded);\n      }\n      if (!track.enabled) {\n        track.enabled = true;\n      }\n      await transceiver.sender.replaceTrack(track);\n    }\n\n    await this.notifyTrackMuteStateChanged(mediaStream, trackType, false);\n  };\n\n  /**\n   * Stops publishing the given track type to the SFU, if it is currently being published.\n   * Underlying track will be stopped and removed from the publisher.\n   * @param trackType the track type to unpublish.\n   * @param stopTrack specifies whether track should be stopped or just disabled\n   */\n  unpublishStream = async (trackType: TrackType, stopTrack: boolean) => {\n    const transceiver = this.pc\n      .getTransceivers()\n      .find((t) => t === this.transceiverRegistry[trackType] && t.sender.track);\n    if (\n      transceiver &&\n      transceiver.sender.track &&\n      (stopTrack\n        ? transceiver.sender.track.readyState === 'live'\n        : transceiver.sender.track.enabled)\n    ) {\n      stopTrack\n        ? transceiver.sender.track.stop()\n        : (transceiver.sender.track.enabled = false);\n      // We don't need to notify SFU if unpublishing in response to remote soft mute\n      if (this.state.localParticipant?.publishedTracks.includes(trackType)) {\n        await this.notifyTrackMuteStateChanged(undefined, trackType, true);\n      }\n    }\n  };\n\n  /**\n   * Returns true if the given track type is currently being published to the SFU.\n   *\n   * @param trackType the track type to check.\n   */\n  isPublishing = (trackType: TrackType): boolean => {\n    const transceiverForTrackType = this.transceiverRegistry[trackType];\n    if (transceiverForTrackType && transceiverForTrackType.sender) {\n      const sender = transceiverForTrackType.sender;\n      return (\n        !!sender.track &&\n        sender.track.readyState === 'live' &&\n        sender.track.enabled\n      );\n    }\n    return false;\n  };\n\n  /**\n   * Returns true if the given track type is currently live\n   *\n   * @param trackType the track type to check.\n   */\n  isLive = (trackType: TrackType): boolean => {\n    const transceiverForTrackType = this.transceiverRegistry[trackType];\n    if (transceiverForTrackType && transceiverForTrackType.sender) {\n      const sender = transceiverForTrackType.sender;\n      return !!sender.track && sender.track.readyState === 'live';\n    }\n    return false;\n  };\n\n  private notifyTrackMuteStateChanged = async (\n    mediaStream: MediaStream | undefined,\n    trackType: TrackType,\n    isMuted: boolean,\n  ) => {\n    await this.sfuClient.updateMuteState(trackType, isMuted);\n\n    const audioOrVideoOrScreenShareStream =\n      trackTypeToParticipantStreamKey(trackType);\n    if (isMuted) {\n      this.state.updateParticipant(this.sfuClient.sessionId, (p) => ({\n        publishedTracks: p.publishedTracks.filter((t) => t !== trackType),\n        [audioOrVideoOrScreenShareStream]: undefined,\n      }));\n    } else {\n      this.state.updateParticipant(this.sfuClient.sessionId, (p) => {\n        return {\n          publishedTracks: p.publishedTracks.includes(trackType)\n            ? p.publishedTracks\n            : [...p.publishedTracks, trackType],\n          [audioOrVideoOrScreenShareStream]: mediaStream,\n        };\n      });\n    }\n  };\n\n  /**\n   * Stops publishing all tracks and stop all tracks.\n   */\n  stopPublishing = () => {\n    logger('debug', 'Stopping publishing all tracks');\n    this.pc.getSenders().forEach((s) => {\n      s.track?.stop();\n      if (this.pc.signalingState !== 'closed') {\n        this.pc.removeTrack(s);\n      }\n    });\n  };\n\n  updateVideoPublishQuality = async (enabledLayers: VideoLayerSetting[]) => {\n    logger(\n      'info',\n      'Update publish quality, requested layers by SFU:',\n      enabledLayers,\n    );\n\n    const videoSender = this.transceiverRegistry[TrackType.VIDEO]?.sender;\n    if (!videoSender) {\n      logger('warn', 'Update publish quality, no video sender found.');\n      return;\n    }\n\n    const params = videoSender.getParameters();\n    if (params.encodings.length === 0) {\n      logger(\n        'warn',\n        'Update publish quality, No suitable video encoding quality found',\n      );\n      return;\n    }\n\n    let changed = false;\n    let enabledRids = enabledLayers\n      .filter((ly) => ly.active)\n      .map((ly) => ly.name);\n    params.encodings.forEach((enc) => {\n      // flip 'active' flag only when necessary\n      const shouldEnable = enabledRids.includes(enc.rid!);\n      if (shouldEnable !== enc.active) {\n        enc.active = shouldEnable;\n        changed = true;\n      }\n      if (shouldEnable) {\n        let layer = enabledLayers.find((vls) => vls.name === enc.rid);\n        if (layer !== undefined) {\n          if (\n            layer.scaleResolutionDownBy >= 1 &&\n            layer.scaleResolutionDownBy !== enc.scaleResolutionDownBy\n          ) {\n            logger(\n              'debug',\n              '[dynascale]: setting scaleResolutionDownBy from server',\n              'layer',\n              layer.name,\n              'scale-resolution-down-by',\n              layer.scaleResolutionDownBy,\n            );\n            enc.scaleResolutionDownBy = layer.scaleResolutionDownBy;\n            changed = true;\n          }\n\n          if (layer.maxBitrate > 0 && layer.maxBitrate !== enc.maxBitrate) {\n            logger(\n              'debug',\n              '[dynascale] setting max-bitrate from the server',\n              'layer',\n              layer.name,\n              'max-bitrate',\n              layer.maxBitrate,\n            );\n            enc.maxBitrate = layer.maxBitrate;\n            changed = true;\n          }\n\n          if (\n            layer.maxFramerate > 0 &&\n            layer.maxFramerate !== enc.maxFramerate\n          ) {\n            logger(\n              'debug',\n              '[dynascale]: setting maxFramerate from server',\n              'layer',\n              layer.name,\n              'max-framerate',\n              layer.maxFramerate,\n            );\n            enc.maxFramerate = layer.maxFramerate;\n            changed = true;\n          }\n        }\n      }\n    });\n\n    const activeLayers = params.encodings.filter((e) => e.active);\n    if (changed) {\n      await videoSender.setParameters(params);\n      logger('info', `Update publish quality, enabled rids: `, activeLayers);\n    } else {\n      logger('info', `Update publish quality, no change: `, activeLayers);\n    }\n  };\n\n  /**\n   * Returns the result of the `RTCPeerConnection.getStats()` method\n   * @param selector\n   * @returns\n   */\n  getStats = (selector?: MediaStreamTrack | null | undefined) => {\n    return this.pc.getStats(selector);\n  };\n\n  private getCodecPreferences = (\n    trackType: TrackType,\n    preferredCodec?: string | null,\n  ) => {\n    if (trackType === TrackType.VIDEO) {\n      return getPreferredCodecs('video', preferredCodec || 'vp8');\n    }\n    if (trackType === TrackType.AUDIO) {\n      const defaultAudioCodec = this.isRedEnabled ? 'red' : 'opus';\n      const codecToRemove = !this.isRedEnabled ? 'red' : undefined;\n      return getPreferredCodecs(\n        'audio',\n        preferredCodec ?? defaultAudioCodec,\n        codecToRemove,\n      );\n    }\n  };\n\n  private onIceCandidate = (e: RTCPeerConnectionIceEvent) => {\n    const { candidate } = e;\n    if (!candidate) {\n      logger('debug', 'null ice candidate');\n      return;\n    }\n    this.sfuClient\n      .iceTrickle({\n        iceCandidate: getIceCandidate(candidate),\n        peerType: PeerType.PUBLISHER_UNSPECIFIED,\n      })\n      .catch((err) => {\n        logger('warn', `ICETrickle failed`, err);\n      });\n  };\n\n  /**\n   * Sets the SFU client to use.\n   *\n   * @param sfuClient the SFU client to use.\n   */\n  setSfuClient = (sfuClient: StreamSfuClient) => {\n    this.sfuClient = sfuClient;\n  };\n\n  /**\n   * Performs a migration of this publisher instance to a new SFU.\n   *\n   * Initiates a new `iceRestart` offer/answer exchange with the new SFU.\n   *\n   * @param sfuClient the new SFU client to migrate to.\n   * @param connectionConfig the new connection configuration to use.\n   */\n  migrateTo = async (\n    sfuClient: StreamSfuClient,\n    connectionConfig?: RTCConfiguration,\n  ) => {\n    this.sfuClient = sfuClient;\n    this.pc.setConfiguration(connectionConfig);\n    this._connectionConfiguration = connectionConfig;\n\n    const shouldRestartIce = this.pc.iceConnectionState === 'connected';\n    if (shouldRestartIce) {\n      // negotiate only if there are tracks to publish\n      await this.negotiate({ iceRestart: true });\n    }\n  };\n\n  /**\n   * Restarts the ICE connection and renegotiates with the SFU.\n   */\n  restartIce = async () => {\n    logger('debug', 'Restarting ICE connection');\n    const signalingState = this.pc.signalingState;\n    if (this.isIceRestarting || signalingState === 'have-local-offer') {\n      logger('debug', 'ICE restart is already in progress');\n      return;\n    }\n    await this.negotiate({ iceRestart: true });\n  };\n\n  private onNegotiationNeeded = () => {\n    this.negotiate().catch((err) => logger('warn', `Negotiation failed.`, err));\n  };\n\n  /**\n   * Initiates a new offer/answer exchange with the currently connected SFU.\n   *\n   * @param options the optional offer options to use.\n   */\n  private negotiate = async (options?: RTCOfferOptions) => {\n    this.isIceRestarting = options?.iceRestart ?? false;\n\n    const offer = await this.pc.createOffer(options);\n    let sdp = this.mungeCodecs(offer.sdp);\n    if (sdp && this.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n      const transceiver =\n        this.transceiverRegistry[TrackType.SCREEN_SHARE_AUDIO];\n      if (transceiver && transceiver.sender.track) {\n        const mid =\n          transceiver.mid ??\n          this.extractMid(\n            sdp,\n            transceiver.sender.track,\n            TrackType.SCREEN_SHARE_AUDIO,\n          );\n        sdp = enableHighQualityAudio(sdp, mid);\n      }\n    }\n\n    // set the munged SDP back to the offer\n    offer.sdp = sdp;\n\n    const trackInfos = this.getCurrentTrackInfos(offer.sdp);\n    if (trackInfos.length === 0) {\n      throw new Error(\n        `Can't initiate negotiation without announcing any tracks`,\n      );\n    }\n\n    await this.pc.setLocalDescription(offer);\n\n    const { response } = await this.sfuClient.setPublisher({\n      sdp: offer.sdp || '',\n      tracks: trackInfos,\n    });\n\n    try {\n      await this.pc.setRemoteDescription({\n        type: 'answer',\n        sdp: response.sdp,\n      });\n    } catch (e) {\n      logger('error', `setRemoteDescription error`, {\n        sdp: response.sdp,\n        error: e,\n      });\n    }\n\n    this.isIceRestarting = false;\n\n    this.sfuClient.iceTrickleBuffer.publisherCandidates.subscribe(\n      async (candidate) => {\n        try {\n          const iceCandidate = JSON.parse(candidate.iceCandidate);\n          await this.pc.addIceCandidate(iceCandidate);\n        } catch (e) {\n          logger('warn', `ICE candidate error`, [e, candidate]);\n        }\n      },\n    );\n  };\n\n  private mungeCodecs = (sdp?: string) => {\n    if (sdp) {\n      sdp = toggleDtx(sdp, this.isDtxEnabled);\n    }\n    return sdp;\n  };\n\n  private extractMid = (\n    sdp: string | undefined,\n    track: MediaStreamTrack,\n    trackType: TrackType,\n  ): string => {\n    if (!sdp) {\n      logger('warn', 'No SDP found. Returning empty mid');\n      return '';\n    }\n\n    logger(\n      'debug',\n      `No 'mid' found for track. Trying to find it from the Offer SDP`,\n    );\n\n    const parsedSdp = SDP.parse(sdp);\n    const media = parsedSdp.media.find((m) => {\n      return (\n        m.type === track.kind &&\n        // if `msid` is not present, we assume that the track is the first one\n        (m.msid?.includes(track.id) ?? true)\n      );\n    });\n    if (typeof media?.mid === 'undefined') {\n      logger(\n        'debug',\n        `No mid found in SDP for track type ${track.kind} and id ${track.id}. Attempting to find a heuristic mid`,\n      );\n\n      const heuristicMid = this.transceiverInitOrder.indexOf(trackType);\n      if (heuristicMid !== -1) {\n        return String(heuristicMid);\n      }\n\n      logger('debug', 'No heuristic mid found. Returning empty mid');\n      return '';\n    }\n    return String(media.mid);\n  };\n\n  getCurrentTrackInfos = (sdp?: string) => {\n    sdp = sdp || this.pc.localDescription?.sdp;\n\n    const { settings } = this.state;\n    const targetResolution = settings?.video.target_resolution;\n    return this.pc\n      .getTransceivers()\n      .filter((t) => t.direction === 'sendonly' && t.sender.track)\n      .map<TrackInfo>((transceiver) => {\n        const trackType: TrackType = Number(\n          Object.keys(this.transceiverRegistry).find(\n            (key) =>\n              this.transceiverRegistry[key as any as TrackType] === transceiver,\n          ),\n        );\n        const track = transceiver.sender.track!;\n        let optimalLayers: OptimalVideoLayer[];\n        if (track.readyState === 'live') {\n          const publishOpts = this.publishOptionsPerTrackType.get(trackType);\n          optimalLayers =\n            trackType === TrackType.VIDEO\n              ? findOptimalVideoLayers(track, targetResolution)\n              : trackType === TrackType.SCREEN_SHARE\n              ? findOptimalScreenSharingLayers(\n                  track,\n                  publishOpts?.screenShareSettings,\n                )\n              : [];\n          this.trackLayersCache[trackType] = optimalLayers;\n        } else {\n          // we report the last known optimal layers for ended tracks\n          optimalLayers = this.trackLayersCache[trackType] || [];\n          logger(\n            'debug',\n            `Track ${TrackType[trackType]} is ended. Announcing last known optimal layers`,\n            optimalLayers,\n          );\n        }\n\n        const layers = optimalLayers.map<VideoLayer>((optimalLayer) => ({\n          rid: optimalLayer.rid || '',\n          bitrate: optimalLayer.maxBitrate || 0,\n          fps: optimalLayer.maxFramerate || 0,\n          quality: this.ridToVideoQuality(optimalLayer.rid || ''),\n          videoDimension: {\n            width: optimalLayer.width,\n            height: optimalLayer.height,\n          },\n        }));\n\n        const isAudioTrack = [\n          TrackType.AUDIO,\n          TrackType.SCREEN_SHARE_AUDIO,\n        ].includes(trackType);\n\n        const trackSettings = track.getSettings();\n        const isStereo = isAudioTrack && trackSettings.channelCount === 2;\n\n        return {\n          trackId: track.id,\n          layers: layers,\n          trackType,\n          mid: transceiver.mid ?? this.extractMid(sdp, track, trackType),\n\n          stereo: isStereo,\n          dtx: isAudioTrack && this.isDtxEnabled,\n          red: isAudioTrack && this.isRedEnabled,\n        };\n      });\n  };\n\n  private onIceCandidateError = (e: Event) => {\n    const errorMessage =\n      e instanceof RTCPeerConnectionIceErrorEvent &&\n      `${e.errorCode}: ${e.errorText}`;\n    const iceState = this.pc.iceConnectionState;\n    const logLevel =\n      iceState === 'connected' || iceState === 'checking' ? 'debug' : 'warn';\n    logger(logLevel, `ICE Candidate error`, errorMessage);\n  };\n\n  private onIceConnectionStateChange = () => {\n    const state = this.pc.iceConnectionState;\n    logger('debug', `ICE Connection state changed to`, state);\n\n    const hasNetworkConnection =\n      this.state.callingState !== CallingState.OFFLINE;\n\n    if (state === 'failed') {\n      logger('warn', `Attempting to restart ICE`);\n      this.restartIce().catch((e) => {\n        logger('error', `ICE restart error`, e);\n      });\n    } else if (state === 'disconnected' && hasNetworkConnection) {\n      // when in `disconnected` state, the browser may recover automatically,\n      // hence, we delay the ICE restart\n      logger('warn', `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n      this.iceRestartTimeout = setTimeout(() => {\n        // check if the state is still `disconnected` or `failed`\n        // as the connection may have recovered (or failed) in the meantime\n        if (\n          this.pc.iceConnectionState === 'disconnected' ||\n          this.pc.iceConnectionState === 'failed'\n        ) {\n          this.restartIce().catch((e) => {\n            logger('error', `ICE restart error`, e);\n          });\n        } else {\n          logger(\n            'debug',\n            `Scheduled ICE restart: connection recovered, canceled.`,\n          );\n        }\n      }, this.iceRestartDelay);\n    }\n  };\n\n  private onIceGatheringStateChange = () => {\n    logger('debug', `ICE Gathering State`, this.pc.iceGatheringState);\n  };\n\n  private onSignalingStateChange = () => {\n    logger('debug', `Signaling state changed`, this.pc.signalingState);\n  };\n\n  private ridToVideoQuality = (rid: string): VideoQuality => {\n    return rid === 'q'\n      ? VideoQuality.LOW_UNSPECIFIED\n      : rid === 'h'\n      ? VideoQuality.MID\n      : VideoQuality.HIGH; // default to HIGH\n  };\n}\n","import { StreamSfuClient } from '../StreamSfuClient';\nimport { getIceCandidate } from './helpers/iceCandidate';\nimport { PeerType } from '../gen/video/sfu/models/models';\nimport { SubscriberOffer } from '../gen/video/sfu/event/events';\nimport { Dispatcher } from './Dispatcher';\nimport { getLogger } from '../logger';\nimport { CallingState, CallState } from '../store';\n\nexport type SubscriberOpts = {\n  sfuClient: StreamSfuClient;\n  dispatcher: Dispatcher;\n  state: CallState;\n  connectionConfig?: RTCConfiguration;\n  iceRestartDelay?: number;\n};\n\nconst logger = getLogger(['Subscriber']);\n\n/**\n * A wrapper around the `RTCPeerConnection` that handles the incoming\n * media streams from the SFU.\n */\nexport class Subscriber {\n  private pc: RTCPeerConnection;\n  private sfuClient: StreamSfuClient;\n  private state: CallState;\n\n  private readonly unregisterOnSubscriberOffer: () => void;\n  private readonly unregisterOnIceRestart: () => void;\n\n  private readonly iceRestartDelay: number;\n  private isIceRestarting = false;\n  private iceRestartTimeout?: NodeJS.Timeout;\n\n  // workaround for the lack of RTCPeerConnection.getConfiguration() method in react-native-webrtc\n  private _connectionConfiguration: RTCConfiguration | undefined;\n\n  /**\n   * Returns the current connection configuration.\n   *\n   * @internal\n   */\n  get connectionConfiguration() {\n    if (this.pc.getConfiguration) return this.pc.getConfiguration();\n    return this._connectionConfiguration;\n  }\n\n  /**\n   * Constructs a new `Subscriber` instance.\n   *\n   * @param sfuClient the SFU client to use.\n   * @param dispatcher the dispatcher to use.\n   * @param state the state of the call.\n   * @param connectionConfig the connection configuration to use.\n   * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.\n   */\n  constructor({\n    sfuClient,\n    dispatcher,\n    state,\n    connectionConfig,\n    iceRestartDelay = 2500,\n  }: SubscriberOpts) {\n    this.sfuClient = sfuClient;\n    this.state = state;\n    this.iceRestartDelay = iceRestartDelay;\n\n    this.pc = this.createPeerConnection(connectionConfig);\n\n    this.unregisterOnSubscriberOffer = dispatcher.on(\n      'subscriberOffer',\n      (subscriberOffer) => {\n        this.negotiate(subscriberOffer).catch((err) => {\n          logger('warn', `Negotiation failed.`, err);\n        });\n      },\n    );\n\n    this.unregisterOnIceRestart = dispatcher.on('iceRestart', (iceRestart) => {\n      if (iceRestart.peerType !== PeerType.SUBSCRIBER) return;\n      this.restartIce().catch((err) => {\n        logger('warn', `ICERestart failed`, err);\n      });\n    });\n  }\n\n  /**\n   * Creates a new `RTCPeerConnection` instance with the given configuration.\n   *\n   * @param connectionConfig the connection configuration to use.\n   */\n  private createPeerConnection = (connectionConfig?: RTCConfiguration) => {\n    const pc = new RTCPeerConnection(connectionConfig);\n    this._connectionConfiguration = connectionConfig;\n    pc.addEventListener('icecandidate', this.onIceCandidate);\n    pc.addEventListener('track', this.handleOnTrack);\n\n    pc.addEventListener('icecandidateerror', this.onIceCandidateError);\n    pc.addEventListener(\n      'iceconnectionstatechange',\n      this.onIceConnectionStateChange,\n    );\n    pc.addEventListener(\n      'icegatheringstatechange',\n      this.onIceGatheringStateChange,\n    );\n\n    return pc;\n  };\n\n  /**\n   * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.\n   */\n  close = () => {\n    clearTimeout(this.iceRestartTimeout);\n    this.unregisterOnSubscriberOffer();\n    this.unregisterOnIceRestart();\n    this.pc.close();\n  };\n\n  /**\n   * Returns the result of the `RTCPeerConnection.getStats()` method\n   * @param selector\n   * @returns\n   */\n  getStats = (selector?: MediaStreamTrack | null | undefined) => {\n    return this.pc.getStats(selector);\n  };\n\n  /**\n   * Sets the SFU client to use.\n   *\n   * @param sfuClient the SFU client to use.\n   */\n  setSfuClient = (sfuClient: StreamSfuClient) => {\n    this.sfuClient = sfuClient;\n  };\n\n  /**\n   * Migrates the subscriber to a new SFU client.\n   *\n   * @param sfuClient the new SFU client to migrate to.\n   * @param connectionConfig the new connection configuration to use.\n   */\n  migrateTo = (\n    sfuClient: StreamSfuClient,\n    connectionConfig?: RTCConfiguration,\n  ) => {\n    this.setSfuClient(sfuClient);\n\n    // when migrating, we want to keep the previous subscriber open\n    // until the new one is connected\n    const previousPC = this.pc;\n\n    // we keep a record of previously available video tracks\n    // so that we can monitor when they become available on the new\n    // subscriber and close the previous one.\n    const trackIdsToMigrate = new Set<string>();\n    previousPC.getReceivers().forEach((r) => {\n      if (r.track.kind === 'video') {\n        trackIdsToMigrate.add(r.track.id);\n      }\n    });\n\n    // set up a new subscriber peer connection, configured to connect\n    // to the new SFU node\n    const pc = this.createPeerConnection(connectionConfig);\n\n    let migrationTimeoutId: NodeJS.Timeout;\n    const cleanupMigration = () => {\n      previousPC.close();\n      clearTimeout(migrationTimeoutId);\n    };\n\n    // When migrating, we want to keep track of the video tracks\n    // that are migrating to the new subscriber.\n    // Once all of them are available, we can close the previous subscriber.\n    const handleTrackMigration = (e: RTCTrackEvent) => {\n      logger(\n        'debug',\n        `[Migration]: Migrated track: ${e.track.id}, ${e.track.kind}`,\n      );\n      trackIdsToMigrate.delete(e.track.id);\n      if (trackIdsToMigrate.size === 0) {\n        logger('debug', `[Migration]: Migration complete`);\n        pc.removeEventListener('track', handleTrackMigration);\n        cleanupMigration();\n      }\n    };\n\n    // When migrating, we want to keep track of the connection state\n    // of the new subscriber.\n    // Once it is connected, we give it a 2-second grace period to receive\n    // all the video tracks that are migrating from the previous subscriber.\n    // After this threshold, we abruptly close the previous subscriber.\n    const handleConnectionStateChange = () => {\n      if (pc.connectionState === 'connected') {\n        migrationTimeoutId = setTimeout(() => {\n          pc.removeEventListener('track', handleTrackMigration);\n          cleanupMigration();\n        }, 2000);\n\n        pc.removeEventListener(\n          'connectionstatechange',\n          handleConnectionStateChange,\n        );\n      }\n    };\n\n    pc.addEventListener('track', handleTrackMigration);\n    pc.addEventListener('connectionstatechange', handleConnectionStateChange);\n\n    // replace the PeerConnection instance\n    this.pc = pc;\n  };\n\n  /**\n   * Restarts the ICE connection and renegotiates with the SFU.\n   */\n  restartIce = async () => {\n    logger('debug', 'Restarting ICE connection');\n    if (this.pc.signalingState === 'have-remote-offer') {\n      logger('debug', 'ICE restart is already in progress');\n      return;\n    }\n    const previousIsIceRestarting = this.isIceRestarting;\n    try {\n      this.isIceRestarting = true;\n      await this.sfuClient.iceRestart({\n        peerType: PeerType.SUBSCRIBER,\n      });\n    } catch (e) {\n      // restore the previous state, as our intent for restarting ICE failed\n      this.isIceRestarting = previousIsIceRestarting;\n      throw e;\n    }\n  };\n\n  private handleOnTrack = (e: RTCTrackEvent) => {\n    const [primaryStream] = e.streams;\n    // example: `e3f6aaf8-b03d-4911-be36-83f47d37a76a:TRACK_TYPE_VIDEO`\n    const [trackId, trackType] = primaryStream.id.split(':');\n    const participantToUpdate = this.state.participants.find(\n      (p) => p.trackLookupPrefix === trackId,\n    );\n    logger(\n      'debug',\n      `[onTrack]: Got remote ${trackType} track for userId: ${participantToUpdate?.userId}`,\n      e.track.id,\n      e.track,\n    );\n    if (!participantToUpdate) {\n      logger(\n        'error',\n        `[onTrack]: Received track for unknown participant: ${trackId}`,\n        e,\n      );\n      return;\n    }\n\n    e.track.addEventListener('mute', () => {\n      logger(\n        'info',\n        `[onTrack]: Track muted: ${participantToUpdate.userId} ${trackType}:${trackId}`,\n      );\n    });\n\n    e.track.addEventListener('unmute', () => {\n      logger(\n        'info',\n        `[onTrack]: Track unmuted: ${participantToUpdate.userId} ${trackType}:${trackId}`,\n      );\n    });\n\n    e.track.addEventListener('ended', () => {\n      logger(\n        'info',\n        `[onTrack]: Track ended: ${participantToUpdate.userId} ${trackType}:${trackId}`,\n      );\n    });\n\n    const streamKindProp = (\n      {\n        TRACK_TYPE_AUDIO: 'audioStream',\n        TRACK_TYPE_VIDEO: 'videoStream',\n        TRACK_TYPE_SCREEN_SHARE: 'screenShareStream',\n        TRACK_TYPE_SCREEN_SHARE_AUDIO: 'screenShareAudioStream',\n      } as const\n    )[trackType];\n\n    if (!streamKindProp) {\n      logger('error', `Unknown track type: ${trackType}`);\n      return;\n    }\n    const previousStream = participantToUpdate[streamKindProp];\n    if (previousStream) {\n      logger(\n        'info',\n        `[onTrack]: Cleaning up previous remote ${e.track.kind} tracks for userId: ${participantToUpdate.userId}`,\n      );\n      previousStream.getTracks().forEach((t) => {\n        t.stop();\n        previousStream.removeTrack(t);\n      });\n    }\n    this.state.updateParticipant(participantToUpdate.sessionId, {\n      [streamKindProp]: primaryStream,\n    });\n  };\n\n  private onIceCandidate = (e: RTCPeerConnectionIceEvent) => {\n    const { candidate } = e;\n    if (!candidate) {\n      logger('debug', 'null ice candidate');\n      return;\n    }\n\n    this.sfuClient\n      .iceTrickle({\n        iceCandidate: getIceCandidate(candidate),\n        peerType: PeerType.SUBSCRIBER,\n      })\n      .catch((err) => {\n        logger('warn', `ICETrickle failed`, err);\n      });\n  };\n\n  private negotiate = async (subscriberOffer: SubscriberOffer) => {\n    logger('info', `Received subscriberOffer`, subscriberOffer);\n\n    await this.pc.setRemoteDescription({\n      type: 'offer',\n      sdp: subscriberOffer.sdp,\n    });\n\n    this.sfuClient.iceTrickleBuffer.subscriberCandidates.subscribe(\n      async (candidate) => {\n        try {\n          const iceCandidate = JSON.parse(candidate.iceCandidate);\n          await this.pc.addIceCandidate(iceCandidate);\n        } catch (e) {\n          logger('warn', `ICE candidate error`, [e, candidate]);\n        }\n      },\n    );\n\n    const answer = await this.pc.createAnswer();\n    await this.pc.setLocalDescription(answer);\n\n    await this.sfuClient.sendAnswer({\n      peerType: PeerType.SUBSCRIBER,\n      sdp: answer.sdp || '',\n    });\n\n    this.isIceRestarting = false;\n  };\n\n  private onIceConnectionStateChange = () => {\n    const state = this.pc.iceConnectionState;\n    logger('debug', `ICE connection state changed`, state);\n\n    // do nothing when ICE is restarting\n    if (this.isIceRestarting) return;\n\n    const hasNetworkConnection =\n      this.state.callingState !== CallingState.OFFLINE;\n\n    if (state === 'failed') {\n      logger('warn', `Attempting to restart ICE`);\n      this.restartIce().catch((e) => {\n        logger('error', `ICE restart failed`, e);\n      });\n    } else if (state === 'disconnected' && hasNetworkConnection) {\n      // when in `disconnected` state, the browser may recover automatically,\n      // hence, we delay the ICE restart\n      logger('warn', `Scheduling ICE restart in ${this.iceRestartDelay} ms.`);\n      this.iceRestartTimeout = setTimeout(() => {\n        // check if the state is still `disconnected` or `failed`\n        // as the connection may have recovered (or failed) in the meantime\n        if (\n          this.pc.iceConnectionState === 'disconnected' ||\n          this.pc.iceConnectionState === 'failed'\n        ) {\n          this.restartIce().catch((e) => {\n            logger('error', `ICE restart failed`, e);\n          });\n        } else {\n          logger(\n            'debug',\n            `Scheduled ICE restart: connection recovered, canceled.`,\n          );\n        }\n      }, 5000);\n    }\n  };\n\n  private onIceGatheringStateChange = () => {\n    logger('debug', `ICE gathering state changed`, this.pc.iceGatheringState);\n  };\n\n  private onIceCandidateError = (e: Event) => {\n    const errorMessage =\n      e instanceof RTCPeerConnectionIceErrorEvent &&\n      `${e.errorCode}: ${e.errorText}`;\n    const iceState = this.pc.iceConnectionState;\n    const logLevel =\n      iceState === 'connected' || iceState === 'checking' ? 'debug' : 'warn';\n    logger(logLevel, `ICE Candidate error`, errorMessage);\n  };\n}\n","import WebSocket from 'isomorphic-ws';\nimport { SfuEvent } from '../gen/video/sfu/event/events';\nimport { getLogger } from '../logger';\nimport { DispatchableMessage, SfuEventKinds } from './Dispatcher';\n\nexport const createWebSocketSignalChannel = (opts: {\n  endpoint: string;\n  onMessage: <K extends SfuEventKinds>(message: DispatchableMessage<K>) => void;\n}) => {\n  const logger = getLogger(['sfu-client']);\n  const { endpoint, onMessage } = opts;\n  const ws = new WebSocket(endpoint);\n  ws.binaryType = 'arraybuffer'; // do we need this?\n\n  ws.addEventListener('error', (e) => {\n    logger('error', 'Signaling WS channel error', e);\n  });\n\n  ws.addEventListener('close', (e) => {\n    logger('info', 'Signaling WS channel is closed', e);\n  });\n\n  ws.addEventListener('open', (e) => {\n    logger('info', 'Signaling WS channel is open', e);\n  });\n\n  ws.addEventListener('message', (e) => {\n    try {\n      const message =\n        e.data instanceof ArrayBuffer\n          ? SfuEvent.fromBinary(new Uint8Array(e.data))\n          : SfuEvent.fromJsonString(e.data.toString());\n\n      onMessage(message as DispatchableMessage<SfuEventKinds>);\n    } catch (err) {\n      logger(\n        'error',\n        'Failed to decode a message. Check whether the Proto models match.',\n        { event: e, error: err },\n      );\n    }\n  });\n  return ws;\n};\n","import { Logger } from './types';\n\nexport const sleep = (m: number): Promise<void> =>\n  new Promise((r) => setTimeout(r, m));\n\nexport function isFunction<T>(value: Function | T): value is Function {\n  return (\n    value &&\n    (Object.prototype.toString.call(value) === '[object Function]' ||\n      'function' === typeof value ||\n      value instanceof Function)\n  );\n}\n\n/**\n * A map of known error codes.\n */\nexport const KnownCodes = {\n  TOKEN_EXPIRED: 40,\n  WS_CLOSED_SUCCESS: 1000,\n  WS_CLOSED_ABRUPTLY: 1006,\n  WS_POLICY_VIOLATION: 1008,\n};\n\n/**\n * retryInterval - A retry interval which increases acc to number of failures\n *\n * @return {number} Duration to wait in milliseconds\n */\nexport function retryInterval(numberOfFailures: number) {\n  // try to reconnect in 0.25-5 seconds (random to spread out the load from failures)\n  const max = Math.min(500 + numberOfFailures * 2000, 5000);\n  const min = Math.min(Math.max(250, (numberOfFailures - 1) * 2000), 5000);\n  return Math.floor(Math.random() * (max - min) + min);\n}\n\nexport function randomId() {\n  return generateUUIDv4();\n}\n\nfunction hex(bytes: Uint8Array): string {\n  let s = '';\n  for (let i = 0; i < bytes.length; i++) {\n    s += bytes[i].toString(16).padStart(2, '0');\n  }\n  return s;\n}\n\n// https://tools.ietf.org/html/rfc4122\nexport function generateUUIDv4() {\n  const bytes = getRandomBytes(16);\n  bytes[6] = (bytes[6] & 0x0f) | 0x40; // version\n  bytes[8] = (bytes[8] & 0xbf) | 0x80; // variant\n\n  return (\n    hex(bytes.subarray(0, 4)) +\n    '-' +\n    hex(bytes.subarray(4, 6)) +\n    '-' +\n    hex(bytes.subarray(6, 8)) +\n    '-' +\n    hex(bytes.subarray(8, 10)) +\n    '-' +\n    hex(bytes.subarray(10, 16))\n  );\n}\n\nfunction getRandomValuesWithMathRandom(bytes: Uint8Array): void {\n  const max = Math.pow(2, (8 * bytes.byteLength) / bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    bytes[i] = Math.random() * max;\n  }\n}\ndeclare const msCrypto: Crypto;\n\nconst getRandomValues = (() => {\n  if (\n    typeof crypto !== 'undefined' &&\n    typeof crypto?.getRandomValues !== 'undefined'\n  ) {\n    return crypto.getRandomValues.bind(crypto);\n  } else if (typeof msCrypto !== 'undefined') {\n    return msCrypto.getRandomValues.bind(msCrypto);\n  } else {\n    return getRandomValuesWithMathRandom;\n  }\n})();\n\nfunction getRandomBytes(length: number): Uint8Array {\n  const bytes = new Uint8Array(length);\n  getRandomValues(bytes);\n  return bytes;\n}\n\nexport function convertErrorToJson(err: Error) {\n  const jsonObj = {} as Record<string, unknown>;\n\n  if (!err) return jsonObj;\n\n  try {\n    Object.getOwnPropertyNames(err).forEach((key) => {\n      jsonObj[key] = Object.getOwnPropertyDescriptor(err, key);\n    });\n  } catch (_) {\n    return {\n      error: 'failed to serialize the error',\n    };\n  }\n\n  return jsonObj;\n}\n\n/**\n * isOnline safely return the navigator.online value for browser env\n * if navigator is not in global object, it always return true\n */\nexport function isOnline(logger: Logger) {\n  const nav =\n    typeof navigator !== 'undefined'\n      ? navigator\n      : typeof window !== 'undefined' && window.navigator\n      ? window.navigator\n      : undefined;\n\n  if (!nav) {\n    logger(\n      'warn',\n      'isOnline failed to access window.navigator and assume browser is online',\n    );\n    return true;\n  }\n\n  // RN navigator has undefined for onLine\n  if (typeof nav.onLine !== 'boolean') {\n    return true;\n  }\n\n  return nav.onLine;\n}\n\n/**\n * listenForConnectionChanges - Adds an event listener fired on browser going online or offline\n */\nexport function addConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.addEventListener) {\n    window.addEventListener('offline', cb);\n    window.addEventListener('online', cb);\n  }\n}\n\nexport function removeConnectionEventListeners(cb: (e: Event) => void) {\n  if (typeof window !== 'undefined' && window.removeEventListener) {\n    window.removeEventListener('offline', cb);\n    window.removeEventListener('online', cb);\n  }\n}\n","import type { WebSocket } from 'ws';\nimport type {\n  FinishedUnaryCall,\n  MethodInfo,\n  NextUnaryFn,\n  RpcInterceptor,\n  RpcOptions,\n  UnaryCall,\n} from '@protobuf-ts/runtime-rpc';\nimport { SignalServerClient } from './gen/video/sfu/signal_rpc/signal.client';\nimport { createSignalClient, withHeaders } from './rpc';\nimport {\n  createWebSocketSignalChannel,\n  Dispatcher,\n  IceTrickleBuffer,\n} from './rtc';\nimport { JoinRequest, SfuRequest } from './gen/video/sfu/event/events';\nimport {\n  ICERestartRequest,\n  SendAnswerRequest,\n  SendStatsRequest,\n  SetPublisherRequest,\n  TrackSubscriptionDetails,\n  UpdateMuteStatesRequest,\n} from './gen/video/sfu/signal_rpc/signal';\nimport {\n  Error as SfuError,\n  ICETrickle,\n  TrackType,\n} from './gen/video/sfu/models/models';\nimport {\n  generateUUIDv4,\n  retryInterval,\n  sleep,\n} from './coordinator/connection/utils';\nimport { SFUResponse } from './gen/coordinator';\nimport { LogLevel, Logger } from './coordinator/connection/types';\nimport { getLogger } from './logger';\n\nexport type StreamSfuClientConstructor = {\n  /**\n   * The event dispatcher instance to use.\n   */\n  dispatcher: Dispatcher;\n\n  /**\n   * The SFU server to connect to.\n   */\n  sfuServer: SFUResponse;\n\n  /**\n   * The JWT token to use for authentication.\n   */\n  token: string;\n\n  /**\n   * An optional `sessionId` to use for the connection.\n   * If not provided, a random UUIDv4 will be generated.\n   */\n  sessionId?: string;\n};\n\n/**\n * The client used for exchanging information with the SFU.\n */\nexport class StreamSfuClient {\n  /**\n   * A buffer for ICE Candidates that are received before\n   * the PeerConnections are ready to handle them.\n   */\n  readonly iceTrickleBuffer = new IceTrickleBuffer();\n  /**\n   * The `sessionId` of the currently connected participant.\n   */\n  readonly sessionId: string;\n\n  /**\n   * The `edgeName` representing the edge the client is connected to.\n   */\n  readonly edgeName: string;\n\n  /**\n   * The current token used for authenticating against the SFU.\n   */\n  readonly token: string;\n\n  /**\n   * The SFU server details the current client is connected to.\n   */\n  readonly sfuServer: SFUResponse;\n\n  /**\n   * Holds the current WebSocket connection to the SFU.\n   */\n  signalWs: WebSocket;\n\n  /**\n   * Promise that resolves when the WebSocket connection is ready (open).\n   */\n  signalReady: Promise<WebSocket>;\n\n  /**\n   * A flag indicating whether the client is currently migrating away\n   * from this SFU.\n   */\n  isMigratingAway = false;\n\n  /**\n   * A flag indicating that the client connection is broken for the current\n   * client and that a fast-reconnect with a new client should be attempted.\n   */\n  isFastReconnecting = false;\n\n  private readonly rpc: SignalServerClient;\n  private keepAliveInterval?: NodeJS.Timeout;\n  private connectionCheckTimeout?: NodeJS.Timeout;\n  private pingIntervalInMs = 10 * 1000;\n  private unhealthyTimeoutInMs = this.pingIntervalInMs + 5 * 1000;\n  private lastMessageTimestamp?: Date;\n  private readonly unsubscribeIceTrickle: () => void;\n  private readonly logger: Logger;\n\n  /**\n   * The normal closure code. Used for controlled shutdowns.\n   */\n  static NORMAL_CLOSURE = 1000;\n  /**\n   * The error code used when the SFU connection is unhealthy.\n   * Usually, this means that no message has been received from the SFU for\n   * a certain amount of time (`connectionCheckTimeout`).\n   */\n  static ERROR_CONNECTION_UNHEALTHY = 4001;\n\n  /**\n   * The error code used when the SFU connection is broken.\n   * Usually, this means that the WS connection has been closed unexpectedly.\n   * This error code is used to announce a fast-reconnect.\n   */\n  static ERROR_CONNECTION_BROKEN = 4002; // used in fast-reconnects\n\n  /**\n   * Constructs a new SFU client.\n   *\n   * @param dispatcher the event dispatcher to use.\n   * @param sfuServer the SFU server to connect to.\n   * @param token the JWT token to use for authentication.\n   * @param sessionId the `sessionId` of the currently connected participant.\n   */\n  constructor({\n    dispatcher,\n    sfuServer,\n    token,\n    sessionId,\n  }: StreamSfuClientConstructor) {\n    this.sessionId = sessionId || generateUUIDv4();\n    this.sfuServer = sfuServer;\n    this.edgeName = sfuServer.edge_name;\n    this.token = token;\n    this.logger = getLogger(['sfu-client']);\n    const logInterceptor: RpcInterceptor = {\n      interceptUnary: (\n        next: NextUnaryFn,\n        method: MethodInfo,\n        input: object,\n        options: RpcOptions,\n      ): UnaryCall => {\n        this.logger('trace', `Calling SFU RPC method ${method.name}`, {\n          input,\n          options,\n        });\n        return next(method, input, options);\n      },\n    };\n    this.rpc = createSignalClient({\n      baseUrl: sfuServer.url,\n      interceptors: [\n        withHeaders({\n          Authorization: `Bearer ${token}`,\n        }),\n        logInterceptor,\n      ],\n    });\n\n    // Special handling for the ICETrickle kind of events.\n    // These events might be triggered by the SFU before the initial RTC\n    // connection is established. In that case, those events (ICE candidates)\n    // need to be buffered and later added to the appropriate PeerConnection\n    // once the remoteDescription is known and set.\n    this.unsubscribeIceTrickle = dispatcher.on('iceTrickle', (iceTrickle) => {\n      this.iceTrickleBuffer.push(iceTrickle);\n    });\n\n    this.signalWs = createWebSocketSignalChannel({\n      endpoint: sfuServer.ws_endpoint,\n      onMessage: (message) => {\n        this.lastMessageTimestamp = new Date();\n        this.scheduleConnectionCheck();\n        dispatcher.dispatch(message);\n      },\n    });\n\n    this.signalReady = new Promise((resolve) => {\n      const onOpen = () => {\n        this.signalWs.removeEventListener('open', onOpen);\n        this.keepAlive();\n        resolve(this.signalWs);\n      };\n      this.signalWs.addEventListener('open', onOpen);\n    });\n  }\n\n  close = (code: number, reason: string) => {\n    this.logger('debug', `Closing SFU WS connection: ${code} - ${reason}`);\n    if (this.signalWs.readyState !== this.signalWs.CLOSED) {\n      this.signalWs.close(code, `js-client: ${reason}`);\n    }\n\n    this.unsubscribeIceTrickle();\n    clearInterval(this.keepAliveInterval);\n    clearTimeout(this.connectionCheckTimeout);\n  };\n\n  updateSubscriptions = async (subscriptions: TrackSubscriptionDetails[]) => {\n    return retryable(\n      () =>\n        this.rpc.updateSubscriptions({\n          sessionId: this.sessionId,\n          tracks: subscriptions,\n        }),\n      this.logger,\n      'debug',\n    );\n  };\n\n  setPublisher = async (data: Omit<SetPublisherRequest, 'sessionId'>) => {\n    return retryable(\n      () =>\n        this.rpc.setPublisher({\n          ...data,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  sendAnswer = async (data: Omit<SendAnswerRequest, 'sessionId'>) => {\n    return retryable(\n      () =>\n        this.rpc.sendAnswer({\n          ...data,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  iceTrickle = async (data: Omit<ICETrickle, 'sessionId'>) => {\n    return retryable(\n      () =>\n        this.rpc.iceTrickle({\n          ...data,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  iceRestart = async (data: Omit<ICERestartRequest, 'sessionId'>) => {\n    return retryable(\n      () =>\n        this.rpc.iceRestart({\n          ...data,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  updateMuteState = async (trackType: TrackType, muted: boolean) => {\n    return this.updateMuteStates({\n      muteStates: [\n        {\n          trackType,\n          muted,\n        },\n      ],\n    });\n  };\n\n  updateMuteStates = async (\n    data: Omit<UpdateMuteStatesRequest, 'sessionId'>,\n  ) => {\n    return retryable(\n      () =>\n        this.rpc.updateMuteStates({\n          ...data,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  sendStats = async (stats: Omit<SendStatsRequest, 'sessionId'>) => {\n    return retryable(\n      () =>\n        this.rpc.sendStats({\n          ...stats,\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n      'debug',\n    );\n  };\n\n  startNoiseCancellation = async () => {\n    return retryable(\n      () =>\n        this.rpc.startNoiseCancellation({\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  stopNoiseCancellation = async () => {\n    return retryable(\n      () =>\n        this.rpc.stopNoiseCancellation({\n          sessionId: this.sessionId,\n        }),\n      this.logger,\n    );\n  };\n\n  join = async (data: Omit<JoinRequest, 'sessionId' | 'token'>) => {\n    const joinRequest = JoinRequest.create({\n      ...data,\n      sessionId: this.sessionId,\n      token: this.token,\n    });\n    return this.send(\n      SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'joinRequest',\n          joinRequest,\n        },\n      }),\n    );\n  };\n\n  send = async (message: SfuRequest) => {\n    return this.signalReady.then((signal) => {\n      if (signal.readyState !== signal.OPEN) return;\n      this.logger(\n        'debug',\n        `Sending message to: ${this.edgeName}`,\n        SfuRequest.toJson(message),\n      );\n      signal.send(SfuRequest.toBinary(message));\n    });\n  };\n\n  private keepAlive = () => {\n    clearInterval(this.keepAliveInterval);\n    this.keepAliveInterval = setInterval(() => {\n      this.logger('trace', 'Sending healthCheckRequest to SFU');\n      const message = SfuRequest.create({\n        requestPayload: {\n          oneofKind: 'healthCheckRequest',\n          healthCheckRequest: {},\n        },\n      });\n      this.send(message).catch((e) => {\n        this.logger('error', 'Error sending healthCheckRequest to SFU', e);\n      });\n    }, this.pingIntervalInMs);\n  };\n\n  private scheduleConnectionCheck = () => {\n    clearTimeout(this.connectionCheckTimeout);\n    this.connectionCheckTimeout = setTimeout(() => {\n      if (this.lastMessageTimestamp) {\n        const timeSinceLastMessage =\n          new Date().getTime() - this.lastMessageTimestamp.getTime();\n\n        if (timeSinceLastMessage > this.unhealthyTimeoutInMs) {\n          this.close(\n            StreamSfuClient.ERROR_CONNECTION_UNHEALTHY,\n            `SFU connection unhealthy. Didn't receive any message for ${this.unhealthyTimeoutInMs}ms`,\n          );\n        }\n      }\n    }, this.unhealthyTimeoutInMs);\n  };\n}\n\n/**\n * An internal interface which asserts that \"retryable\" SFU responses\n * contain a field called \"error\".\n * Ideally, this should be coming from the Protobuf definitions.\n */\ninterface SfuResponseWithError {\n  /**\n   * An optional error field which should be present in all SFU responses.\n   */\n  error?: SfuError;\n}\n\nconst MAX_RETRIES = 5;\n\n/**\n * Creates a closure which wraps the given RPC call and retries invoking\n * the RPC until it succeeds or the maximum number of retries is reached.\n *\n * Between each retry, there would be a random delay in order to avoid\n * request bursts towards the SFU.\n *\n * @param rpc the closure around the RPC call to execute.\n * @param logger a logger instance to use.\n * @param <I> the type of the request object.\n * @param <O> the type of the response object.\n */\nconst retryable = async <I extends object, O extends SfuResponseWithError>(\n  rpc: () => UnaryCall<I, O>,\n  logger: Logger,\n  level: LogLevel = 'error',\n) => {\n  let retryAttempt = 0;\n  let rpcCallResult: FinishedUnaryCall<I, O>;\n  do {\n    // don't delay the first invocation\n    if (retryAttempt > 0) {\n      await sleep(retryInterval(retryAttempt));\n    }\n\n    rpcCallResult = await rpc();\n\n    // if the RPC call failed, log the error and retry\n    if (rpcCallResult.response.error) {\n      logger(\n        level,\n        `SFU RPC Error (${rpcCallResult.method.name}):`,\n        rpcCallResult.response.error,\n      );\n    }\n    retryAttempt++;\n  } while (\n    rpcCallResult.response.error?.shouldRetry &&\n    retryAttempt < MAX_RETRIES\n  );\n\n  if (rpcCallResult.response.error) {\n    throw rpcCallResult.response.error;\n  }\n\n  return rpcCallResult;\n};\n","import { CallingState } from '../store';\nimport { Call } from '../Call';\nimport type { CallAcceptedEvent, CallRejectedEvent } from '../gen/coordinator';\n\n/**\n * Event handler that watched the delivery of `call.accepted`.\n * Once the event is received, the call is joined.\n */\nexport const watchCallAccepted = (call: Call) => {\n  return async function onCallAccepted(event: CallAcceptedEvent) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const { state } = call;\n    if (\n      event.call.created_by.id === call.currentUserId &&\n      state.callingState === CallingState.RINGING\n    ) {\n      await call.join();\n    }\n  };\n};\n\n/**\n * Event handler that watches delivery of `call.rejected` Websocket event.\n * Once the event is received, the call is left.\n */\nexport const watchCallRejected = (call: Call) => {\n  return async function onCallRejected(event: CallRejectedEvent) {\n    // We want to discard the event if it's from the current user\n    if (event.user.id === call.currentUserId) return;\n    const { call: eventCall } = event;\n    const { session: callSession } = eventCall;\n\n    if (!callSession) {\n      call.logger(\n        'warn',\n        'No call session provided. Ignoring call.rejected event.',\n        event,\n      );\n      return;\n    }\n\n    const rejectedBy = callSession.rejected_by;\n    const { members, callingState } = call.state;\n    if (callingState !== CallingState.RINGING) {\n      call.logger(\n        'info',\n        'Call is not in ringing mode (it is either accepted or rejected already). Ignoring call.rejected event.',\n        event,\n      );\n      return;\n    }\n    if (call.isCreatedByMe) {\n      const everyoneElseRejected = members\n        .filter((m) => m.user_id !== call.currentUserId)\n        .every((m) => rejectedBy[m.user_id]);\n      if (everyoneElseRejected) {\n        call.logger('info', 'everyone rejected, leaving the call');\n        await call.leave({ reason: 'ring: everyone rejected' });\n      }\n    } else {\n      if (rejectedBy[eventCall.created_by.id]) {\n        call.logger('info', 'call creator rejected, leaving call');\n        await call.leave({ reason: 'ring: creator rejected' });\n      }\n    }\n  };\n};\n\n/**\n * Event handler that watches the delivery of `call.ended` Websocket event.\n */\nexport const watchCallEnded = (call: Call) => {\n  return async function onCallEnded() {\n    const { callingState } = call.state;\n    if (\n      callingState === CallingState.RINGING ||\n      callingState === CallingState.JOINED ||\n      callingState === CallingState.JOINING\n    ) {\n      await call.leave({ reason: 'call.ended event received' });\n    }\n  };\n};\n","import { CallState } from '../store';\nimport type { CallGrantsUpdated } from '../gen/video/sfu/event/events';\nimport { OwnCapability } from '../gen/coordinator';\n\n/**\n * Event handler that watches for `callGrantsUpdated` events.\n *\n * @param state the call state to update.\n */\nexport const watchCallGrantsUpdated = (state: CallState) => {\n  return function onCallGrantsUpdated(event: CallGrantsUpdated) {\n    const { currentGrants } = event;\n    if (currentGrants) {\n      const { canPublishAudio, canPublishVideo, canScreenshare } =\n        currentGrants;\n\n      const update: Partial<Record<OwnCapability, boolean>> = {\n        [OwnCapability.SEND_AUDIO]: canPublishAudio,\n        [OwnCapability.SEND_VIDEO]: canPublishVideo,\n        [OwnCapability.SCREENSHARE]: canScreenshare,\n      };\n\n      const nextCapabilities = state.ownCapabilities.filter(\n        (capability) => update[capability] !== false,\n      );\n      Object.entries(update).forEach(([capability, value]) => {\n        if (value && !nextCapabilities.includes(capability as OwnCapability)) {\n          nextCapabilities.push(capability as OwnCapability);\n        }\n      });\n\n      state.setOwnCapabilities(nextCapabilities);\n    }\n  };\n};\n","import { Dispatcher } from '../rtc';\nimport { Call } from '../Call';\nimport { CallState } from '../store';\nimport { StreamVideoParticipantPatches } from '../types';\nimport { getLogger } from '../logger';\nimport type { PinsChanged } from '../gen/video/sfu/event/events';\nimport { ErrorCode } from '../gen/video/sfu/models/models';\nimport { OwnCapability } from '../gen/coordinator';\n\nconst logger = getLogger(['events']);\n\n/**\n * An event responder which handles the `changePublishQuality` event.\n */\nexport const watchChangePublishQuality = (\n  dispatcher: Dispatcher,\n  call: Call,\n) => {\n  return dispatcher.on('changePublishQuality', (e) => {\n    const { videoSenders } = e;\n    videoSenders.forEach((videoSender) => {\n      const { layers } = videoSender;\n      call.updatePublishQuality(layers.filter((l) => l.active));\n    });\n  });\n};\n\nexport const watchConnectionQualityChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('connectionQualityChanged', (e) => {\n    const { connectionQualityUpdates } = e;\n    if (!connectionQualityUpdates) return;\n    state.updateParticipants(\n      connectionQualityUpdates.reduce<StreamVideoParticipantPatches>(\n        (patches, update) => {\n          const { sessionId, connectionQuality } = update;\n          patches[sessionId] = {\n            connectionQuality,\n          };\n          return patches;\n        },\n        {},\n      ),\n    );\n  });\n};\n\n/**\n * Updates the approximate number of participants in the call by peeking at the\n * health check events that our SFU sends.\n */\nexport const watchParticipantCountChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('healthCheckResponse', (e) => {\n    const { participantCount } = e;\n    if (participantCount) {\n      state.setParticipantCount(participantCount.total);\n      state.setAnonymousParticipantCount(participantCount.anonymous);\n    }\n  });\n};\n\nexport const watchLiveEnded = (dispatcher: Dispatcher, call: Call) => {\n  return dispatcher.on('error', (e) => {\n    if (e.error && e.error.code !== ErrorCode.LIVE_ENDED) return;\n\n    if (!call.permissionsContext.hasPermission(OwnCapability.JOIN_BACKSTAGE)) {\n      call.leave({ reason: 'live ended' }).catch((err) => {\n        logger('error', 'Failed to leave call after live ended', err);\n      });\n    }\n  });\n};\n\n/**\n * Watches and logs the errors reported by the currently connected SFU.\n */\nexport const watchSfuErrorReports = (dispatcher: Dispatcher) => {\n  return dispatcher.on('error', (e) => {\n    if (!e.error) return;\n    const { error } = e;\n    logger('error', 'SFU reported error', {\n      code: ErrorCode[error.code],\n      message: error.message,\n      shouldRetry: error.shouldRetry,\n    });\n  });\n};\n\n/**\n * Watches for `pinsUpdated` events and updates the pinned state of participants\n * in the call.\n */\nexport const watchPinsUpdated = (state: CallState) => {\n  return function onPinsUpdated(e: PinsChanged) {\n    const { pins } = e;\n    state.setServerSidePins(pins);\n  };\n};\n","import { Call } from '../Call';\nimport {\n  TrackType,\n  TrackUnpublishReason,\n} from '../gen/video/sfu/models/models';\n\n/**\n * An event handler that handles soft mutes.\n *\n * @param call the call.\n */\nexport const handleRemoteSoftMute = (call: Call) => {\n  return call.on('trackUnpublished', async (event) => {\n    const { cause, type, sessionId } = event;\n    const { localParticipant } = call.state;\n    if (\n      cause === TrackUnpublishReason.MODERATION &&\n      sessionId === localParticipant?.sessionId\n    ) {\n      const logger = call.logger;\n      logger(\n        'info',\n        `Local participant's ${TrackType[type]} track is muted remotely`,\n      );\n      try {\n        if (type === TrackType.VIDEO) {\n          await call.camera.disable();\n        } else if (type === TrackType.AUDIO) {\n          await call.microphone.disable();\n        } else {\n          logger(\n            'warn',\n            'Unsupported track type to soft mute',\n            TrackType[type],\n          );\n        }\n        if (call.publisher?.isPublishing(type)) {\n          await call.stopPublish(type);\n        }\n      } catch (error) {\n        logger('error', 'Failed to stop publishing', error);\n      }\n    }\n  });\n};\n","import type {\n  ParticipantJoined,\n  ParticipantLeft,\n  ParticipantUpdated,\n  TrackPublished,\n  TrackUnpublished,\n} from '../gen/video/sfu/event/events';\nimport { StreamVideoParticipant, VisibilityState } from '../types';\nimport { CallState } from '../store';\n\n/**\n * An event responder which handles the `participantJoined` event.\n */\nexport const watchParticipantJoined = (state: CallState) => {\n  return function onParticipantJoined(e: ParticipantJoined) {\n    const { participant } = e;\n    if (!participant) return;\n    // `state.updateOrAddParticipant` acts as a safeguard against\n    // potential duplicate events from the SFU.\n    //\n    // Although the SFU should not send duplicate events, we have seen\n    // some race conditions in the past during the `join-flow` where\n    // the SFU would send participant info as part of the `join`\n    // response and then follow up with a `participantJoined` event for\n    // already announced participants.\n    state.updateOrAddParticipant(\n      participant.sessionId,\n      Object.assign<StreamVideoParticipant, Partial<StreamVideoParticipant>>(\n        participant,\n        {\n          viewportVisibilityState: {\n            videoTrack: VisibilityState.UNKNOWN,\n            screenShareTrack: VisibilityState.UNKNOWN,\n          },\n        },\n      ),\n    );\n  };\n};\n\n/**\n * An event responder which handles the `participantLeft` event.\n */\nexport const watchParticipantLeft = (state: CallState) => {\n  return function onParticipantLeft(e: ParticipantLeft) {\n    const { participant } = e;\n    if (!participant) return;\n\n    state.setParticipants((participants) =>\n      participants.filter((p) => p.sessionId !== participant.sessionId),\n    );\n  };\n};\n\n/**\n * An event responder which handles the `participantUpdated` event.\n */\nexport const watchParticipantUpdated = (state: CallState) => {\n  return function onParticipantUpdated(e: ParticipantUpdated) {\n    const { participant } = e;\n    if (!participant) return;\n    state.updateParticipant(participant.sessionId, participant);\n  };\n};\n\n/**\n * An event responder which handles the `trackPublished` event.\n * The SFU will send this event when a participant publishes a track.\n */\nexport const watchTrackPublished = (state: CallState) => {\n  return function onTrackPublished(e: TrackPublished) {\n    const { type, sessionId, participant } = e;\n    // An optimization for large calls.\n    // After a certain threshold, the SFU would stop emitting `participantJoined`\n    // events, and instead, it would only provide the participant's information\n    // once they start publishing a track.\n    if (participant) {\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, (p) => ({\n        publishedTracks: [...p.publishedTracks, type].filter(unique),\n      }));\n    }\n  };\n};\n\n/**\n * An event responder which handles the `trackUnpublished` event.\n * The SFU will send this event when a participant unpublishes a track.\n */\nexport const watchTrackUnpublished = (state: CallState) => {\n  return function onTrackUnpublished(e: TrackUnpublished) {\n    const { type, sessionId, participant } = e;\n    // An optimization for large calls. See `watchTrackPublished`.\n    if (participant) {\n      state.updateOrAddParticipant(sessionId, participant);\n    } else {\n      state.updateParticipant(sessionId, (p) => ({\n        publishedTracks: p.publishedTracks.filter((t) => t !== type),\n      }));\n    }\n  };\n};\n\nconst unique = <T>(v: T, i: number, arr: T[]) => arr.indexOf(v) === i;\n","import { Dispatcher } from '../rtc';\nimport { CallState } from '../store';\nimport { StreamVideoParticipantPatches } from '../types';\n\n/**\n * Watches for `dominantSpeakerChanged` events.\n */\nexport const watchDominantSpeakerChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('dominantSpeakerChanged', (e) => {\n    const { sessionId } = e;\n    if (sessionId === state.dominantSpeaker?.sessionId) return;\n    state.setParticipants((participants) =>\n      participants.map((participant) => {\n        // mark the new dominant speaker\n        if (participant.sessionId === sessionId) {\n          return {\n            ...participant,\n            isDominantSpeaker: true,\n          };\n        }\n        // unmark the old dominant speaker\n        if (participant.isDominantSpeaker) {\n          return {\n            ...participant,\n            isDominantSpeaker: false,\n          };\n        }\n        return participant; // no change\n      }),\n    );\n  });\n};\n\n/**\n * Watches for `audioLevelChanged` events.\n */\nexport const watchAudioLevelChanged = (\n  dispatcher: Dispatcher,\n  state: CallState,\n) => {\n  return dispatcher.on('audioLevelChanged', (e) => {\n    const { audioLevels } = e;\n    state.updateParticipants(\n      audioLevels.reduce<StreamVideoParticipantPatches>((patches, current) => {\n        patches[current.sessionId] = {\n          audioLevel: current.level,\n          isSpeaking: current.isSpeaking,\n        };\n        return patches;\n      }, {}),\n    );\n  });\n};\n","import { Call } from '../Call';\nimport { Dispatcher } from '../rtc';\nimport { CallState } from '../store';\nimport {\n  handleRemoteSoftMute,\n  watchAudioLevelChanged,\n  watchCallAccepted,\n  watchCallEnded,\n  watchCallGrantsUpdated,\n  watchCallRejected,\n  watchChangePublishQuality,\n  watchConnectionQualityChanged,\n  watchDominantSpeakerChanged,\n  watchLiveEnded,\n  watchParticipantCountChanged,\n  watchParticipantJoined,\n  watchParticipantLeft,\n  watchParticipantUpdated,\n  watchPinsUpdated,\n  watchSfuErrorReports,\n  watchTrackPublished,\n  watchTrackUnpublished,\n} from '../events';\nimport {\n  AllCallEvents,\n  AllClientCallEvents,\n  CallEventListener,\n} from '../coordinator/connection/types';\n\ntype RingCallEvents = Extract<\n  AllClientCallEvents,\n  'call.accepted' | 'call.rejected'\n>;\n\n/**\n * Registers the default event handlers for a call during its lifecycle.\n *\n * @param call the call to register event handlers for.\n * @param state the call state.\n * @param dispatcher the dispatcher.\n */\nexport const registerEventHandlers = (\n  call: Call,\n  state: CallState,\n  dispatcher: Dispatcher,\n) => {\n  const eventHandlers = [\n    call.on('call.ended', watchCallEnded(call)),\n\n    watchLiveEnded(dispatcher, call),\n    watchSfuErrorReports(dispatcher),\n    watchChangePublishQuality(dispatcher, call),\n    watchConnectionQualityChanged(dispatcher, state),\n    watchParticipantCountChanged(dispatcher, state),\n\n    call.on('participantJoined', watchParticipantJoined(state)),\n    call.on('participantLeft', watchParticipantLeft(state)),\n    call.on('participantUpdated', watchParticipantUpdated(state)),\n\n    call.on('trackPublished', watchTrackPublished(state)),\n    call.on('trackUnpublished', watchTrackUnpublished(state)),\n\n    watchAudioLevelChanged(dispatcher, state),\n    watchDominantSpeakerChanged(dispatcher, state),\n\n    call.on('callGrantsUpdated', watchCallGrantsUpdated(state)),\n    call.on('pinsUpdated', watchPinsUpdated(state)),\n\n    handleRemoteSoftMute(call),\n  ];\n\n  if (call.ringing) {\n    // these events are only relevant when the call is ringing\n    eventHandlers.push(registerRingingCallEventHandlers(call));\n  }\n\n  return () => {\n    eventHandlers.forEach((unsubscribe) => unsubscribe());\n  };\n};\n\n/**\n * Registers event handlers for a call that is of ringing type.\n *\n * @param call the call to register event handlers for.\n */\nexport const registerRingingCallEventHandlers = (call: Call) => {\n  const coordinatorRingEvents: {\n    [key in RingCallEvents]: (\n      call: Call,\n    ) => CallEventListener<AllCallEvents[key]>;\n  } = {\n    'call.accepted': watchCallAccepted(call),\n    'call.rejected': watchCallRejected(call),\n  };\n\n  const eventHandlers = Object.keys(coordinatorRingEvents).map((event) => {\n    const eventName = event as RingCallEvents;\n    return call.on(eventName, coordinatorRingEvents[eventName]);\n  });\n\n  return () => {\n    eventHandlers.forEach((unsubscribe) => unsubscribe());\n  };\n};\n","import {\n  ICEServer,\n  JoinCallRequest,\n  JoinCallResponse,\n} from '../../gen/coordinator';\nimport { JoinCallData } from '../../types';\nimport { StreamClient } from '../../coordinator/connection/client';\n\n/**\n * Collects all necessary information to join a call, talks to the coordinator\n * and returns the necessary information to join the call.\n *\n * @param httpClient the http client to use.\n * @param type the type of the call.\n * @param id the id of the call.\n * @param data the data for the call.\n */\nexport const join = async (\n  httpClient: StreamClient,\n  type: string,\n  id: string,\n  data?: JoinCallData,\n) => {\n  const { call, credentials, members, own_capabilities, stats_options } =\n    await doJoin(httpClient, type, id, data);\n\n  return {\n    connectionConfig: toRtcConfiguration(credentials.ice_servers),\n    sfuServer: credentials.server,\n    token: credentials.token,\n    metadata: call,\n    members,\n    ownCapabilities: own_capabilities,\n    statsOptions: stats_options,\n  };\n};\n\nconst doJoin = async (\n  httpClient: StreamClient,\n  type: string,\n  id: string,\n  data?: JoinCallData,\n) => {\n  const location = await httpClient.getLocationHint();\n  const request: JoinCallRequest = {\n    ...data,\n    location,\n  };\n  return httpClient.post<JoinCallResponse, JoinCallRequest>(\n    `/call/${type}/${id}/join`,\n    request,\n  );\n};\n\nconst toRtcConfiguration = (config?: ICEServer[]) => {\n  if (!config || config.length === 0) return undefined;\n  const rtcConfig: RTCConfiguration = {\n    iceServers: config.map((ice) => ({\n      urls: ice.urls,\n      username: ice.username,\n      credential: ice.password,\n    })),\n  };\n  return rtcConfig;\n};\n","import { LocalClientDetailsType } from '../client-details';\nimport { Sdk, SdkType } from '../gen/video/sfu/models/models';\n\n/**\n * Flatten the stats report into an array of stats objects.\n *\n * @param report the report to flatten.\n */\nexport const flatten = (report: RTCStatsReport) => {\n  const stats: RTCStats[] = [];\n  report.forEach((s) => {\n    stats.push(s);\n  });\n  return stats;\n};\n\nexport const getSdkSignature = (clientDetails: LocalClientDetailsType) => {\n  const { sdk, ...platform } = clientDetails;\n  const sdkName = getSdkName(sdk);\n  const sdkVersion = getSdkVersion(sdk);\n\n  return {\n    sdkName,\n    sdkVersion,\n    ...platform,\n  };\n};\n\nexport const getSdkName = (sdk: Sdk | undefined) => {\n  return sdk && sdk.type === SdkType.REACT\n    ? 'stream-react'\n    : sdk && sdk.type === SdkType.REACT_NATIVE\n    ? 'stream-react-native'\n    : 'stream-js';\n};\n\nexport const getSdkVersion = (sdk: Sdk | undefined) => {\n  return sdk ? `${sdk.major}.${sdk.minor}.${sdk.patch}` : '0.0.0-development';\n};\n","import type {\n  AggregatedStatsReport,\n  BaseStats,\n  ParticipantsStatsReport,\n  StatsReport,\n} from './types';\nimport { CallState } from '../store';\nimport { Publisher, Subscriber } from '../rtc';\nimport { getLogger } from '../logger';\nimport { flatten } from './utils';\n\nexport type StatsReporterOpts = {\n  subscriber: Subscriber;\n  publisher?: Publisher;\n  state: CallState;\n  datacenter: string;\n  pollingIntervalInMs?: number;\n};\n\nexport type StatsReporter = {\n  /**\n   * Will turn on stats reporting for a given sessionId.\n   *\n   * @param sessionId the session id.\n   */\n  startReportingStatsFor: (sessionId: string) => void;\n\n  /**\n   * Will turn off stats reporting for a given sessionId.\n   *\n   * @param sessionId the session id.\n   */\n  stopReportingStatsFor: (sessionId: string) => void;\n\n  /**\n   * Helper method for retrieving stats for a given peer connection kind\n   * and media stream flowing through it.\n   *\n   * @param kind the peer connection kind (subscriber or publisher).\n   * @param mediaStream the media stream.\n   */\n  getStatsForStream: (\n    kind: 'subscriber' | 'publisher',\n    mediaStream: MediaStream,\n  ) => Promise<StatsReport[]>;\n\n  /**\n   * Helper method for retrieving raw stats for a given peer connection kind.\n   *\n   * @param kind the peer connection kind (subscriber or publisher).\n   * @param selector the track selector. If not provided, stats for all tracks will be returned.\n   */\n  getRawStatsForTrack: (\n    kind: 'subscriber' | 'publisher',\n    selector?: MediaStreamTrack,\n  ) => Promise<RTCStatsReport | undefined>;\n\n  /**\n   * Stops the stats reporter and releases all resources.\n   */\n  stop: () => void;\n};\n\n/**\n * Creates a new StatsReporter instance that collects metrics about the ongoing call and reports them to the state store\n */\nexport const createStatsReporter = ({\n  subscriber,\n  publisher,\n  state,\n  datacenter,\n  pollingIntervalInMs = 2000,\n}: StatsReporterOpts): StatsReporter => {\n  const logger = getLogger(['stats']);\n  const getRawStatsForTrack = async (\n    kind: 'subscriber' | 'publisher',\n    selector?: MediaStreamTrack,\n  ) => {\n    if (kind === 'subscriber' && subscriber) {\n      return subscriber.getStats(selector);\n    } else if (kind === 'publisher' && publisher) {\n      return publisher.getStats(selector);\n    } else {\n      return undefined;\n    }\n  };\n\n  const getStatsForStream = async (\n    kind: 'subscriber' | 'publisher',\n    mediaStream: MediaStream,\n  ) => {\n    const pc = kind === 'subscriber' ? subscriber : publisher;\n    if (!pc) return [];\n    const statsForStream: StatsReport[] = [];\n    for (let track of mediaStream.getTracks()) {\n      const report = await pc.getStats(track);\n      const stats = transform(report, {\n        // @ts-ignore\n        trackKind: track.kind,\n        kind,\n      });\n      statsForStream.push(stats);\n    }\n    return statsForStream;\n  };\n\n  const startReportingStatsFor = (sessionId: string) => {\n    sessionIdsToTrack.add(sessionId);\n    void run();\n  };\n\n  const stopReportingStatsFor = (sessionId: string) => {\n    sessionIdsToTrack.delete(sessionId);\n    void run();\n  };\n\n  const sessionIdsToTrack = new Set<string>();\n\n  /**\n   * The main stats reporting loop.\n   */\n  const run = async () => {\n    const participantStats: ParticipantsStatsReport = {};\n    const sessionIds = new Set(sessionIdsToTrack);\n    if (sessionIds.size > 0) {\n      for (let participant of state.participants) {\n        if (!sessionIds.has(participant.sessionId)) continue;\n        const kind = participant.isLocalParticipant\n          ? 'publisher'\n          : 'subscriber';\n        try {\n          const mergedStream = new MediaStream([\n            ...(participant.videoStream?.getVideoTracks() || []),\n            ...(participant.audioStream?.getAudioTracks() || []),\n          ]);\n          participantStats[participant.sessionId] = await getStatsForStream(\n            kind,\n            mergedStream,\n          );\n          mergedStream.getTracks().forEach((t) => {\n            mergedStream.removeTrack(t);\n          });\n        } catch (e) {\n          logger(\n            'error',\n            `Failed to collect stats for ${kind} of ${participant.userId}`,\n            e,\n          );\n        }\n      }\n    }\n\n    const [subscriberStats, publisherStats] = await Promise.all([\n      subscriber\n        .getStats()\n        .then((report) =>\n          transform(report, {\n            kind: 'subscriber',\n            trackKind: 'video',\n          }),\n        )\n        .then(aggregate),\n      publisher\n        ? publisher\n            .getStats()\n            .then((report) =>\n              transform(report, {\n                kind: 'publisher',\n                trackKind: 'video',\n              }),\n            )\n            .then(aggregate)\n        : getEmptyStats(),\n    ]);\n\n    const [subscriberRawStats, publisherRawStats] = await Promise.all([\n      getRawStatsForTrack('subscriber'),\n      publisher ? getRawStatsForTrack('publisher') : undefined,\n    ]);\n\n    state.setCallStatsReport({\n      datacenter,\n      publisherStats,\n      subscriberStats,\n      subscriberRawStats,\n      publisherRawStats,\n      participants: participantStats,\n      timestamp: Date.now(),\n    });\n  };\n\n  let timeoutId: NodeJS.Timeout | undefined;\n  if (pollingIntervalInMs > 0) {\n    const loop = async () => {\n      await run().catch((e) => {\n        logger('debug', 'Failed to collect stats', e);\n      });\n      timeoutId = setTimeout(loop, pollingIntervalInMs);\n    };\n    void loop();\n  }\n\n  const stop = () => {\n    if (timeoutId) {\n      clearTimeout(timeoutId);\n    }\n  };\n\n  return {\n    getRawStatsForTrack,\n    getStatsForStream,\n    startReportingStatsFor,\n    stopReportingStatsFor,\n    stop,\n  };\n};\n\nexport type StatsTransformOpts = {\n  /**\n   * The kind of track we are transforming stats for.\n   */\n  trackKind: 'audio' | 'video';\n\n  /**\n   * The kind of peer connection we are transforming stats for.\n   */\n  kind: 'subscriber' | 'publisher';\n};\n\n/**\n * Transforms raw RTC stats into a slimmer and uniform across browsers format.\n *\n * @param report the report to transform.\n * @param opts the transform options.\n */\nconst transform = (\n  report: RTCStatsReport,\n  opts: StatsTransformOpts,\n): StatsReport => {\n  const { trackKind, kind } = opts;\n  const direction = kind === 'subscriber' ? 'inbound-rtp' : 'outbound-rtp';\n  const stats = flatten(report);\n  const streams = stats\n    .filter(\n      (stat) =>\n        stat.type === direction &&\n        (stat as RTCRtpStreamStats).kind === trackKind,\n    )\n    .map((stat): BaseStats => {\n      const rtcStreamStats = stat as RTCInboundRtpStreamStats &\n        RTCOutboundRtpStreamStats;\n\n      const codec = stats.find(\n        (s) => s.type === 'codec' && s.id === rtcStreamStats.codecId,\n      ) as { mimeType: string } | undefined; // FIXME OL: incorrect type!\n\n      const transport = stats.find(\n        (s) => s.type === 'transport' && s.id === rtcStreamStats.transportId,\n      ) as RTCTransportStats | undefined;\n\n      let roundTripTime: number | undefined;\n      if (transport && transport.dtlsState === 'connected') {\n        const candidatePair = stats.find(\n          (s) =>\n            s.type === 'candidate-pair' &&\n            s.id === transport.selectedCandidatePairId,\n        ) as RTCIceCandidatePairStats | undefined;\n        roundTripTime = candidatePair?.currentRoundTripTime;\n      }\n\n      return {\n        bytesSent: rtcStreamStats.bytesSent,\n        bytesReceived: rtcStreamStats.bytesReceived,\n        codec: codec?.mimeType,\n        currentRoundTripTime: roundTripTime,\n        frameHeight: rtcStreamStats.frameHeight,\n        frameWidth: rtcStreamStats.frameWidth,\n        framesPerSecond: rtcStreamStats.framesPerSecond,\n        jitter: rtcStreamStats.jitter,\n        kind: rtcStreamStats.kind,\n        // @ts-ignore: available in Chrome only, TS doesn't recognize this\n        qualityLimitationReason: rtcStreamStats.qualityLimitationReason,\n        rid: rtcStreamStats.rid,\n        ssrc: rtcStreamStats.ssrc,\n      };\n    });\n\n  return {\n    rawStats: report,\n    streams,\n    timestamp: Date.now(),\n  };\n};\n\nconst getEmptyStats = (stats?: StatsReport): AggregatedStatsReport => {\n  return {\n    rawReport: stats ?? { streams: [], timestamp: Date.now() },\n    totalBytesSent: 0,\n    totalBytesReceived: 0,\n    averageJitterInMs: 0,\n    averageRoundTripTimeInMs: 0,\n    qualityLimitationReasons: 'none',\n    highestFrameWidth: 0,\n    highestFrameHeight: 0,\n    highestFramesPerSecond: 0,\n    timestamp: Date.now(),\n  };\n};\n\n/**\n * Aggregates generic stats.\n *\n * @param stats the stats to aggregate.\n */\nconst aggregate = (stats: StatsReport): AggregatedStatsReport => {\n  const aggregatedStats = getEmptyStats(stats);\n\n  let maxArea = -1;\n  const area = (w: number, h: number) => w * h;\n\n  const qualityLimitationReasons = new Set<string>();\n  const streams = stats.streams;\n  const report = streams.reduce((acc, stream) => {\n    acc.totalBytesSent += stream.bytesSent || 0;\n    acc.totalBytesReceived += stream.bytesReceived || 0;\n    acc.averageJitterInMs += stream.jitter || 0;\n    acc.averageRoundTripTimeInMs += stream.currentRoundTripTime || 0;\n\n    // naive calculation of the highest resolution\n    const streamArea = area(stream.frameWidth || 0, stream.frameHeight || 0);\n    if (streamArea > maxArea) {\n      acc.highestFrameWidth = stream.frameWidth || 0;\n      acc.highestFrameHeight = stream.frameHeight || 0;\n      acc.highestFramesPerSecond = stream.framesPerSecond || 0;\n      maxArea = streamArea;\n    }\n\n    qualityLimitationReasons.add(stream.qualityLimitationReason || '');\n    return acc;\n  }, aggregatedStats);\n\n  if (streams.length > 0) {\n    report.averageJitterInMs = Math.round(\n      (report.averageJitterInMs / streams.length) * 1000,\n    );\n    report.averageRoundTripTimeInMs = Math.round(\n      (report.averageRoundTripTimeInMs / streams.length) * 1000,\n    );\n  }\n\n  const qualityLimitationReason = [\n    qualityLimitationReasons.has('cpu') && 'cpu',\n    qualityLimitationReasons.has('bandwidth') && 'bandwidth',\n    qualityLimitationReasons.has('other') && 'other',\n  ]\n    .filter(Boolean)\n    .join(', ');\n  if (qualityLimitationReason) {\n    report.qualityLimitationReasons = qualityLimitationReason;\n  }\n\n  return report;\n};\n","import { StreamSfuClient } from '../StreamSfuClient';\nimport { StatsOptions } from '../gen/coordinator';\nimport { getLogger } from '../logger';\nimport { Publisher, Subscriber } from '../rtc';\nimport { flatten, getSdkName, getSdkVersion } from './utils';\nimport { getWebRTCInfo, LocalClientDetailsType } from '../client-details';\n\nexport type SfuStatsReporterOptions = {\n  options: StatsOptions;\n  clientDetails: LocalClientDetailsType;\n  subscriber: Subscriber;\n  publisher?: Publisher;\n};\n\nexport class SfuStatsReporter {\n  private readonly logger = getLogger(['SfuStatsReporter']);\n\n  readonly options: StatsOptions;\n\n  private readonly sfuClient: StreamSfuClient;\n  private readonly subscriber: Subscriber;\n  private readonly publisher?: Publisher;\n\n  private intervalId: NodeJS.Timeout | undefined;\n  private readonly sdkName: string;\n  private readonly sdkVersion: string;\n  private readonly webRTCVersion: string;\n\n  constructor(\n    sfuClient: StreamSfuClient,\n    { options, clientDetails, subscriber, publisher }: SfuStatsReporterOptions,\n  ) {\n    this.sfuClient = sfuClient;\n    this.options = options;\n    this.subscriber = subscriber;\n    this.publisher = publisher;\n    const webRTCInfo = getWebRTCInfo();\n\n    const { sdk, browser } = clientDetails;\n\n    this.sdkName = getSdkName(sdk);\n    this.sdkVersion = getSdkVersion(sdk);\n\n    // The WebRTC version if passed from the SDK, it is taken else the browser info is sent.\n    this.webRTCVersion =\n      webRTCInfo?.version ||\n      `${browser?.name || ''}-${browser?.version || ''}` ||\n      'N/A';\n  }\n\n  private run = async () => {\n    const [subscriberStats, publisherStats] = await Promise.all([\n      this.subscriber.getStats().then(flatten).then(JSON.stringify),\n      this.publisher?.getStats().then(flatten).then(JSON.stringify) ?? '[]',\n    ]);\n\n    await this.sfuClient.sendStats({\n      sdk: this.sdkName,\n      sdkVersion: this.sdkVersion,\n      webrtcVersion: this.webRTCVersion,\n      subscriberStats,\n      publisherStats,\n    });\n  };\n\n  start = () => {\n    if (this.options.reporting_interval_ms <= 0) return;\n    this.intervalId = setInterval(() => {\n      this.run().catch((err) => {\n        this.logger('warn', 'Failed to report stats', err);\n      });\n    }, this.options.reporting_interval_ms);\n  };\n\n  stop = () => {\n    clearInterval(this.intervalId);\n    this.intervalId = undefined;\n  };\n}\n","const DEFAULT_THRESHOLD = 0.35;\n\nexport type EntryHandler = (entry: IntersectionObserverEntry) => void;\n\nexport type Unobserve = () => void;\n\nexport type Observe = (\n  element: HTMLElement,\n  entryHandler: EntryHandler,\n) => Unobserve;\n\nexport class ViewportTracker {\n  /**\n   * @private\n   */\n  private elementHandlerMap: Map<\n    HTMLElement,\n    (entry: IntersectionObserverEntry) => void\n  > = new Map();\n  /**\n   * @private\n   */\n  private observer: IntersectionObserver | null = null;\n  // in React children render before viewport is set, add\n  // them to the queue and observe them once the observer is ready\n  /**\n   * @private\n   */\n  private queueSet: Set<readonly [HTMLElement, EntryHandler]> = new Set();\n\n  /**\n   * Method to set scrollable viewport as root for the IntersectionObserver, returns\n   * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n   *\n   * @param viewportElement\n   * @param options\n   * @returns Unobserve\n   */\n  public setViewport = (\n    viewportElement: HTMLElement,\n    options?: Pick<IntersectionObserverInit, 'threshold' | 'rootMargin'>,\n  ) => {\n    const cleanup = () => {\n      this.observer?.disconnect();\n      this.observer = null;\n      this.elementHandlerMap.clear();\n    };\n\n    this.observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          const handler = this.elementHandlerMap.get(\n            entry.target as HTMLElement,\n          );\n          handler?.(entry);\n        });\n      },\n      {\n        root: viewportElement,\n        ...options,\n        threshold: options?.threshold ?? DEFAULT_THRESHOLD,\n      },\n    );\n\n    if (this.queueSet.size) {\n      this.queueSet.forEach(([queueElement, queueHandler]) => {\n        // check if element which requested observation is\n        // a child of a viewport element, skip if isn't\n        if (!viewportElement.contains(queueElement)) return;\n\n        this.observer!.observe(queueElement);\n        this.elementHandlerMap.set(queueElement, queueHandler);\n      });\n      this.queueSet.clear();\n    }\n\n    return cleanup;\n  };\n\n  /**\n   * Method to set element to observe and handler to be triggered whenever IntersectionObserver\n   * detects a possible change in element's visibility within specified viewport, returns\n   * cleanup function to be invoked upon disposing of the DOM element to prevent memory leaks\n   *\n   * @param element\n   * @param handler\n   * @returns Unobserve\n   */\n  public observe: Observe = (element, handler) => {\n    const queueItem = [element, handler] as const;\n\n    const cleanup = () => {\n      this.elementHandlerMap.delete(element);\n      this.observer?.unobserve(element);\n      this.queueSet.delete(queueItem);\n    };\n\n    if (this.elementHandlerMap.has(element)) return cleanup;\n\n    if (!this.observer) {\n      this.queueSet.add(queueItem);\n      return cleanup;\n    }\n\n    if (this.observer.root!.contains(element)) {\n      this.elementHandlerMap.set(element, handler);\n      this.observer.observe(element);\n    }\n\n    return cleanup;\n  };\n}\n","/**\n * Checks whether the current browser is Safari.\n */\nexport const isSafari = () => {\n  if (typeof navigator === 'undefined') return false;\n  return /^((?!chrome|android).)*safari/i.test(navigator.userAgent || '');\n};\n\n/**\n * Checks whether the current browser is Firefox.\n */\nexport const isFirefox = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Firefox');\n};\n\n/**\n * Checks whether the current browser is Google Chrome.\n */\nexport const isChrome = () => {\n  if (typeof navigator === 'undefined') return false;\n  return navigator.userAgent?.includes('Chrome');\n};\n","import { Call } from '../Call';\nimport {\n  AudioTrackType,\n  DebounceType,\n  StreamVideoParticipant,\n  VideoTrackType,\n  VisibilityState,\n} from '../types';\nimport { VideoDimension } from '../gen/video/sfu/models/models';\nimport {\n  combineLatest,\n  distinctUntilChanged,\n  distinctUntilKeyChanged,\n  map,\n  shareReplay,\n  takeWhile,\n} from 'rxjs';\nimport { ViewportTracker } from './ViewportTracker';\nimport { getLogger } from '../logger';\nimport { isFirefox, isSafari } from './browsers';\nimport { hasScreenShare, hasVideo } from './participantUtils';\n\nconst DEFAULT_VIEWPORT_VISIBILITY_STATE: Record<\n  VideoTrackType,\n  VisibilityState\n> = {\n  videoTrack: VisibilityState.UNKNOWN,\n  screenShareTrack: VisibilityState.UNKNOWN,\n} as const;\n\n/**\n * A manager class that handles dynascale related tasks like:\n *\n * - binding video elements to session ids\n * - binding audio elements to session ids\n * - tracking element visibility\n * - updating subscriptions based on viewport visibility\n * - updating subscriptions based on video element dimensions\n * - updating subscriptions based on published tracks\n */\nexport class DynascaleManager {\n  /**\n   * The viewport tracker instance.\n   */\n  readonly viewportTracker = new ViewportTracker();\n\n  private logger = getLogger(['DynascaleManager']);\n  private call: Call;\n\n  /**\n   * Creates a new DynascaleManager instance.\n   *\n   * @param call the call to manage.\n   */\n  constructor(call: Call) {\n    this.call = call;\n  }\n\n  /**\n   * Will begin tracking the given element for visibility changes within the\n   * configured viewport element (`call.setViewport`).\n   *\n   * @param element the element to track.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   * @returns Untrack.\n   */\n  trackElementVisibility = <T extends HTMLElement>(\n    element: T,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const cleanup = this.viewportTracker.observe(element, (entry) => {\n      this.call.state.updateParticipant(sessionId, (participant) => {\n        const previousVisibilityState =\n          participant.viewportVisibilityState ??\n          DEFAULT_VIEWPORT_VISIBILITY_STATE;\n\n        // observer triggers when the element is \"moved\" to be a fullscreen element\n        // keep it VISIBLE if that happens to prevent fullscreen with placeholder\n        const isVisible =\n          entry.isIntersecting || document.fullscreenElement === element\n            ? VisibilityState.VISIBLE\n            : VisibilityState.INVISIBLE;\n        return {\n          ...participant,\n          viewportVisibilityState: {\n            ...previousVisibilityState,\n            [trackType]: isVisible,\n          },\n        };\n      });\n    });\n\n    return () => {\n      cleanup();\n      // reset visibility state to UNKNOWN upon cleanup\n      // so that the layouts that are not actively observed\n      // can still function normally (runtime layout switching)\n      this.call.state.updateParticipant(sessionId, (participant) => {\n        const previousVisibilityState =\n          participant.viewportVisibilityState ??\n          DEFAULT_VIEWPORT_VISIBILITY_STATE;\n        return {\n          ...participant,\n          viewportVisibilityState: {\n            ...previousVisibilityState,\n            [trackType]: VisibilityState.UNKNOWN,\n          },\n        };\n      });\n    };\n  };\n\n  /**\n   * Sets the viewport element to track bound video elements for visibility.\n   *\n   * @param element the viewport element.\n   */\n  setViewport = <T extends HTMLElement>(element: T) => {\n    return this.viewportTracker.setViewport(element);\n  };\n\n  /**\n   * Binds a DOM <video> element to the given session id.\n   * This method will make sure that the video element will play\n   * the correct video stream for the given session id.\n   *\n   * Under the hood, it would also keep track of the video element dimensions\n   * and update the subscription accordingly in order to optimize the bandwidth.\n   *\n   * If a \"viewport\" is configured, the video element will be automatically\n   * tracked for visibility and the subscription will be updated accordingly.\n   *\n   * @param videoElement the video element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   */\n  bindVideoElement = (\n    videoElement: HTMLVideoElement,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const boundParticipant =\n      this.call.state.findParticipantBySessionId(sessionId);\n    if (!boundParticipant) return;\n\n    const requestTrackWithDimensions = (\n      debounceType: DebounceType,\n      dimension: VideoDimension | undefined,\n    ) => {\n      if (dimension && (dimension.width === 0 || dimension.height === 0)) {\n        // ignore 0x0 dimensions. this can happen when the video element\n        // is not visible (e.g., has display: none).\n        // we treat this as \"unsubscription\" as we don't want to keep\n        // consuming bandwidth for a video that is not visible on the screen.\n        this.logger('debug', `Ignoring 0x0 dimension`, boundParticipant);\n        dimension = undefined;\n      }\n      this.call.updateSubscriptionsPartial(\n        trackType,\n        { [sessionId]: { dimension } },\n        debounceType,\n      );\n    };\n\n    const participant$ = this.call.state.participants$.pipe(\n      map(\n        (participants) =>\n          participants.find(\n            (participant) => participant.sessionId === sessionId,\n          ) as StreamVideoParticipant,\n      ),\n      takeWhile((participant) => !!participant),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    /**\n     * Since the video elements are now being removed from the DOM (React SDK) upon\n     * visibility change, this subscription is not in use an stays here only for the\n     * plain JS integrations where integrators might choose not to remove the video\n     * elements from the DOM.\n     */\n    // keep copy for resize observer handler\n    let viewportVisibilityState: VisibilityState | undefined;\n    const viewportVisibilityStateSubscription =\n      boundParticipant.isLocalParticipant\n        ? null\n        : participant$\n            .pipe(\n              map((p) => p.viewportVisibilityState?.[trackType]),\n              distinctUntilChanged(),\n            )\n            .subscribe((nextViewportVisibilityState) => {\n              // skip initial trigger\n              if (!viewportVisibilityState) {\n                viewportVisibilityState =\n                  nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n                return;\n              }\n              viewportVisibilityState =\n                nextViewportVisibilityState ?? VisibilityState.UNKNOWN;\n\n              if (nextViewportVisibilityState === VisibilityState.INVISIBLE) {\n                return requestTrackWithDimensions(\n                  DebounceType.MEDIUM,\n                  undefined,\n                );\n              }\n\n              requestTrackWithDimensions(DebounceType.MEDIUM, {\n                width: videoElement.clientWidth,\n                height: videoElement.clientHeight,\n              });\n            });\n\n    let lastDimensions: string | undefined;\n    const resizeObserver = boundParticipant.isLocalParticipant\n      ? null\n      : new ResizeObserver(() => {\n          const currentDimensions = `${videoElement.clientWidth},${videoElement.clientHeight}`;\n\n          // skip initial trigger\n          if (!lastDimensions) {\n            lastDimensions = currentDimensions;\n            return;\n          }\n\n          if (\n            lastDimensions === currentDimensions ||\n            viewportVisibilityState === VisibilityState.INVISIBLE\n          ) {\n            return;\n          }\n\n          requestTrackWithDimensions(DebounceType.SLOW, {\n            width: videoElement.clientWidth,\n            height: videoElement.clientHeight,\n          });\n          lastDimensions = currentDimensions;\n        });\n    resizeObserver?.observe(videoElement);\n\n    // element renders and gets bound - track subscription gets\n    // triggered first other ones get skipped on initial subscriptions\n    const publishedTracksSubscription = boundParticipant.isLocalParticipant\n      ? null\n      : participant$\n          .pipe(\n            distinctUntilKeyChanged('publishedTracks'),\n            map((p) =>\n              trackType === 'videoTrack' ? hasVideo(p) : hasScreenShare(p),\n            ),\n            distinctUntilChanged(),\n          )\n          .subscribe((isPublishing) => {\n            if (isPublishing) {\n              // the participant just started to publish a track\n              requestTrackWithDimensions(DebounceType.FAST, {\n                width: videoElement.clientWidth,\n                height: videoElement.clientHeight,\n              });\n            } else {\n              // the participant just stopped publishing a track\n              requestTrackWithDimensions(DebounceType.FAST, undefined);\n            }\n          });\n\n    videoElement.autoplay = true;\n    videoElement.playsInline = true;\n\n    // explicitly marking the element as muted will allow autoplay to work\n    // without prior user interaction:\n    // https://developer.mozilla.org/en-US/docs/Web/Media/Autoplay_guide\n    videoElement.muted = true;\n\n    const streamSubscription = participant$\n      .pipe(\n        distinctUntilKeyChanged(\n          trackType === 'videoTrack' ? 'videoStream' : 'screenShareStream',\n        ),\n      )\n      .subscribe((p) => {\n        const source =\n          trackType === 'videoTrack' ? p.videoStream : p.screenShareStream;\n        if (videoElement.srcObject === source) return;\n        videoElement.srcObject = source ?? null;\n        if (isSafari() || isFirefox()) {\n          setTimeout(() => {\n            videoElement.srcObject = source ?? null;\n            videoElement.play().catch((e) => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n            // we add extra delay until we attempt to force-play\n            // the participant's media stream in Firefox and Safari,\n            // as they seem to have some timing issues\n          }, 25);\n        }\n      });\n\n    return () => {\n      requestTrackWithDimensions(DebounceType.FAST, undefined);\n      viewportVisibilityStateSubscription?.unsubscribe();\n      publishedTracksSubscription?.unsubscribe();\n      streamSubscription.unsubscribe();\n      resizeObserver?.disconnect();\n    };\n  };\n\n  /**\n   * Binds a DOM <audio> element to the given session id.\n   *\n   * This method will make sure that the audio element will\n   * play the correct audio stream for the given session id.\n   *\n   * @param audioElement the audio element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of audio.\n   * @returns a cleanup function that will unbind the audio element.\n   */\n  bindAudioElement = (\n    audioElement: HTMLAudioElement,\n    sessionId: string,\n    trackType: AudioTrackType,\n  ) => {\n    const participant = this.call.state.findParticipantBySessionId(sessionId);\n    if (!participant || participant.isLocalParticipant) return;\n\n    const participant$ = this.call.state.participants$.pipe(\n      map(\n        (participants) =>\n          participants.find(\n            (p) => p.sessionId === sessionId,\n          ) as StreamVideoParticipant,\n      ),\n      takeWhile((p) => !!p),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n    );\n\n    const updateMediaStreamSubscription = participant$\n      .pipe(\n        distinctUntilKeyChanged(\n          trackType === 'screenShareAudioTrack'\n            ? 'screenShareAudioStream'\n            : 'audioStream',\n        ),\n      )\n      .subscribe((p) => {\n        const source =\n          trackType === 'screenShareAudioTrack'\n            ? p.screenShareAudioStream\n            : p.audioStream;\n        if (audioElement.srcObject === source) return;\n\n        setTimeout(() => {\n          audioElement.srcObject = source ?? null;\n          if (audioElement.srcObject) {\n            audioElement.play().catch((e) => {\n              this.logger('warn', `Failed to play stream`, e);\n            });\n\n            // audio output device shall be set after the audio element is played\n            // otherwise, the browser will not pick it up, and will always\n            // play audio through the system's default device\n            const { selectedDevice } = this.call.speaker.state;\n            if (selectedDevice && 'setSinkId' in audioElement) {\n              audioElement.setSinkId(selectedDevice);\n            }\n          }\n        });\n      });\n\n    const sinkIdSubscription = !('setSinkId' in audioElement)\n      ? null\n      : this.call.speaker.state.selectedDevice$.subscribe((deviceId) => {\n          if (deviceId) {\n            audioElement.setSinkId(deviceId);\n          }\n        });\n\n    const volumeSubscription = combineLatest([\n      this.call.speaker.state.volume$,\n      participant$.pipe(distinctUntilKeyChanged('audioVolume')),\n    ]).subscribe(([volume, p]) => {\n      audioElement.volume = p.audioVolume ?? volume;\n    });\n\n    audioElement.autoplay = true;\n\n    return () => {\n      sinkIdSubscription?.unsubscribe();\n      volumeSubscription.unsubscribe();\n      updateMediaStreamSubscription.unsubscribe();\n    };\n  };\n}\n","import { CallSettingsResponse, OwnCapability } from '../gen/coordinator';\n\n/**\n * Stores the permissions for the current user and exposes\n * a few helper methods which make it easier to work with permissions.\n *\n * This is an internal class meant to be used in combination with\n * a {@link Call} instance.\n *\n * @internal\n */\nexport class PermissionsContext {\n  private permissions: OwnCapability[] = [];\n  private settings?: CallSettingsResponse;\n\n  /**\n   * Sets the permissions for the current user.\n   *\n   * @param permissions the permissions to set.\n   */\n  setPermissions = (permissions: OwnCapability[]) => {\n    this.permissions = permissions || [];\n  };\n\n  /**\n   * Sets the settings for the bound call.\n   * @param settings\n   */\n  setCallSettings = (settings: CallSettingsResponse) => {\n    this.settings = settings;\n  };\n\n  /**\n   * Checks if the current user has a specific permission.\n   *\n   * @param permission the permission to check for.\n   */\n  hasPermission = (permission: OwnCapability) => {\n    return this.permissions.includes(permission);\n  };\n\n  /**\n   * Checks if the current user can request a specific permission\n   * within the call.\n   *\n   * @param permission the permission to check for.\n   * @param settings the call settings to check against (optional).\n   */\n  canRequest = (\n    permission: OwnCapability,\n    settings: CallSettingsResponse | undefined = this.settings,\n  ) => {\n    if (!settings) return false;\n\n    const { audio, video, screensharing } = settings;\n    switch (permission) {\n      case OwnCapability.SEND_AUDIO:\n        return audio.access_request_enabled;\n      case OwnCapability.SEND_VIDEO:\n        return video.access_request_enabled;\n      case OwnCapability.SCREENSHARE:\n        return screensharing.access_request_enabled;\n      default:\n        return false;\n    }\n  };\n}\n","import { StreamVideoParticipant } from './types';\nimport {\n  Comparator,\n  defaultSortPreset,\n  livestreamOrAudioRoomSortPreset,\n} from './sorting';\n\n/**\n * The options for a {@link CallType}.\n */\nexport type CallTypeOptions = {\n  /**\n   * The {@link Comparator} to use to sorting the participants in the call.\n   */\n  sortParticipantsBy?: Comparator<StreamVideoParticipant>;\n};\n\n/**\n * Represents a call type.\n */\nexport class CallType {\n  /**\n   * The name of the call type.\n   */\n  name: string;\n\n  /**\n   * The options for the call type.\n   */\n  options: CallTypeOptions;\n\n  /**\n   * Constructs a new CallType.\n   *\n   * @param name the name of the call type.\n   * @param options the options for the call type.\n   */\n  constructor(\n    name: string,\n    options: CallTypeOptions = {\n      sortParticipantsBy: defaultSortPreset,\n    },\n  ) {\n    this.name = name;\n    this.options = options;\n  }\n}\n\n/**\n * A registry of {@link CallType}s.\n * You can register and unregister call types.\n */\nclass CallTypesRegistry {\n  /**\n   * The call types registered in this registry.\n   * @private\n   */\n  private readonly callTypes: { [key: string]: CallType };\n\n  /**\n   * Constructs a new CallTypesRegistry.\n   *\n   * @param callTypes the initial call types to register.\n   */\n  constructor(callTypes: CallType[]) {\n    this.callTypes = callTypes.reduce<{ [key: string]: CallType }>(\n      (acc, callType) => {\n        acc[callType.name] = callType;\n        return acc;\n      },\n      {},\n    );\n  }\n\n  /**\n   * Registers a new call type.\n   *\n   * @param callType the call type to register.\n   */\n  register = (callType: CallType) => {\n    this.callTypes[callType.name] = callType;\n  };\n\n  /**\n   * Unregisters a call type.\n   *\n   * @param name the name of the call type to unregister.\n   */\n  unregister = (name: string) => {\n    delete this.callTypes[name];\n  };\n\n  /**\n   * Gets a call type by name.\n   *\n   * @param name the name of the call type to get.\n   */\n  get = (name: string): CallType => {\n    if (!this.callTypes[name]) {\n      this.register(new CallType(name));\n    }\n    return this.callTypes[name];\n  };\n}\n\n/**\n * The default call types registry.\n * You can use this instance to dynamically register and unregister call types.\n */\nexport const CallTypes = new CallTypesRegistry([\n  new CallType('default', {\n    sortParticipantsBy: defaultSortPreset,\n  }),\n  new CallType('development', {\n    sortParticipantsBy: defaultSortPreset,\n  }),\n  new CallType('livestream', {\n    sortParticipantsBy: livestreamOrAudioRoomSortPreset,\n  }),\n  new CallType('audio_room', {\n    sortParticipantsBy: livestreamOrAudioRoomSortPreset,\n  }),\n]);\n","import {\n  concatMap,\n  debounceTime,\n  from,\n  map,\n  merge,\n  Observable,\n  shareReplay,\n} from 'rxjs';\nimport { getLogger } from '../logger';\n\n/**\n * Returns an Observable that emits the list of available devices\n * that meet the given constraints.\n *\n * @param constraints the constraints to use when requesting the devices.\n * @param kind the kind of devices to enumerate.\n */\nconst getDevices = (\n  constraints: MediaStreamConstraints,\n  kind: MediaDeviceKind,\n) => {\n  return new Observable<MediaDeviceInfo[]>((subscriber) => {\n    const enumerate = async () => {\n      let devices = await navigator.mediaDevices.enumerateDevices();\n      // some browsers report empty device labels (Firefox).\n      // in that case, we need to request permissions (via getUserMedia)\n      // to be able to get the device labels\n      const needsGetUserMedia = devices.some(\n        (device) => device.kind === kind && device.label === '',\n      );\n      if (needsGetUserMedia) {\n        let mediaStream: MediaStream | undefined;\n        try {\n          mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\n          devices = await navigator.mediaDevices.enumerateDevices();\n        } finally {\n          if (mediaStream) disposeOfMediaStream(mediaStream);\n        }\n      }\n      return devices;\n    };\n\n    enumerate()\n      .then((devices) => {\n        // notify subscribers and complete\n        subscriber.next(devices);\n        subscriber.complete();\n      })\n      .catch((error) => {\n        const logger = getLogger(['devices']);\n        logger('error', 'Failed to enumerate devices', error);\n        subscriber.error(error);\n      });\n  });\n};\n\n/**\n * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n *\n *  */\nexport const checkIfAudioOutputChangeSupported = () => {\n  if (typeof document === 'undefined') return false;\n  const element = document.createElement('audio');\n  return 'setSinkId' in element;\n};\n\n/**\n * The default constraints used to request audio devices.\n */\nconst audioDeviceConstraints = {\n  audio: {\n    autoGainControl: true,\n    noiseSuppression: true,\n    echoCancellation: true,\n  },\n} satisfies MediaStreamConstraints;\n\n/**\n * The default constraints used to request video devices.\n */\nconst videoDeviceConstraints = {\n  video: {\n    width: 1280,\n    height: 720,\n  },\n} satisfies MediaStreamConstraints;\n\n/**\n * Creates a memoized observable instance\n * that will be created only once and shared between all callers.\n *\n * @param create a function that creates an Observable.\n */\nconst memoizedObservable = <T>(create: () => Observable<T>) => {\n  let memoized: Observable<T>;\n  return () => {\n    if (!memoized) memoized = create();\n    return memoized;\n  };\n};\n\nconst getDeviceChangeObserver = memoizedObservable(() => {\n  // Audio and video devices are requested in two separate requests.\n  // That way, users will be presented with two separate prompts\n  // -> they can give access to just camera, or just microphone\n  return new Observable((subscriber) => {\n    // 'addEventListener' is not available in React Native\n    if (!navigator.mediaDevices.addEventListener) return;\n\n    const notify = () => subscriber.next();\n    navigator.mediaDevices.addEventListener('devicechange', notify);\n    return () => {\n      navigator.mediaDevices.removeEventListener('devicechange', notify);\n    };\n  }).pipe(\n    debounceTime(500),\n    concatMap(() => from(navigator.mediaDevices.enumerateDevices())),\n    shareReplay(1),\n  );\n});\n\nconst getAudioDevicesObserver = memoizedObservable(() => {\n  return merge(\n    getDevices(audioDeviceConstraints, 'audioinput'),\n    getDeviceChangeObserver(),\n  ).pipe(shareReplay(1));\n});\n\nconst getAudioOutputDevicesObserver = memoizedObservable(() => {\n  return merge(\n    getDevices(audioDeviceConstraints, 'audiooutput'),\n    getDeviceChangeObserver(),\n  ).pipe(shareReplay(1));\n});\n\nconst getVideoDevicesObserver = memoizedObservable(() => {\n  return merge(\n    getDevices(videoDeviceConstraints, 'videoinput'),\n    getDeviceChangeObserver(),\n  ).pipe(shareReplay(1));\n});\n\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audioinput' devices, if devices are added/removed the list is updated.\n */\nexport const getAudioDevices = () => {\n  return getAudioDevicesObserver().pipe(\n    map((values) => values.filter((d) => d.kind === 'audioinput')),\n  );\n};\n\n/**\n * Prompts the user for a permission to use video devices (if not already granted) and lists the available 'videoinput' devices, if devices are added/removed the list is updated.\n */\nexport const getVideoDevices = () => {\n  return getVideoDevicesObserver().pipe(\n    map((values) => values.filter((d) => d.kind === 'videoinput')),\n  );\n};\n\n/**\n * Prompts the user for a permission to use audio devices (if not already granted) and lists the available 'audiooutput' devices, if devices are added/removed the list is updated. Selecting 'audiooutput' device only makes sense if [the browser has support for changing audio output on 'audio' elements](#checkifaudiooutputchangesupported)\n */\nexport const getAudioOutputDevices = () => {\n  return getAudioOutputDevicesObserver().pipe(\n    map((values) => values.filter((d) => d.kind === 'audiooutput')),\n  );\n};\n\nconst getStream = async (constraints: MediaStreamConstraints) => {\n  try {\n    return await navigator.mediaDevices.getUserMedia(constraints);\n  } catch (e) {\n    getLogger(['devices'])('error', `Failed get user media`, {\n      error: e,\n      constraints: constraints,\n    });\n    throw e;\n  }\n};\n\n/**\n * Returns an audio media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns the new `MediaStream` fulfilling the given constraints.\n */\nexport const getAudioStream = async (\n  trackConstraints?: MediaTrackConstraints,\n) => {\n  const constraints: MediaStreamConstraints = {\n    audio: {\n      ...audioDeviceConstraints.audio,\n      ...trackConstraints,\n    },\n  };\n  return getStream(constraints);\n};\n\n/**\n * Returns a video media stream that fulfills the given constraints.\n * If no constraints are provided, it uses the browser's default ones.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n * @param trackConstraints the constraints to use when requesting the stream.\n * @returns a new `MediaStream` fulfilling the given constraints.\n */\nexport const getVideoStream = async (\n  trackConstraints?: MediaTrackConstraints,\n) => {\n  const constraints: MediaStreamConstraints = {\n    video: {\n      ...videoDeviceConstraints.video,\n      ...trackConstraints,\n    },\n  };\n  return getStream(constraints);\n};\n\n/**\n * Prompts the user for a permission to share a screen.\n * If the user grants the permission, a screen sharing stream is returned. Throws otherwise.\n *\n * The callers of this API are responsible to handle the possible errors.\n *\n * @angular It's recommended to use the [`DeviceManagerService`](./DeviceManagerService.md) for a higher level API, use this low-level method only if the `DeviceManagerService` doesn't suit your requirements.\n *\n * @param options any additional options to pass to the [`getDisplayMedia`](https://developer.mozilla.org/en-US/docs/Web/API/MediaDevices/getDisplayMedia) API.\n */\nexport const getScreenShareStream = async (\n  options?: DisplayMediaStreamOptions,\n) => {\n  try {\n    return await navigator.mediaDevices.getDisplayMedia({\n      video: true,\n      audio: {\n        channelCount: {\n          ideal: 2,\n        },\n        echoCancellation: false,\n        autoGainControl: false,\n        noiseSuppression: false,\n      },\n      // @ts-expect-error - not present in types yet\n      systemAudio: 'include',\n      ...options,\n    });\n  } catch (e) {\n    getLogger(['devices'])('error', 'Failed to get screen share stream', e);\n    throw e;\n  }\n};\n\nexport const deviceIds$ =\n  typeof navigator !== 'undefined' &&\n  typeof navigator.mediaDevices !== 'undefined'\n    ? memoizedObservable(() =>\n        merge(\n          from(navigator.mediaDevices.enumerateDevices()),\n          getDeviceChangeObserver(),\n        ).pipe(shareReplay(1)),\n      )()\n    : undefined;\n\n/**\n * Deactivates MediaStream (stops and removes tracks) to be later garbage collected\n *\n * @param stream MediaStream\n * @returns void\n */\nexport const disposeOfMediaStream = (stream: MediaStream) => {\n  if (!stream.active) return;\n  stream.getTracks().forEach((track) => {\n    track.stop();\n    stream.removeTrack(track);\n  });\n  // @ts-expect-error release() is present in react-native-webrtc and must be called to dispose the stream\n  if (typeof stream.release === 'function') {\n    // @ts-expect-error\n    stream.release();\n  }\n};\n","import { combineLatest, Observable, pairwise } from 'rxjs';\nimport { Call } from '../Call';\nimport { CallingState } from '../store';\nimport { createSubscription } from '../store/rxUtils';\nimport {\n  InputDeviceStatus,\n  InputMediaDeviceManagerState,\n} from './InputMediaDeviceManagerState';\nimport { isReactNative } from '../helpers/platforms';\nimport { Logger } from '../coordinator/connection/types';\nimport { getLogger } from '../logger';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { deviceIds$ } from './devices';\n\nexport type MediaStreamFilter = (stream: MediaStream) => Promise<MediaStream>;\n\nexport abstract class InputMediaDeviceManager<\n  T extends InputMediaDeviceManagerState<C>,\n  C = MediaTrackConstraints,\n> {\n  /**\n   * @internal\n   */\n  statusChangePromise?: Promise<void>;\n  /**\n   * if true, stops the media stream when call is left\n   */\n  stopOnLeave = true;\n  logger: Logger;\n\n  protected subscriptions: Function[] = [];\n  private isTrackStoppedDueToTrackEnd = false;\n  private filters: MediaStreamFilter[] = [];\n  private statusChangeAbortController?: AbortController;\n\n  protected constructor(\n    protected readonly call: Call,\n    public readonly state: T,\n    protected readonly trackType: TrackType,\n  ) {\n    this.logger = getLogger([`${TrackType[trackType].toLowerCase()} manager`]);\n    if (\n      deviceIds$ &&\n      !isReactNative() &&\n      (this.trackType === TrackType.AUDIO || this.trackType === TrackType.VIDEO)\n    ) {\n      this.handleDisconnectedOrReplacedDevices();\n    }\n  }\n\n  /**\n   * Lists the available audio/video devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    return this.getDevices();\n  }\n\n  /**\n   * Starts stream.\n   */\n  async enable() {\n    if (this.state.optimisticStatus === 'enabled') {\n      await this.statusChangePromise;\n      return;\n    }\n    const signal = this.nextAbortableStatusChangeRequest('enabled');\n    const doEnable = async () => {\n      if (signal.aborted) return;\n      try {\n        await this.unmuteStream();\n        this.state.setStatus('enabled');\n      } finally {\n        if (!signal.aborted) this.resetStatusChangeRequest();\n      }\n    };\n    this.statusChangePromise = this.statusChangePromise\n      ? this.statusChangePromise.then(doEnable)\n      : doEnable();\n    await this.statusChangePromise;\n  }\n\n  /**\n   * Stops or pauses the stream based on state.disableMode\n   * @param {boolean} [forceStop=false] when true, stops the tracks regardless of the state.disableMode\n   */\n  async disable(forceStop: boolean = false) {\n    this.state.prevStatus = this.state.status;\n    if (!forceStop && this.state.optimisticStatus === 'disabled') {\n      await this.statusChangePromise;\n      return;\n    }\n    const stopTracks = forceStop || this.state.disableMode === 'stop-tracks';\n    const signal = this.nextAbortableStatusChangeRequest('disabled');\n    const doDisable = async () => {\n      if (signal.aborted) return;\n      try {\n        await this.muteStream(stopTracks);\n        this.state.setStatus('disabled');\n      } finally {\n        if (!signal.aborted) this.resetStatusChangeRequest();\n      }\n    };\n    this.statusChangePromise = this.statusChangePromise\n      ? this.statusChangePromise.then(doDisable)\n      : doDisable();\n    await this.statusChangePromise;\n  }\n\n  /**\n   * If status was previously enabled, it will re-enable the device.\n   */\n  async resume() {\n    if (\n      this.state.prevStatus === 'enabled' &&\n      this.state.status === 'disabled'\n    ) {\n      await this.enable();\n    }\n  }\n\n  /**\n   * If the current device status is disabled, it will enable the device,\n   * else it will disable it.\n   */\n  async toggle() {\n    if (this.state.optimisticStatus === 'enabled') {\n      return this.disable();\n    } else {\n      return this.enable();\n    }\n  }\n\n  /**\n   * Registers a filter that will be applied to the stream.\n   *\n   * The registered filter will get the existing stream, and it should return\n   * a new stream with the applied filter.\n   *\n   * @param filter the filter to register.\n   * @returns a function that will unregister the filter.\n   */\n  async registerFilter(filter: MediaStreamFilter) {\n    this.filters.push(filter);\n    await this.applySettingsToStream();\n    return async () => {\n      this.filters = this.filters.filter((f) => f !== filter);\n      await this.applySettingsToStream();\n    };\n  }\n\n  /**\n   * Will set the default constraints for the device.\n   *\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints: C) {\n    this.state.setDefaultConstraints(constraints);\n  }\n\n  /**\n   * Selects a device.\n   *\n   * Note: This method is not supported in React Native\n   * @param deviceId the device id to select.\n   */\n  async select(deviceId: string | undefined) {\n    if (isReactNative()) {\n      throw new Error(\n        'This method is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for reference.',\n      );\n    }\n    if (deviceId === this.state.selectedDevice) {\n      return;\n    }\n    this.state.setDevice(deviceId);\n    await this.applySettingsToStream();\n  }\n\n  /**\n   * Disposes the manager.\n   *\n   * @internal\n   */\n  dispose = () => {\n    this.subscriptions.forEach((s) => s());\n  };\n\n  protected async applySettingsToStream() {\n    if (this.state.status === 'enabled') {\n      await this.muteStream();\n      await this.unmuteStream();\n    }\n  }\n\n  protected abstract getDevices(): Observable<MediaDeviceInfo[]>;\n\n  protected abstract getStream(constraints: C): Promise<MediaStream>;\n\n  protected abstract publishStream(stream: MediaStream): Promise<void>;\n\n  protected abstract stopPublishStream(stopTracks: boolean): Promise<void>;\n\n  protected getTracks(): MediaStreamTrack[] {\n    return this.state.mediaStream?.getTracks() ?? [];\n  }\n\n  protected async muteStream(stopTracks: boolean = true) {\n    if (!this.state.mediaStream) return;\n    this.logger('debug', `${stopTracks ? 'Stopping' : 'Disabling'} stream`);\n    if (this.call.state.callingState === CallingState.JOINED) {\n      await this.stopPublishStream(stopTracks);\n    }\n    this.muteLocalStream(stopTracks);\n    const allEnded = this.getTracks().every((t) => t.readyState === 'ended');\n    if (allEnded) {\n      if (\n        this.state.mediaStream &&\n        // @ts-expect-error release() is present in react-native-webrtc\n        typeof this.state.mediaStream.release === 'function'\n      ) {\n        // @ts-expect-error called to dispose the stream in RN\n        this.state.mediaStream.release();\n      }\n      this.state.setMediaStream(undefined, undefined);\n    }\n  }\n\n  private muteTracks() {\n    this.getTracks().forEach((track) => {\n      if (track.enabled) track.enabled = false;\n    });\n  }\n\n  private unmuteTracks() {\n    this.getTracks().forEach((track) => {\n      if (!track.enabled) track.enabled = true;\n    });\n  }\n\n  private stopTracks() {\n    this.getTracks().forEach((track) => {\n      if (track.readyState === 'live') track.stop();\n    });\n  }\n\n  private muteLocalStream(stopTracks: boolean) {\n    if (!this.state.mediaStream) {\n      return;\n    }\n    if (stopTracks) {\n      this.stopTracks();\n    } else {\n      this.muteTracks();\n    }\n  }\n\n  protected async unmuteStream() {\n    this.logger('debug', 'Starting stream');\n    let stream: MediaStream;\n    let rootStream: Promise<MediaStream> | undefined;\n    if (\n      this.state.mediaStream &&\n      this.getTracks().every((t) => t.readyState === 'live')\n    ) {\n      stream = this.state.mediaStream;\n      this.unmuteTracks();\n    } else {\n      const defaultConstraints = this.state.defaultConstraints;\n      const constraints: MediaTrackConstraints = {\n        ...defaultConstraints,\n        deviceId: this.state.selectedDevice,\n      };\n\n      /**\n       * Chains two media streams together.\n       *\n       * In our case, filters MediaStreams are derived from their parent MediaStream.\n       * However, once a child filter's track is stopped,\n       * the tracks of the parent MediaStream aren't automatically stopped.\n       * This leads to a situation where the camera indicator light is still on\n       * even though the user stopped publishing video.\n       *\n       * This function works around this issue by stopping the parent MediaStream's tracks\n       * as well once the child filter's tracks are stopped.\n       *\n       * It works by patching the stop() method of the child filter's tracks to also stop\n       * the parent MediaStream's tracks of the same type. Here we assume that\n       * the parent MediaStream has only one track of each type.\n       *\n       * @param parentStream the parent MediaStream. Omit for the root stream.\n       */\n      const chainWith =\n        (parentStream?: Promise<MediaStream>) =>\n        async (filterStream: MediaStream): Promise<MediaStream> => {\n          if (!parentStream) return filterStream;\n          // TODO OL: take care of track.enabled property as well\n          const parent = await parentStream;\n          filterStream.getTracks().forEach((track) => {\n            const originalStop = track.stop;\n            track.stop = function stop() {\n              originalStop.call(track);\n              parent.getTracks().forEach((parentTrack) => {\n                if (parentTrack.kind === track.kind) {\n                  parentTrack.stop();\n                }\n              });\n            };\n          });\n\n          parent.getTracks().forEach((parentTrack) => {\n            // When the parent stream abruptly ends, we propagate the event\n            // to the filter stream.\n            // This usually happens when the camera/microphone permissions\n            // are revoked or when the device is disconnected.\n            const handleParentTrackEnded = () => {\n              filterStream.getTracks().forEach((track) => {\n                if (parentTrack.kind !== track.kind) return;\n                track.stop();\n                track.dispatchEvent(new Event('ended')); // propagate the event\n              });\n            };\n            parentTrack.addEventListener('ended', handleParentTrackEnded);\n            this.subscriptions.push(() => {\n              parentTrack.removeEventListener('ended', handleParentTrackEnded);\n            });\n          });\n\n          return filterStream;\n        };\n\n      // the rootStream represents the stream coming from the actual device\n      // e.g. camera or microphone stream\n      rootStream = this.getStream(constraints as C);\n      // we publish the last MediaStream of the chain\n      stream = await this.filters.reduce(\n        (parent, filter) => parent.then(filter).then(chainWith(parent)),\n        rootStream,\n      );\n    }\n    if (this.call.state.callingState === CallingState.JOINED) {\n      await this.publishStream(stream);\n    }\n    if (this.state.mediaStream !== stream) {\n      this.state.setMediaStream(stream, await rootStream);\n      this.getTracks().forEach((track) => {\n        track.addEventListener('ended', async () => {\n          if (this.statusChangePromise) {\n            await this.statusChangePromise;\n          }\n          if (this.state.status === 'enabled') {\n            this.isTrackStoppedDueToTrackEnd = true;\n            setTimeout(() => {\n              this.isTrackStoppedDueToTrackEnd = false;\n            }, 2000);\n            await this.disable();\n          }\n        });\n      });\n    }\n  }\n\n  private get mediaDeviceKind() {\n    if (this.trackType === TrackType.AUDIO) {\n      return 'audioinput';\n    }\n    if (this.trackType === TrackType.VIDEO) {\n      return 'videoinput';\n    }\n    return '';\n  }\n\n  private handleDisconnectedOrReplacedDevices() {\n    this.subscriptions.push(\n      createSubscription(\n        combineLatest([\n          deviceIds$!.pipe(pairwise()),\n          this.state.selectedDevice$,\n        ]),\n        async ([[prevDevices, currentDevices], deviceId]) => {\n          if (!deviceId) {\n            return;\n          }\n          if (this.statusChangePromise) {\n            await this.statusChangePromise;\n          }\n\n          let isDeviceDisconnected = false;\n          let isDeviceReplaced = false;\n          const currentDevice = this.findDeviceInList(currentDevices, deviceId);\n          const prevDevice = this.findDeviceInList(prevDevices, deviceId);\n          if (!currentDevice && prevDevice) {\n            isDeviceDisconnected = true;\n          } else if (\n            currentDevice &&\n            prevDevice &&\n            currentDevice.deviceId === prevDevice.deviceId &&\n            currentDevice.groupId !== prevDevice.groupId\n          ) {\n            isDeviceReplaced = true;\n          }\n\n          if (isDeviceDisconnected) {\n            await this.disable();\n            this.select(undefined);\n          }\n          if (isDeviceReplaced) {\n            if (\n              this.isTrackStoppedDueToTrackEnd &&\n              this.state.status === 'disabled'\n            ) {\n              await this.enable();\n              this.isTrackStoppedDueToTrackEnd = false;\n            } else {\n              await this.applySettingsToStream();\n            }\n          }\n        },\n      ),\n    );\n  }\n\n  private findDeviceInList(devices: MediaDeviceInfo[], deviceId: string) {\n    return devices.find(\n      (d) => d.deviceId === deviceId && d.kind === this.mediaDeviceKind,\n    );\n  }\n\n  private nextAbortableStatusChangeRequest(status: InputDeviceStatus) {\n    this.statusChangeAbortController?.abort();\n    this.statusChangeAbortController = new AbortController();\n    this.state.setPendingStatus(status);\n    return this.statusChangeAbortController.signal;\n  }\n\n  private resetStatusChangeRequest() {\n    this.statusChangePromise = undefined;\n    this.statusChangeAbortController = undefined;\n    this.state.setPendingStatus(this.state.status);\n  }\n}\n","import {\n  BehaviorSubject,\n  distinctUntilChanged,\n  Observable,\n  shareReplay,\n} from 'rxjs';\nimport { isReactNative } from '../helpers/platforms';\nimport { RxUtils } from '../store';\nimport { getLogger } from '../logger';\n\nexport type InputDeviceStatus = 'enabled' | 'disabled' | undefined;\nexport type TrackDisableMode = 'stop-tracks' | 'disable-tracks';\n\nexport abstract class InputMediaDeviceManagerState<C = MediaTrackConstraints> {\n  protected statusSubject = new BehaviorSubject<InputDeviceStatus>(undefined);\n  protected optimisticStatusSubject = new BehaviorSubject<InputDeviceStatus>(\n    undefined,\n  );\n  protected mediaStreamSubject = new BehaviorSubject<MediaStream | undefined>(\n    undefined,\n  );\n  protected selectedDeviceSubject = new BehaviorSubject<string | undefined>(\n    undefined,\n  );\n  protected defaultConstraintsSubject = new BehaviorSubject<C | undefined>(\n    undefined,\n  );\n\n  /**\n   * @internal\n   */\n  prevStatus: InputDeviceStatus;\n\n  /**\n   * An Observable that emits the current media stream, or `undefined` if the device is currently disabled.\n   *\n   */\n  mediaStream$ = this.mediaStreamSubject.asObservable();\n\n  /**\n   * An Observable that emits the currently selected device\n   */\n  selectedDevice$ = this.selectedDeviceSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * An Observable that emits the device status\n   */\n  status$ = this.statusSubject.asObservable().pipe(distinctUntilChanged());\n\n  /**\n   * An Observable the reflects the requested device status. Useful for optimistic UIs\n   */\n  optimisticStatus$ = this.optimisticStatusSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * The default constraints for the device.\n   */\n  defaultConstraints$ = this.defaultConstraintsSubject.asObservable();\n\n  /**\n   * An observable that will emit `true` if browser/system permission\n   * is granted, `false` otherwise.\n   */\n  hasBrowserPermission$ = new Observable<boolean>((subscriber) => {\n    const notifyGranted = () => subscriber.next(true);\n    const permissionsAPIAvailable = !!navigator?.permissions?.query;\n    if (isReactNative() || !this.permissionName || !permissionsAPIAvailable) {\n      getLogger(['devices'])(\n        'warn',\n        `Permissions can't be queried. Assuming granted.`,\n      );\n      return notifyGranted();\n    }\n\n    let permissionState: PermissionStatus;\n    const notify = () => {\n      subscriber.next(\n        // In some browsers, the 'change' event doesn't reliably emit and hence,\n        // permissionState stays in 'prompt' state forever.\n        // Typically, this happens when a user grants one-time permission.\n        // Instead of checking if a permission is granted, we check if it isn't denied\n        permissionState.state !== 'denied',\n      );\n    };\n    navigator.permissions\n      .query({ name: this.permissionName })\n      .then((permissionStatus) => {\n        permissionState = permissionStatus;\n        permissionState.addEventListener('change', notify);\n        notify();\n      })\n      .catch(() => {\n        // permission doesn't exist or can't be queried -> assume it's granted\n        // an example would be Firefox,\n        // where neither camera microphone permission can be queried\n        notifyGranted();\n      });\n\n    return () => {\n      permissionState?.removeEventListener('change', notify);\n    };\n  }).pipe(shareReplay(1));\n\n  /**\n   * Constructs new InputMediaDeviceManagerState instance.\n   *\n   * @param disableMode the disable mode to use.\n   * @param permissionName the permission name to use for querying.\n   * `undefined` means no permission is required.\n   */\n  constructor(\n    public readonly disableMode: TrackDisableMode = 'stop-tracks',\n    private readonly permissionName: PermissionName | undefined = undefined,\n  ) {}\n\n  /**\n   * The device status\n   */\n  get status() {\n    return this.getCurrentValue(this.status$);\n  }\n\n  /**\n   * The requested device status. Useful for optimistic UIs\n   */\n  get optimisticStatus() {\n    return this.getCurrentValue(this.optimisticStatus$);\n  }\n\n  /**\n   * The currently selected device\n   */\n  get selectedDevice() {\n    return this.getCurrentValue(this.selectedDevice$);\n  }\n\n  /**\n   * The current media stream, or `undefined` if the device is currently disabled.\n   */\n  get mediaStream() {\n    return this.getCurrentValue(this.mediaStream$);\n  }\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * @internal\n   * @param status\n   */\n  setStatus(status: InputDeviceStatus) {\n    this.setCurrentValue(this.statusSubject, status);\n  }\n\n  /**\n   * @internal\n   * @param pendingStatus\n   */\n  setPendingStatus(pendingStatus: InputDeviceStatus) {\n    this.setCurrentValue(this.optimisticStatusSubject, pendingStatus);\n  }\n\n  /**\n   * Updates the `mediaStream` state variable.\n   *\n   * @internal\n   * @param stream the stream to set.\n   * @param rootStream the root stream, applicable when filters are used\n   * as this is the stream that holds the actual deviceId information.\n   */\n  setMediaStream(\n    stream: MediaStream | undefined,\n    rootStream: MediaStream | undefined,\n  ) {\n    this.setCurrentValue(this.mediaStreamSubject, stream);\n    if (rootStream) {\n      this.setDevice(this.getDeviceIdFromStream(rootStream));\n    }\n  }\n\n  /**\n   * @internal\n   * @param deviceId the device id to set.\n   */\n  setDevice(deviceId: string | undefined) {\n    this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n  }\n\n  /**\n   * Gets the default constraints for the device.\n   */\n  get defaultConstraints() {\n    return this.getCurrentValue(this.defaultConstraints$);\n  }\n\n  /**\n   * Sets the default constraints for the device.\n   *\n   * @internal\n   * @param constraints the constraints to set.\n   */\n  setDefaultConstraints(constraints: C | undefined) {\n    this.setCurrentValue(this.defaultConstraintsSubject, constraints);\n  }\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  protected setCurrentValue = RxUtils.setCurrentValue;\n\n  protected abstract getDeviceIdFromStream(\n    stream: MediaStream,\n  ): string | undefined;\n}\n","import { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\nimport { InputMediaDeviceManagerState } from './InputMediaDeviceManagerState';\nimport { isReactNative } from '../helpers/platforms';\n\nexport type CameraDirection = 'front' | 'back' | undefined;\n\nexport class CameraManagerState extends InputMediaDeviceManagerState {\n  private directionSubject = new BehaviorSubject<CameraDirection>(undefined);\n\n  /**\n   * Observable that emits the preferred camera direction\n   * front - means the camera facing the user\n   * back - means the camera facing the environment\n   */\n  direction$: Observable<CameraDirection>;\n\n  constructor() {\n    super(\n      'stop-tracks',\n      // `camera` is not in the W3C standard yet,\n      // but it's supported by Chrome and Safari.\n      'camera' as PermissionName,\n    );\n    this.direction$ = this.directionSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * The preferred camera direction\n   * front - means the camera facing the user\n   * back - means the camera facing the environment\n   */\n  get direction() {\n    return this.getCurrentValue(this.direction$);\n  }\n\n  /**\n   * @internal\n   */\n  setDirection(direction: CameraDirection) {\n    this.setCurrentValue(this.directionSubject, direction);\n  }\n\n  /**\n   * @internal\n   */\n  setMediaStream(\n    stream: MediaStream | undefined,\n    rootStream: MediaStream | undefined,\n  ): void {\n    super.setMediaStream(stream, rootStream);\n    if (stream) {\n      // RN getSettings() doesn't return facingMode, so we don't verify camera direction\n      const direction = isReactNative()\n        ? this.direction\n        : stream.getVideoTracks()[0]?.getSettings().facingMode === 'environment'\n        ? 'back'\n        : 'front';\n      this.setDirection(direction);\n    }\n  }\n\n  protected getDeviceIdFromStream(stream: MediaStream): string | undefined {\n    const [track] = stream.getVideoTracks();\n    return track?.getSettings().deviceId;\n  }\n}\n","import { Observable } from 'rxjs';\nimport { Call } from '../Call';\nimport { CameraDirection, CameraManagerState } from './CameraManagerState';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { getVideoDevices, getVideoStream } from './devices';\nimport { TrackType } from '../gen/video/sfu/models/models';\n\ntype PreferredCodec = 'vp8' | 'h264' | string;\n\nexport class CameraManager extends InputMediaDeviceManager<CameraManagerState> {\n  private targetResolution = {\n    width: 1280,\n    height: 720,\n  };\n\n  /**\n   * The preferred codec for encoding the video.\n   *\n   * @internal internal use only, not part of the public API.\n   */\n  preferredCodec: PreferredCodec | undefined;\n\n  constructor(call: Call) {\n    super(call, new CameraManagerState(), TrackType.VIDEO);\n  }\n\n  /**\n   * Select the camera direction.\n   *\n   * @param direction the direction of the camera to select.\n   */\n  async selectDirection(direction: Exclude<CameraDirection, undefined>) {\n    this.state.setDirection(direction);\n    // Providing both device id and direction doesn't work, so we deselect the device\n    this.state.setDevice(undefined);\n    await this.applySettingsToStream();\n  }\n\n  /**\n   * Flips the camera direction: if it's front it will change to back, if it's back, it will change to front.\n   *\n   * Note: if there is no available camera with the desired direction, this method will do nothing.\n   * @returns\n   */\n  async flip() {\n    const newDirection = this.state.direction === 'front' ? 'back' : 'front';\n    await this.selectDirection(newDirection);\n  }\n\n  /**\n   * @internal\n   */\n  async selectTargetResolution(resolution: { width: number; height: number }) {\n    this.targetResolution.height = resolution.height;\n    this.targetResolution.width = resolution.width;\n    if (this.statusChangePromise && this.state.optimisticStatus === 'enabled') {\n      try {\n        await this.statusChangePromise;\n      } catch (error) {\n        // couldn't enable device, target resolution will be applied the next time user attempts to start the device\n        this.logger('warn', 'could not apply target resolution', error);\n      }\n    }\n    if (this.state.status === 'enabled') {\n      const { width, height } = this.state\n        .mediaStream!.getVideoTracks()[0]\n        ?.getSettings();\n      if (\n        width !== this.targetResolution.width ||\n        height !== this.targetResolution.height\n      ) {\n        await this.applySettingsToStream();\n        this.logger(\n          'debug',\n          `${width}x${height} target resolution applied to media stream`,\n        );\n      }\n    }\n  }\n\n  /**\n   * Sets the preferred codec for encoding the video.\n   *\n   * @internal internal use only, not part of the public API.\n   * @param codec the codec to use for encoding the video.\n   */\n  setPreferredCodec(codec: 'vp8' | 'h264' | string | undefined) {\n    this.preferredCodec = codec;\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return getVideoDevices();\n  }\n\n  protected getStream(\n    constraints: MediaTrackConstraints,\n  ): Promise<MediaStream> {\n    constraints.width = this.targetResolution.width;\n    constraints.height = this.targetResolution.height;\n    // We can't set both device id and facing mode\n    // Device id has higher priority\n    if (!constraints.deviceId && this.state.direction) {\n      constraints.facingMode =\n        this.state.direction === 'front' ? 'user' : 'environment';\n    }\n    return getVideoStream(constraints);\n  }\n\n  protected publishStream(stream: MediaStream): Promise<void> {\n    return this.call.publishVideoStream(stream, {\n      preferredCodec: this.preferredCodec,\n    });\n  }\n\n  protected stopPublishStream(stopTracks: boolean): Promise<void> {\n    return this.call.stopPublish(TrackType.VIDEO, stopTracks);\n  }\n}\n","import { BehaviorSubject, distinctUntilChanged, Observable } from 'rxjs';\nimport {\n  InputMediaDeviceManagerState,\n  TrackDisableMode,\n} from './InputMediaDeviceManagerState';\n\nexport class MicrophoneManagerState extends InputMediaDeviceManagerState {\n  private speakingWhileMutedSubject = new BehaviorSubject<boolean>(false);\n\n  /**\n   * An Observable that emits `true` if the user's microphone is muted but they'are speaking.\n   *\n   * This feature is not available in the React Native SDK.\n   */\n  speakingWhileMuted$: Observable<boolean>;\n\n  constructor(disableMode: TrackDisableMode) {\n    super(\n      disableMode,\n      // `microphone` is not in the W3C standard yet,\n      // but it's supported by Chrome and Safari.\n      'microphone' as PermissionName,\n    );\n\n    this.speakingWhileMuted$ = this.speakingWhileMutedSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * `true` if the user's microphone is muted but they'are speaking.\n   *\n   * This feature is not available in the React Native SDK.\n   */\n  get speakingWhileMuted() {\n    return this.getCurrentValue(this.speakingWhileMuted$);\n  }\n\n  /**\n   * @internal\n   */\n  setSpeakingWhileMuted(isSpeaking: boolean) {\n    this.setCurrentValue(this.speakingWhileMutedSubject, isSpeaking);\n  }\n\n  protected getDeviceIdFromStream(stream: MediaStream): string | undefined {\n    const [track] = stream.getAudioTracks();\n    return track?.getSettings().deviceId;\n  }\n}\n","export type SoundDetectorOptions = {\n  /**\n   * Defines how often the detector should check whether a sound is present.\n   * Defaults to 500ms.\n   */\n  detectionFrequencyInMs?: number;\n\n  /**\n   * Defines the audio level threshold before a \"change\" is emitted.\n   * Defaults to 150. This value should be in the range of 0-255.\n   */\n  audioLevelThreshold?: number;\n\n  /**\n   * See https://developer.mozilla.org/en-US/docs/web/api/analysernode/fftsize\n   *\n   * Defaults to 128.\n   */\n  fftSize?: number;\n\n  /**\n   * Defines whether the provided audio stream should be stopped (destroyed)\n   * when the sound detector is stopped.\n   *\n   * Defaults to `true`.\n   */\n  destroyStreamOnStop?: boolean;\n};\n\nexport type SoundDetectorState = {\n  isSoundDetected: boolean;\n  /**\n   * Represented as percentage (0-100) where 100% is defined by `audioLevelThreshold` property.\n   * Decrease time between samples (to 50-100ms) with `detectionFrequencyInMs` property.\n   */\n  audioLevel: number;\n};\n\nexport type SoundStateChangeHandler = (state: SoundDetectorState) => void;\n\nconst DETECTION_FREQUENCY_IN_MS = 500;\nconst AUDIO_LEVEL_THRESHOLD = 150;\nconst FFT_SIZE = 128;\n\n/**\n * Creates a new sound detector.\n *\n * @param audioStream the audio stream to observe. Depending on the provided configuration, this stream might be destroyed when the sound detector is stopped.\n * @param onSoundDetectedStateChanged a callback which is called when the sound state changes.\n * @param options custom options for the sound detector.\n * @returns a clean-up function which once invoked stops the sound detector.\n */\nexport const createSoundDetector = (\n  audioStream: MediaStream,\n  onSoundDetectedStateChanged: SoundStateChangeHandler,\n  options: SoundDetectorOptions = {},\n) => {\n  const {\n    detectionFrequencyInMs = DETECTION_FREQUENCY_IN_MS,\n    audioLevelThreshold = AUDIO_LEVEL_THRESHOLD,\n    fftSize = FFT_SIZE,\n    destroyStreamOnStop = true,\n  } = options;\n\n  const audioContext = new AudioContext();\n  const analyser = audioContext.createAnalyser();\n  analyser.fftSize = fftSize;\n\n  const microphone = audioContext.createMediaStreamSource(audioStream);\n  microphone.connect(analyser);\n\n  const intervalId = setInterval(() => {\n    const data = new Uint8Array(analyser.frequencyBinCount);\n    analyser.getByteFrequencyData(data);\n\n    const isSoundDetected = data.some((value) => value >= audioLevelThreshold);\n\n    const averagedDataValue = data.reduce((pv, cv) => pv + cv, 0) / data.length;\n\n    const percentage =\n      averagedDataValue > audioLevelThreshold\n        ? 100\n        : Math.round((averagedDataValue / audioLevelThreshold) * 100);\n\n    // When the track is disabled, it takes time for the buffer to empty\n    // This check will ensure that we don't send anything if the track is disabled\n    if (audioStream.getAudioTracks()[0]?.enabled) {\n      onSoundDetectedStateChanged({ isSoundDetected, audioLevel: percentage });\n    } else {\n      onSoundDetectedStateChanged({ isSoundDetected: false, audioLevel: 0 });\n    }\n  }, detectionFrequencyInMs);\n\n  return async function stop() {\n    clearInterval(intervalId);\n\n    // clean-up the AudioContext elements\n    microphone.disconnect();\n    analyser.disconnect();\n    if (audioContext.state !== 'closed') {\n      await audioContext.close();\n    }\n\n    // stop the stream\n    if (destroyStreamOnStop) {\n      audioStream.getTracks().forEach((track) => {\n        track.stop();\n        audioStream.removeTrack(track);\n      });\n    }\n  };\n};\n","import { BaseStats } from '../stats';\nimport { SoundStateChangeHandler } from './sound-detector';\nimport { flatten } from '../stats/utils';\n\nconst AUDIO_LEVEL_THRESHOLD = 0.2;\n\nexport class RNSpeechDetector {\n  private pc1 = new RTCPeerConnection({});\n  private pc2 = new RTCPeerConnection({});\n  private intervalId: NodeJS.Timer | undefined;\n\n  /**\n   * Starts the speech detection.\n   */\n  public async start() {\n    try {\n      const audioStream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n      });\n\n      this.pc1.addEventListener('icecandidate', async (e) => {\n        await this.pc2.addIceCandidate(\n          e.candidate as RTCIceCandidateInit | undefined,\n        );\n      });\n      this.pc2.addEventListener('icecandidate', async (e) => {\n        await this.pc1.addIceCandidate(\n          e.candidate as RTCIceCandidateInit | undefined,\n        );\n      });\n\n      audioStream\n        .getTracks()\n        .forEach((track) => this.pc1.addTrack(track, audioStream));\n      const offer = await this.pc1.createOffer({});\n      await this.pc2.setRemoteDescription(offer);\n      await this.pc1.setLocalDescription(offer);\n      const answer = await this.pc2.createAnswer();\n      await this.pc1.setRemoteDescription(answer);\n      await this.pc2.setLocalDescription(answer);\n      const audioTracks = audioStream.getAudioTracks();\n      // We need to mute the audio track for this temporary stream, or else you will hear yourself twice while in the call.\n      audioTracks.forEach((track) => (track.enabled = false));\n    } catch (error) {\n      console.error(\n        'Error connecting and negotiating between PeerConnections:',\n        error,\n      );\n    }\n  }\n\n  /**\n   * Stops the speech detection and releases all allocated resources.\n   */\n  public stop() {\n    this.pc1.close();\n    this.pc2.close();\n    if (this.intervalId) {\n      clearInterval(this.intervalId);\n    }\n  }\n\n  /**\n   * Public method that detects the audio levels and returns the status.\n   */\n  public onSpeakingDetectedStateChange(\n    onSoundDetectedStateChanged: SoundStateChangeHandler,\n  ) {\n    this.intervalId = setInterval(async () => {\n      const stats = (await this.pc1.getStats()) as RTCStatsReport;\n      const report = flatten(stats);\n      // Audio levels are present inside stats of type `media-source` and of kind `audio`\n      const audioMediaSourceStats = report.find(\n        (stat) =>\n          stat.type === 'media-source' &&\n          (stat as RTCRtpStreamStats).kind === 'audio',\n      ) as BaseStats;\n      if (audioMediaSourceStats) {\n        const { audioLevel } = audioMediaSourceStats;\n        if (audioLevel) {\n          if (audioLevel >= AUDIO_LEVEL_THRESHOLD) {\n            onSoundDetectedStateChanged({\n              isSoundDetected: true,\n              audioLevel,\n            });\n          } else {\n            onSoundDetectedStateChanged({\n              isSoundDetected: false,\n              audioLevel: 0,\n            });\n          }\n        }\n      }\n    }, 1000);\n\n    return () => {\n      clearInterval(this.intervalId);\n    };\n  }\n}\n","import { combineLatest, Observable } from 'rxjs';\nimport type { INoiseCancellation } from '@stream-io/audio-filters-web';\nimport { Call } from '../Call';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { MicrophoneManagerState } from './MicrophoneManagerState';\nimport { TrackDisableMode } from './InputMediaDeviceManagerState';\nimport { getAudioDevices, getAudioStream } from './devices';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { createSoundDetector } from '../helpers/sound-detector';\nimport { isReactNative } from '../helpers/platforms';\nimport {\n  NoiseCancellationSettingsModeEnum,\n  OwnCapability,\n} from '../gen/coordinator';\nimport { CallingState } from '../store';\nimport { createSubscription } from '../store/rxUtils';\nimport { RNSpeechDetector } from '../helpers/RNSpeechDetector';\n\nexport class MicrophoneManager extends InputMediaDeviceManager<MicrophoneManagerState> {\n  private speakingWhileMutedNotificationEnabled = true;\n  private soundDetectorCleanup?: Function;\n  private rnSpeechDetector: RNSpeechDetector | undefined;\n  private noiseCancellation: INoiseCancellation | undefined;\n  private noiseCancellationChangeUnsubscribe: (() => void) | undefined;\n  private noiseCancellationRegistration?: Promise<() => Promise<void>>;\n\n  constructor(\n    call: Call,\n    disableMode: TrackDisableMode = isReactNative()\n      ? 'disable-tracks'\n      : 'stop-tracks',\n  ) {\n    super(call, new MicrophoneManagerState(disableMode), TrackType.AUDIO);\n\n    this.subscriptions.push(\n      createSubscription(\n        combineLatest([\n          this.call.state.callingState$,\n          this.call.state.ownCapabilities$,\n          this.state.selectedDevice$,\n          this.state.status$,\n        ]),\n        async ([callingState, ownCapabilities, deviceId, status]) => {\n          if (callingState === CallingState.LEFT) {\n            await this.stopSpeakingWhileMutedDetection();\n          }\n          if (callingState !== CallingState.JOINED) return;\n          if (!this.speakingWhileMutedNotificationEnabled) return;\n\n          if (ownCapabilities.includes(OwnCapability.SEND_AUDIO)) {\n            if (status === 'disabled') {\n              await this.startSpeakingWhileMutedDetection(deviceId);\n            } else {\n              await this.stopSpeakingWhileMutedDetection();\n            }\n          } else {\n            await this.stopSpeakingWhileMutedDetection();\n          }\n        },\n      ),\n    );\n\n    this.subscriptions.push(\n      createSubscription(this.call.state.callingState$, (callingState) => {\n        // do nothing when noise filtering isn't turned on\n        if (!this.noiseCancellationRegistration || !this.noiseCancellation)\n          return;\n\n        const autoOn =\n          this.call.state.settings?.audio.noise_cancellation?.mode ===\n          NoiseCancellationSettingsModeEnum.AUTO_ON;\n\n        if (autoOn && callingState === CallingState.JOINED) {\n          this.noiseCancellationRegistration\n            .then(() => this.noiseCancellation?.enable())\n            .catch((err) => {\n              this.logger('warn', `Failed to enable noise cancellation`, err);\n              return this.call.notifyNoiseCancellationStopped();\n            });\n        } else if (callingState === CallingState.LEFT) {\n          this.noiseCancellationRegistration\n            .then(() => this.noiseCancellation?.disable())\n            .catch((err) => {\n              this.logger('warn', `Failed to disable noise cancellation`, err);\n            });\n        }\n      }),\n    );\n  }\n\n  /**\n   * Enables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   * @param noiseCancellation - a noise cancellation instance to use.\n   */\n  async enableNoiseCancellation(noiseCancellation: INoiseCancellation) {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n\n    const { ownCapabilities, settings } = this.call.state;\n    const hasNoiseCancellationCapability = ownCapabilities.includes(\n      OwnCapability.ENABLE_NOISE_CANCELLATION,\n    );\n    if (!hasNoiseCancellationCapability) {\n      throw new Error('Noise cancellation is not available.');\n    }\n    const noiseCancellationSettings = settings?.audio.noise_cancellation;\n    if (\n      !noiseCancellationSettings ||\n      noiseCancellationSettings.mode ===\n        NoiseCancellationSettingsModeEnum.DISABLED\n    ) {\n      throw new Error('Noise cancellation is disabled for this call type.');\n    }\n    try {\n      this.noiseCancellation = noiseCancellation;\n\n      // listen for change events and notify the SFU\n      this.noiseCancellationChangeUnsubscribe = this.noiseCancellation.on(\n        'change',\n        (enabled: boolean) => {\n          if (enabled) {\n            this.call.notifyNoiseCancellationStarting().catch((err) => {\n              this.logger('warn', `notifyNoiseCancellationStart failed`, err);\n            });\n          } else {\n            this.call.notifyNoiseCancellationStopped().catch((err) => {\n              this.logger('warn', `notifyNoiseCancellationStop failed`, err);\n            });\n          }\n        },\n      );\n\n      this.noiseCancellationRegistration = this.registerFilter(\n        noiseCancellation.toFilter(),\n      );\n      await this.noiseCancellationRegistration;\n\n      // handles an edge case where a noise cancellation is enabled after\n      // the participant as joined the call -> we immediately enable NC\n      if (\n        noiseCancellationSettings.mode ===\n          NoiseCancellationSettingsModeEnum.AUTO_ON &&\n        this.call.state.callingState === CallingState.JOINED\n      ) {\n        noiseCancellation.enable();\n      }\n    } catch (e) {\n      this.logger('warn', 'Failed to enable noise cancellation', e);\n      await this.disableNoiseCancellation().catch((err) => {\n        this.logger('warn', 'Failed to disable noise cancellation', err);\n      });\n    }\n  }\n\n  /**\n   * Disables noise cancellation for the microphone.\n   *\n   * Note: not supported in React Native.\n   */\n  async disableNoiseCancellation() {\n    if (isReactNative()) {\n      throw new Error('Noise cancellation is not supported in React Native');\n    }\n    await this.noiseCancellationRegistration\n      ?.then((unregister) => unregister())\n      .then(() => this.noiseCancellation?.disable())\n      .then(() => this.noiseCancellationChangeUnsubscribe?.())\n      .catch((err) => {\n        this.logger('warn', 'Failed to unregister noise cancellation', err);\n      });\n\n    await this.call.notifyNoiseCancellationStopped();\n  }\n\n  /**\n   * Enables speaking while muted notification.\n   */\n  async enableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = true;\n    if (this.state.status === 'disabled') {\n      await this.startSpeakingWhileMutedDetection(this.state.selectedDevice);\n    }\n  }\n\n  /**\n   * Disables speaking while muted notification.\n   */\n  async disableSpeakingWhileMutedNotification() {\n    this.speakingWhileMutedNotificationEnabled = false;\n    await this.stopSpeakingWhileMutedDetection();\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return getAudioDevices();\n  }\n\n  protected getStream(\n    constraints: MediaTrackConstraints,\n  ): Promise<MediaStream> {\n    return getAudioStream(constraints);\n  }\n\n  protected publishStream(stream: MediaStream): Promise<void> {\n    return this.call.publishAudioStream(stream);\n  }\n\n  protected stopPublishStream(stopTracks: boolean): Promise<void> {\n    return this.call.stopPublish(TrackType.AUDIO, stopTracks);\n  }\n\n  private async startSpeakingWhileMutedDetection(deviceId?: string) {\n    await this.stopSpeakingWhileMutedDetection();\n    if (isReactNative()) {\n      this.rnSpeechDetector = new RNSpeechDetector();\n      await this.rnSpeechDetector.start();\n      const unsubscribe = this.rnSpeechDetector?.onSpeakingDetectedStateChange(\n        (event) => {\n          this.state.setSpeakingWhileMuted(event.isSoundDetected);\n        },\n      );\n      this.soundDetectorCleanup = () => {\n        unsubscribe();\n        this.rnSpeechDetector?.stop();\n        this.rnSpeechDetector = undefined;\n      };\n    } else {\n      // Need to start a new stream that's not connected to publisher\n      const stream = await this.getStream({\n        deviceId,\n      });\n      this.soundDetectorCleanup = createSoundDetector(stream, (event) => {\n        this.state.setSpeakingWhileMuted(event.isSoundDetected);\n      });\n    }\n  }\n\n  private async stopSpeakingWhileMutedDetection() {\n    if (!this.soundDetectorCleanup) return;\n    this.state.setSpeakingWhileMuted(false);\n    try {\n      await this.soundDetectorCleanup();\n    } finally {\n      this.soundDetectorCleanup = undefined;\n    }\n  }\n}\n","import { BehaviorSubject, distinctUntilChanged } from 'rxjs';\nimport { InputMediaDeviceManagerState } from './InputMediaDeviceManagerState';\nimport { ScreenShareSettings } from '../types';\n\nexport class ScreenShareState extends InputMediaDeviceManagerState<DisplayMediaStreamOptions> {\n  private audioEnabledSubject = new BehaviorSubject<boolean>(true);\n  private settingsSubject = new BehaviorSubject<\n    ScreenShareSettings | undefined\n  >(undefined);\n\n  /**\n   * An Observable that emits the current screen share audio status.\n   */\n  audioEnabled$ = this.audioEnabledSubject\n    .asObservable()\n    .pipe(distinctUntilChanged());\n\n  /**\n   * An Observable that emits the current screen share settings.\n   */\n  settings$ = this.settingsSubject.asObservable();\n\n  /**\n   * @internal\n   */\n  protected getDeviceIdFromStream = (\n    stream: MediaStream,\n  ): string | undefined => {\n    const [track] = stream.getTracks();\n    return track?.getSettings().deviceId;\n  };\n\n  /**\n   * The current screen share audio status.\n   */\n  get audioEnabled() {\n    return this.getCurrentValue(this.audioEnabled$);\n  }\n\n  /**\n   * Set the current screen share audio status.\n   */\n  setAudioEnabled(isEnabled: boolean) {\n    this.setCurrentValue(this.audioEnabledSubject, isEnabled);\n  }\n\n  /**\n   * The current screen share settings.\n   */\n  get settings() {\n    return this.getCurrentValue(this.settings$);\n  }\n\n  /**\n   * Set the current screen share settings.\n   *\n   * @param settings the screen share settings to set.\n   */\n  setSettings(settings: ScreenShareSettings | undefined) {\n    this.setCurrentValue(this.settingsSubject, settings);\n  }\n}\n","import { Observable, of } from 'rxjs';\nimport { InputMediaDeviceManager } from './InputMediaDeviceManager';\nimport { ScreenShareState } from './ScreenShareState';\nimport { Call } from '../Call';\nimport { TrackType } from '../gen/video/sfu/models/models';\nimport { getScreenShareStream } from './devices';\nimport { ScreenShareSettings } from '../types';\nimport { createSubscription } from '../store/rxUtils';\n\nexport class ScreenShareManager extends InputMediaDeviceManager<\n  ScreenShareState,\n  DisplayMediaStreamOptions\n> {\n  constructor(call: Call) {\n    super(call, new ScreenShareState(), TrackType.SCREEN_SHARE);\n\n    this.subscriptions.push(\n      createSubscription(call.state.settings$, (settings) => {\n        const maybeTargetResolution = settings?.screensharing.target_resolution;\n\n        if (maybeTargetResolution) {\n          this.setDefaultConstraints({\n            video: {\n              width: maybeTargetResolution.width,\n              height: maybeTargetResolution.height,\n            },\n          });\n        }\n      }),\n    );\n  }\n\n  /**\n   * Will enable screen share audio options on supported platforms.\n   *\n   * Note: for ongoing screen share, audio won't be enabled until you\n   * re-publish the screen share stream.\n   */\n  enableScreenShareAudio(): void {\n    this.state.setAudioEnabled(true);\n  }\n\n  /**\n   * Will disable screen share audio options on supported platforms.\n   */\n  async disableScreenShareAudio(): Promise<void> {\n    this.state.setAudioEnabled(false);\n    if (this.call.publisher?.isPublishing(TrackType.SCREEN_SHARE_AUDIO)) {\n      await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, true);\n    }\n  }\n\n  /**\n   * Returns the current screen share settings.\n   */\n  getSettings(): ScreenShareSettings | undefined {\n    return this.state.settings;\n  }\n\n  /**\n   * Sets the current screen share settings.\n   *\n   * @param settings the settings to set.\n   */\n  setSettings(settings: ScreenShareSettings | undefined): void {\n    this.state.setSettings(settings);\n  }\n\n  protected getDevices(): Observable<MediaDeviceInfo[]> {\n    return of([]); // there are no devices to be listed for Screen Share\n  }\n\n  protected getStream(\n    constraints: DisplayMediaStreamOptions,\n  ): Promise<MediaStream> {\n    if (!this.state.audioEnabled) {\n      constraints.audio = false;\n    }\n    return getScreenShareStream(constraints);\n  }\n\n  protected publishStream(stream: MediaStream): Promise<void> {\n    return this.call.publishScreenShareStream(stream, {\n      screenShareSettings: this.state.settings,\n    });\n  }\n\n  protected async stopPublishStream(stopTracks: boolean): Promise<void> {\n    await this.call.stopPublish(TrackType.SCREEN_SHARE, stopTracks);\n    await this.call.stopPublish(TrackType.SCREEN_SHARE_AUDIO, stopTracks);\n  }\n\n  /**\n   * Overrides the default `select` method to throw an error.\n   *\n   * @param deviceId ignored.\n   */\n  async select(deviceId: string | undefined): Promise<void> {\n    throw new Error('This method is not supported in for Screen Share');\n  }\n}\n","import { BehaviorSubject, Observable, distinctUntilChanged } from 'rxjs';\nimport { RxUtils } from '../store';\nimport { checkIfAudioOutputChangeSupported } from './devices';\n\nexport class SpeakerState {\n  protected selectedDeviceSubject = new BehaviorSubject<string>('');\n  protected volumeSubject = new BehaviorSubject<number>(1);\n  /**\n   * [Tells if the browser supports audio output change on 'audio' elements](https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement/setSinkId).\n   */\n  readonly isDeviceSelectionSupported = checkIfAudioOutputChangeSupported();\n\n  /**\n   * An Observable that emits the currently selected device\n   *\n   * Note: this feature is not supported in React Native\n   */\n  selectedDevice$: Observable<string>;\n\n  /**\n   * An Observable that emits the currently selected volume\n   *\n   * Note: this feature is not supported in React Native\n   */\n  volume$: Observable<number>;\n\n  constructor() {\n    this.selectedDevice$ = this.selectedDeviceSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n    this.volume$ = this.volumeSubject\n      .asObservable()\n      .pipe(distinctUntilChanged());\n  }\n\n  /**\n   * The currently selected device\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get selectedDevice() {\n    return this.getCurrentValue(this.selectedDevice$);\n  }\n\n  /**\n   * The currently selected volume\n   *\n   * Note: this feature is not supported in React Native\n   */\n  get volume() {\n    return this.getCurrentValue(this.volume$);\n  }\n\n  /**\n   * Gets the current value of an observable, or undefined if the observable has\n   * not emitted a value yet.\n   *\n   * @param observable$ the observable to get the value from.\n   */\n  getCurrentValue = RxUtils.getCurrentValue;\n\n  /**\n   * @internal\n   * @param deviceId\n   */\n  setDevice(deviceId: string) {\n    this.setCurrentValue(this.selectedDeviceSubject, deviceId);\n  }\n\n  /**\n   * @internal\n   * @param volume\n   */\n  setVolume(volume: number) {\n    this.setCurrentValue(this.volumeSubject, volume);\n  }\n\n  /**\n   * Updates the value of the provided Subject.\n   * An `update` can either be a new value or a function which takes\n   * the current value and returns a new value.\n   *\n   * @internal\n   *\n   * @param subject the subject to update.\n   * @param update the update to apply to the subject.\n   * @return the updated value.\n   */\n  protected setCurrentValue = RxUtils.setCurrentValue;\n}\n","import { combineLatest, Subscription } from 'rxjs';\nimport { Call } from '../Call';\nimport { isReactNative } from '../helpers/platforms';\nimport { SpeakerState } from './SpeakerState';\nimport { deviceIds$, getAudioOutputDevices } from './devices';\n\nexport class SpeakerManager {\n  public readonly state = new SpeakerState();\n  private subscriptions: Subscription[] = [];\n  private readonly call: Call;\n\n  constructor(call: Call) {\n    this.call = call;\n    if (deviceIds$ && !isReactNative()) {\n      this.subscriptions.push(\n        combineLatest([deviceIds$!, this.state.selectedDevice$]).subscribe(\n          ([devices, deviceId]) => {\n            if (!deviceId) {\n              return;\n            }\n            const device = devices.find(\n              (d) => d.deviceId === deviceId && d.kind === 'audiooutput',\n            );\n            if (!device) {\n              this.select('');\n            }\n          },\n        ),\n      );\n    }\n  }\n\n  /**\n   * Lists the available audio output devices\n   *\n   * Note: It prompts the user for a permission to use devices (if not already granted)\n   * Note: This method is not supported in React Native\n   *\n   * @returns an Observable that will be updated if a device is connected or disconnected\n   */\n  listDevices() {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    return getAudioOutputDevices();\n  }\n\n  /**\n   * Select a device.\n   *\n   * Note: This method is not supported in React Native\n   *\n   * @param deviceId empty string means the system default\n   */\n  select(deviceId: string) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    this.state.setDevice(deviceId);\n  }\n\n  /**\n   * Disposes the manager.\n   *\n   * @internal\n   */\n  dispose = () => {\n    this.subscriptions.forEach((s) => s.unsubscribe());\n  };\n\n  /**\n   * Set the volume of the audio elements\n   * @param volume a number between 0 and 1.\n   *\n   * Note: This method is not supported in React Native\n   */\n  setVolume(volume: number) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1');\n    }\n    this.state.setVolume(volume);\n  }\n\n  /**\n   * Set the volume of a participant.\n   *\n   * Note: This method is not supported in React Native.\n   *\n   * @param sessionId the participant's session id.\n   * @param volume a number between 0 and 1. Set it to `undefined` to use the default volume.\n   */\n  setParticipantVolume(sessionId: string, volume: number | undefined) {\n    if (isReactNative()) {\n      throw new Error(\n        'This feature is not supported in React Native. Please visit https://getstream.io/video/docs/reactnative/core/camera-and-microphone/#speaker-management for more details',\n      );\n    }\n    if (volume && (volume < 0 || volume > 1)) {\n      throw new Error('Volume must be between 0 and 1, or undefined');\n    }\n    this.call.state.updateParticipant(sessionId, { audioVolume: volume });\n  }\n}\n","import { StreamSfuClient } from './StreamSfuClient';\nimport {\n  Dispatcher,\n  getGenericSdp,\n  isSfuEvent,\n  Publisher,\n  Subscriber,\n} from './rtc';\nimport { muteTypeToTrackType } from './rtc/helpers/tracks';\nimport {\n  hasScreenShare,\n  hasScreenShareAudio,\n  hasVideo,\n} from './helpers/participantUtils';\nimport { GoAwayReason, TrackType } from './gen/video/sfu/models/models';\nimport {\n  registerEventHandlers,\n  registerRingingCallEventHandlers,\n} from './events/callEventHandlers';\nimport {\n  CallingState,\n  CallState,\n  StreamVideoWriteableStateStore,\n} from './store';\nimport { createSubscription, getCurrentValue } from './store/rxUtils';\nimport {\n  AcceptCallResponse,\n  BlockUserRequest,\n  BlockUserResponse,\n  CollectUserFeedbackRequest,\n  CollectUserFeedbackResponse,\n  EndCallResponse,\n  GetCallResponse,\n  GetCallStatsResponse,\n  GetOrCreateCallRequest,\n  GetOrCreateCallResponse,\n  GoLiveRequest,\n  GoLiveResponse,\n  ListRecordingsResponse,\n  ListTranscriptionsResponse,\n  MuteUsersRequest,\n  MuteUsersResponse,\n  OwnCapability,\n  PinRequest,\n  PinResponse,\n  QueryMembersRequest,\n  QueryMembersResponse,\n  RejectCallResponse,\n  RequestPermissionRequest,\n  RequestPermissionResponse,\n  SendEventRequest,\n  SendEventResponse,\n  SendReactionRequest,\n  SendReactionResponse,\n  SFUResponse,\n  StartHLSBroadcastingResponse,\n  StartRecordingRequest,\n  StartRecordingResponse,\n  StartTranscriptionRequest,\n  StartTranscriptionResponse,\n  StatsOptions,\n  StopHLSBroadcastingResponse,\n  StopLiveResponse,\n  StopRecordingResponse,\n  StopTranscriptionResponse,\n  UnblockUserRequest,\n  UnblockUserResponse,\n  UnpinRequest,\n  UnpinResponse,\n  UpdateCallMembersRequest,\n  UpdateCallMembersResponse,\n  UpdateCallRequest,\n  UpdateCallResponse,\n  UpdateUserPermissionsRequest,\n  UpdateUserPermissionsResponse,\n} from './gen/coordinator';\nimport { join } from './rtc/flows/join';\nimport {\n  AudioTrackType,\n  CallConstructor,\n  CallLeaveOptions,\n  DebounceType,\n  JoinCallData,\n  PublishOptions,\n  StreamVideoParticipant,\n  StreamVideoParticipantPatches,\n  SubscriptionChanges,\n  TrackMuteType,\n  VideoTrackType,\n  VisibilityState,\n} from './types';\nimport {\n  BehaviorSubject,\n  debounce,\n  filter,\n  map,\n  Subject,\n  takeWhile,\n  timer,\n} from 'rxjs';\nimport { TrackSubscriptionDetails } from './gen/video/sfu/signal_rpc/signal';\nimport {\n  JoinResponse,\n  Migration,\n  VideoLayerSetting,\n} from './gen/video/sfu/event/events';\nimport { Timestamp } from './gen/google/protobuf/timestamp';\nimport { createStatsReporter, SfuStatsReporter, StatsReporter } from './stats';\nimport { DynascaleManager } from './helpers/DynascaleManager';\nimport { PermissionsContext } from './permissions';\nimport { CallTypes } from './CallType';\nimport { StreamClient } from './coordinator/connection/client';\nimport {\n  KnownCodes,\n  retryInterval,\n  sleep,\n} from './coordinator/connection/utils';\nimport {\n  AllCallEvents,\n  CallEventListener,\n  Logger,\n  StreamCallEvent,\n} from './coordinator/connection/types';\nimport { getClientDetails } from './client-details';\nimport { getLogger } from './logger';\nimport {\n  CameraDirection,\n  CameraManager,\n  MicrophoneManager,\n  ScreenShareManager,\n  SpeakerManager,\n} from './devices';\nimport { getSdkSignature } from './stats/utils';\n\n/**\n * An object representation of a `Call`.\n */\nexport class Call {\n  /**\n   * The type of the call.\n   */\n  readonly type: string;\n\n  /**\n   * The ID of the call.\n   */\n  readonly id: string;\n\n  /**\n   * The call CID.\n   */\n  readonly cid: string;\n\n  /**\n   * The state of this call.\n   */\n  readonly state = new CallState();\n\n  /**\n   * Flag indicating whether this call is \"watched\" and receives\n   * updates from the backend.\n   */\n  watching: boolean;\n\n  /**\n   * Device manager for the camera\n   */\n  readonly camera: CameraManager;\n\n  /**\n   * Device manager for the microphone.\n   */\n  readonly microphone: MicrophoneManager;\n\n  /**\n   * Device manager for the speaker.\n   */\n  readonly speaker: SpeakerManager;\n\n  /**\n   * Device manager for the screen.\n   */\n  readonly screenShare: ScreenShareManager;\n\n  /**\n   * The DynascaleManager instance.\n   */\n  readonly dynascaleManager = new DynascaleManager(this);\n\n  subscriber?: Subscriber;\n  publisher?: Publisher;\n\n  /**\n   * Flag telling whether this call is a \"ringing\" call.\n   */\n  private readonly ringingSubject: Subject<boolean>;\n\n  /**\n   * The permissions context of this call.\n   */\n  readonly permissionsContext = new PermissionsContext();\n  readonly logger: Logger;\n\n  /**\n   * The event dispatcher instance dedicated to this Call instance.\n   * @private\n   */\n  private readonly dispatcher = new Dispatcher();\n\n  private trackSubscriptionsSubject = new BehaviorSubject<{\n    type: DebounceType;\n    data: TrackSubscriptionDetails[];\n  }>({ type: DebounceType.MEDIUM, data: [] });\n\n  private statsReporter?: StatsReporter;\n  private sfuStatsReporter?: SfuStatsReporter;\n  private dropTimeout: ReturnType<typeof setTimeout> | undefined;\n\n  private readonly clientStore: StreamVideoWriteableStateStore;\n  public readonly streamClient: StreamClient;\n  private sfuClient?: StreamSfuClient;\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 10;\n  private isLeaving = false;\n\n  /**\n   * A list hooks/functions to invoke when the call is left.\n   * A typical use case is to clean up some global event handlers.\n   * @private\n   */\n  private readonly leaveCallHooks: Set<Function> = new Set();\n\n  private readonly streamClientBasePath: string;\n  private streamClientEventHandlers = new Map<Function, () => void>();\n\n  /**\n   * Constructs a new `Call` instance.\n   *\n   * NOTE: Don't call the constructor directly, instead\n   * Use the [`StreamVideoClient.call`](./StreamVideoClient.md/#call)\n   * method to construct a `Call` instance.\n   */\n  constructor({\n    type,\n    id,\n    streamClient,\n    members,\n    ownCapabilities,\n    sortParticipantsBy,\n    clientStore,\n    ringing = false,\n    watching = false,\n  }: CallConstructor) {\n    this.type = type;\n    this.id = id;\n    this.cid = `${type}:${id}`;\n    this.ringingSubject = new BehaviorSubject(ringing);\n    this.watching = watching;\n    this.streamClient = streamClient;\n    this.clientStore = clientStore;\n    this.streamClientBasePath = `/call/${this.type}/${this.id}`;\n    this.logger = getLogger(['Call']);\n\n    const callTypeConfig = CallTypes.get(type);\n    const participantSorter =\n      sortParticipantsBy || callTypeConfig.options.sortParticipantsBy;\n    if (participantSorter) {\n      this.state.setSortParticipantsBy(participantSorter);\n    }\n\n    this.state.setMembers(members || []);\n    this.state.setOwnCapabilities(ownCapabilities || []);\n    this.state.setCallingState(\n      ringing ? CallingState.RINGING : CallingState.IDLE,\n    );\n\n    this.on('all', (event) => {\n      // update state with the latest event data\n      this.state.updateFromEvent(event);\n    });\n\n    this.leaveCallHooks.add(\n      registerEventHandlers(this, this.state, this.dispatcher),\n    );\n    this.registerEffects();\n\n    this.leaveCallHooks.add(\n      createSubscription(\n        this.trackSubscriptionsSubject.pipe(\n          debounce((v) => timer(v.type)),\n          map((v) => v.data),\n        ),\n        (subscriptions) =>\n          this.sfuClient?.updateSubscriptions(subscriptions).catch((err) => {\n            this.logger('debug', `Failed to update track subscriptions`, err);\n          }),\n      ),\n    );\n\n    this.camera = new CameraManager(this);\n    this.microphone = new MicrophoneManager(this);\n    this.speaker = new SpeakerManager(this);\n    this.screenShare = new ScreenShareManager(this);\n  }\n\n  private registerEffects() {\n    this.leaveCallHooks.add(\n      // handles updating the permissions context when the settings change.\n      createSubscription(this.state.settings$, (settings) => {\n        if (!settings) return;\n        this.permissionsContext.setCallSettings(settings);\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // handle the case when the user permissions are modified.\n      createSubscription(this.state.ownCapabilities$, (ownCapabilities) => {\n        // update the permission context.\n        this.permissionsContext.setPermissions(ownCapabilities);\n\n        if (!this.publisher) return;\n\n        // check if the user still has publishing permissions and stop publishing if not.\n        const permissionToTrackType = {\n          [OwnCapability.SEND_AUDIO]: TrackType.AUDIO,\n          [OwnCapability.SEND_VIDEO]: TrackType.VIDEO,\n          [OwnCapability.SCREENSHARE]: TrackType.SCREEN_SHARE,\n        };\n        for (const [permission, trackType] of Object.entries(\n          permissionToTrackType,\n        )) {\n          const hasPermission = this.permissionsContext.hasPermission(\n            permission as OwnCapability,\n          );\n          if (\n            !hasPermission &&\n            (this.publisher.isPublishing(trackType) ||\n              this.publisher.isLive(trackType))\n          ) {\n            // Stop tracks, then notify device manager\n            this.stopPublish(trackType)\n              .catch((err) => {\n                this.logger(\n                  'error',\n                  `Error stopping publish ${trackType}`,\n                  err,\n                );\n              })\n              .then(() => {\n                if (\n                  trackType === TrackType.VIDEO &&\n                  this.camera.state.status === 'enabled'\n                ) {\n                  this.camera\n                    .disable()\n                    .catch((err) =>\n                      this.logger(\n                        'error',\n                        `Error disabling camera after permission revoked`,\n                        err,\n                      ),\n                    );\n                }\n                if (\n                  trackType === TrackType.AUDIO &&\n                  this.microphone.state.status === 'enabled'\n                ) {\n                  this.microphone\n                    .disable()\n                    .catch((err) =>\n                      this.logger(\n                        'error',\n                        `Error disabling microphone after permission revoked`,\n                        err,\n                      ),\n                    );\n                }\n              });\n          }\n        }\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // handles the case when the user is blocked by the call owner.\n      createSubscription(this.state.blockedUserIds$, async (blockedUserIds) => {\n        if (!blockedUserIds || blockedUserIds.length === 0) return;\n        const currentUserId = this.currentUserId;\n        if (currentUserId && blockedUserIds.includes(currentUserId)) {\n          this.logger('info', 'Leaving call because of being blocked');\n          await this.leave({ reason: 'user blocked' });\n        }\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // watch for auto drop cancellation\n      createSubscription(this.state.callingState$, (callingState) => {\n        if (!this.ringing) return;\n        if (\n          callingState === CallingState.JOINED ||\n          callingState === CallingState.JOINING ||\n          callingState === CallingState.LEFT\n        ) {\n          clearTimeout(this.dropTimeout);\n          this.dropTimeout = undefined;\n        }\n      }),\n    );\n\n    this.leaveCallHooks.add(\n      // \"ringing\" mode effects and event handlers\n      createSubscription(this.ringingSubject, (isRinging) => {\n        if (!isRinging) return;\n        this.scheduleAutoDrop();\n        if (this.state.callingState === CallingState.IDLE) {\n          this.state.setCallingState(CallingState.RINGING);\n        }\n        this.leaveCallHooks.add(registerRingingCallEventHandlers(this));\n      }),\n    );\n  }\n\n  /**\n   * You can subscribe to WebSocket events provided by the API. To remove a subscription, call the `off` method.\n   * Please note that subscribing to WebSocket events is an advanced use-case.\n   * For most use-cases, it should be enough to watch for state changes.\n   *\n   * @param eventName the event name.\n   * @param fn the event handler.\n   */\n  on = <E extends keyof AllCallEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    if (isSfuEvent(eventName)) {\n      return this.dispatcher.on(eventName, fn);\n    }\n\n    const offHandler = this.streamClient.on(eventName, (e) => {\n      const event = e as StreamCallEvent;\n      if (event.call_cid && event.call_cid === this.cid) {\n        fn(event as AllCallEvents[E]);\n      }\n    });\n\n    // keep the 'off' reference returned by the stream client\n    this.streamClientEventHandlers.set(fn, offHandler);\n    return () => {\n      this.off(eventName, fn);\n    };\n  };\n\n  /**\n   * Remove subscription for WebSocket events that were created by the `on` method.\n   *\n   * @param eventName the event name.\n   * @param fn the event handler.\n   */\n  off = <E extends keyof AllCallEvents>(\n    eventName: E,\n    fn: CallEventListener<E>,\n  ) => {\n    if (isSfuEvent(eventName)) {\n      return this.dispatcher.off(eventName, fn);\n    }\n\n    // unsubscribe from the stream client event by using the 'off' reference\n    const registeredOffHandler = this.streamClientEventHandlers.get(fn);\n    if (registeredOffHandler) {\n      registeredOffHandler();\n    }\n  };\n\n  /**\n   * Leave the call and stop the media streams that were published by the call.\n   */\n  leave = async ({\n    reject = false,\n    reason = 'user is leaving the call',\n  }: CallLeaveOptions = {}) => {\n    const callingState = this.state.callingState;\n    if (callingState === CallingState.LEFT) {\n      throw new Error('Cannot leave call that has already been left.');\n    }\n\n    if (callingState === CallingState.JOINING) {\n      await this.assertCallJoined();\n    }\n\n    this.isLeaving = true;\n\n    if (this.ringing) {\n      // I'm the one who started the call, so I should cancel it.\n      const hasOtherParticipants = this.state.remoteParticipants.length > 0;\n      if (this.isCreatedByMe && !hasOtherParticipants) {\n        // Signals other users that I have cancelled my call to them\n        // before they accepted it.\n        await this.reject();\n      } else if (reject && callingState === CallingState.RINGING) {\n        // Signals other users that I have rejected the incoming call.\n        await this.reject();\n      }\n    }\n\n    this.statsReporter?.stop();\n    this.statsReporter = undefined;\n\n    this.sfuStatsReporter?.stop();\n    this.sfuStatsReporter = undefined;\n\n    this.subscriber?.close();\n    this.subscriber = undefined;\n\n    this.publisher?.close();\n    this.publisher = undefined;\n\n    this.sfuClient?.close(StreamSfuClient.NORMAL_CLOSURE, reason);\n    this.sfuClient = undefined;\n\n    this.dispatcher.offAll();\n\n    this.state.setCallingState(CallingState.LEFT);\n\n    // Call all leave call hooks, e.g. to clean up global event handlers\n    this.leaveCallHooks.forEach((hook) => hook());\n\n    this.clientStore.unregisterCall(this);\n\n    this.camera.dispose();\n    this.microphone.dispose();\n    this.screenShare.dispose();\n    this.speaker.dispose();\n\n    const stopOnLeavePromises: Promise<void>[] = [];\n    if (this.camera.stopOnLeave) {\n      stopOnLeavePromises.push(this.camera.disable(true));\n    }\n    if (this.microphone.stopOnLeave) {\n      stopOnLeavePromises.push(this.microphone.disable(true));\n    }\n    if (this.screenShare.stopOnLeave) {\n      stopOnLeavePromises.push(this.screenShare.disable(true));\n    }\n    await Promise.all(stopOnLeavePromises);\n  };\n\n  /**\n   * A flag indicating whether the call is \"ringing\" type of call.\n   */\n  get ringing() {\n    return getCurrentValue(this.ringingSubject);\n  }\n\n  /**\n   * Retrieves the current user ID.\n   */\n  get currentUserId() {\n    return this.clientStore.connectedUser?.id;\n  }\n\n  /**\n   * A flag indicating whether the call was created by the current user.\n   */\n  get isCreatedByMe() {\n    return this.state.createdBy?.id === this.currentUserId;\n  }\n\n  /**\n   * Loads the information about the call.\n   *\n   * @param params.ring if set to true, a `call.ring` event will be sent to the call members.\n   * @param params.notify if set to true, a `call.notification` event will be sent to the call members.\n   * @param params.members_limit the total number of members to return as part of the response.\n   */\n  get = async (params?: {\n    ring?: boolean;\n    notify?: boolean;\n    members_limit?: number;\n  }) => {\n    const response = await this.streamClient.get<GetCallResponse>(\n      this.streamClientBasePath,\n      params,\n    );\n\n    if (params?.ring && !this.ringing) {\n      this.ringingSubject.next(true);\n    }\n\n    this.state.updateFromCallResponse(response.call);\n    this.state.setMembers(response.members);\n    this.state.setOwnCapabilities(response.own_capabilities);\n\n    if (this.streamClient._hasConnectionID()) {\n      this.watching = true;\n      this.clientStore.registerCall(this);\n    }\n\n    this.applyDeviceConfig();\n\n    return response;\n  };\n\n  /**\n   * Loads the information about the call and creates it if it doesn't exist.\n   *\n   * @param data the data to create the call with.\n   */\n  getOrCreate = async (data?: GetOrCreateCallRequest) => {\n    const response = await this.streamClient.post<\n      GetOrCreateCallResponse,\n      GetOrCreateCallRequest\n    >(this.streamClientBasePath, data);\n\n    if (data?.ring && !this.ringing) {\n      this.ringingSubject.next(true);\n    }\n\n    this.state.updateFromCallResponse(response.call);\n    this.state.setMembers(response.members);\n    this.state.setOwnCapabilities(response.own_capabilities);\n\n    if (this.streamClient._hasConnectionID()) {\n      this.watching = true;\n      this.clientStore.registerCall(this);\n    }\n\n    this.applyDeviceConfig();\n\n    return response;\n  };\n\n  /**\n   * Creates a call\n   *\n   * @param data the data to create the call with.\n   */\n  create = async (data?: GetOrCreateCallRequest) => {\n    return this.getOrCreate(data);\n  };\n\n  /**\n   * A shortcut for {@link Call.get} with `ring` parameter set to `true`.\n   * Will send a `call.ring` event to the call members.\n   */\n  ring = async (): Promise<GetCallResponse> => {\n    return await this.get({ ring: true });\n  };\n\n  /**\n   * A shortcut for {@link Call.get} with `notify` parameter set to `true`.\n   * Will send a `call.notification` event to the call members.\n   */\n  notify = async (): Promise<GetCallResponse> => {\n    return await this.get({ notify: true });\n  };\n\n  /**\n   * Marks the incoming call as accepted.\n   *\n   * This method should be used only for \"ringing\" call flows.\n   * {@link Call.join} invokes this method automatically for you when joining a call.\n   * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n   */\n  accept = async () => {\n    return this.streamClient.post<AcceptCallResponse>(\n      `${this.streamClientBasePath}/accept`,\n    );\n  };\n\n  /**\n   * Marks the incoming call as rejected.\n   *\n   * This method should be used only for \"ringing\" call flows.\n   * {@link Call.leave} invokes this method automatically for you when you leave or reject this call.\n   * Unless you are implementing a custom \"ringing\" flow, you should not use this method.\n   */\n  reject = async () => {\n    return this.streamClient.post<RejectCallResponse>(\n      `${this.streamClientBasePath}/reject`,\n    );\n  };\n\n  /**\n   * Will start to watch for call related WebSocket events and initiate a call session with the server.\n   *\n   * @returns a promise which resolves once the call join-flow has finished.\n   */\n  join = async (data?: JoinCallData): Promise<void> => {\n    const callingState = this.state.callingState;\n    if ([CallingState.JOINED, CallingState.JOINING].includes(callingState)) {\n      this.logger(\n        'warn',\n        'Join method called twice, you should only call this once',\n      );\n      throw new Error(`Illegal State: Already joined.`);\n    }\n\n    if (callingState === CallingState.LEFT) {\n      throw new Error(\n        'Illegal State: Cannot join already left call. Create a new Call instance to join a call.',\n      );\n    }\n\n    const isMigrating = callingState === CallingState.MIGRATING;\n    const isReconnecting = callingState === CallingState.RECONNECTING;\n    this.state.setCallingState(CallingState.JOINING);\n    this.logger('debug', 'Starting join flow');\n\n    if (data?.ring && !this.ringing) {\n      this.ringingSubject.next(true);\n    }\n\n    if (this.ringing && !this.isCreatedByMe) {\n      // signals other users that I have accepted the incoming call.\n      await this.accept();\n    }\n\n    let sfuServer: SFUResponse;\n    let sfuToken: string;\n    let connectionConfig: RTCConfiguration | undefined;\n    let statsOptions: StatsOptions | undefined;\n    try {\n      if (this.sfuClient?.isFastReconnecting) {\n        // use previous SFU configuration and values\n        connectionConfig = this.publisher?.connectionConfiguration;\n        sfuServer = this.sfuClient.sfuServer;\n        sfuToken = this.sfuClient.token;\n        statsOptions = this.sfuStatsReporter?.options;\n      } else {\n        // full join flow - let the Coordinator pick a new SFU for us\n        const call = await join(this.streamClient, this.type, this.id, data);\n        this.state.updateFromCallResponse(call.metadata);\n        this.state.setMembers(call.members);\n        this.state.setOwnCapabilities(call.ownCapabilities);\n        connectionConfig = call.connectionConfig;\n        sfuServer = call.sfuServer;\n        sfuToken = call.token;\n        statsOptions = call.statsOptions;\n      }\n\n      if (this.streamClient._hasConnectionID()) {\n        this.watching = true;\n        this.clientStore.registerCall(this);\n      }\n    } catch (error) {\n      // restore the previous call state if the join-flow fails\n      this.state.setCallingState(callingState);\n      throw error;\n    }\n\n    const previousSfuClient = this.sfuClient;\n    const sfuClient = (this.sfuClient = new StreamSfuClient({\n      dispatcher: this.dispatcher,\n      sfuServer,\n      token: sfuToken,\n      sessionId: previousSfuClient?.sessionId,\n    }));\n\n    /**\n     * A closure which hides away the re-connection logic.\n     */\n    const reconnect = async (\n      strategy: 'full' | 'fast' | 'migrate',\n      reason: string,\n    ): Promise<void> => {\n      const currentState = this.state.callingState;\n      if (\n        currentState === CallingState.MIGRATING ||\n        currentState === CallingState.RECONNECTING\n      ) {\n        // prevent parallel reconnection attempts\n        return;\n      }\n      this.reconnectAttempts++;\n      this.state.setCallingState(\n        strategy === 'migrate'\n          ? CallingState.MIGRATING\n          : CallingState.RECONNECTING,\n      );\n\n      if (strategy === 'migrate') {\n        this.logger(\n          'debug',\n          `[Migration]: migrating call ${this.cid} away from ${sfuServer.edge_name}`,\n        );\n        sfuClient.isMigratingAway = true;\n      } else {\n        this.logger(\n          'debug',\n          `[Rejoin]: ${strategy} rejoin call ${this.cid} (${this.reconnectAttempts})...`,\n        );\n      }\n\n      // take a snapshot of the current \"local participant\" state\n      // we'll need it for restoring the previous publishing state later\n      const localParticipant = this.state.localParticipant;\n\n      if (strategy === 'fast') {\n        sfuClient.close(\n          StreamSfuClient.ERROR_CONNECTION_BROKEN,\n          `attempting fast reconnect: ${reason}`,\n        );\n      } else if (strategy === 'full') {\n        // in migration or recovery scenarios, we don't want to\n        // wait before attempting to reconnect to an SFU server\n        await sleep(retryInterval(this.reconnectAttempts));\n\n        // in full-reconnect, we need to dispose all Peer Connections\n        this.subscriber?.close();\n        this.subscriber = undefined;\n        this.publisher?.close({ stopTracks: false });\n        this.publisher = undefined;\n        this.statsReporter?.stop();\n        this.statsReporter = undefined;\n        this.sfuStatsReporter?.stop();\n        this.sfuStatsReporter = undefined;\n\n        // clean up current connection\n        sfuClient.close(\n          StreamSfuClient.NORMAL_CLOSURE,\n          `attempting full reconnect: ${reason}`,\n        );\n      }\n      await this.join({\n        ...data,\n        ...(strategy === 'migrate' && { migrating_from: sfuServer.edge_name }),\n      });\n\n      // clean up previous connection\n      if (strategy === 'migrate') {\n        sfuClient.close(StreamSfuClient.NORMAL_CLOSURE, 'attempting migration');\n      }\n\n      this.logger(\n        'info',\n        `[Rejoin]: Attempt ${this.reconnectAttempts} successful!`,\n      );\n      // we shouldn't be republishing the streams if we're migrating\n      // as the underlying peer connection will take care of it as part\n      // of the ice-restart process\n      if (localParticipant && strategy === 'full') {\n        const {\n          audioStream,\n          videoStream,\n          screenShareStream,\n          screenShareAudioStream,\n        } = localParticipant;\n\n        let screenShare: MediaStream | undefined;\n        if (screenShareStream || screenShareAudioStream) {\n          screenShare = new MediaStream();\n          screenShareStream?.getVideoTracks().forEach((track) => {\n            screenShare?.addTrack(track);\n          });\n          screenShareAudioStream?.getAudioTracks().forEach((track) => {\n            screenShare?.addTrack(track);\n          });\n        }\n\n        // restore previous publishing state\n        if (audioStream) await this.publishAudioStream(audioStream);\n        if (videoStream) {\n          await this.publishVideoStream(videoStream, {\n            preferredCodec: this.camera.preferredCodec,\n          });\n        }\n        if (screenShare) await this.publishScreenShareStream(screenShare);\n\n        this.logger(\n          'info',\n          `[Rejoin]: State restored. Attempt: ${this.reconnectAttempts}`,\n        );\n      }\n    };\n\n    // reconnect if the connection was closed unexpectedly. example:\n    // - SFU crash or restart\n    // - network change\n    sfuClient.signalReady.then(() => {\n      // register a handler for the \"goAway\" event\n      const unregisterGoAway = this.dispatcher.on('goAway', (event) => {\n        const { reason } = event;\n        this.logger(\n          'info',\n          `[Migration]: Going away from SFU... Reason: ${GoAwayReason[reason]}`,\n        );\n        reconnect('migrate', GoAwayReason[reason]).catch((err) => {\n          this.logger(\n            'warn',\n            `[Migration]: Failed to migrate to another SFU.`,\n            err,\n          );\n        });\n      });\n\n      sfuClient.signalWs.addEventListener('close', (e) => {\n        // unregister the \"goAway\" handler, as we won't need it anymore for this connection.\n        // the upcoming re-join will register a new handler anyway\n        unregisterGoAway();\n        // when the user has initiated \"call.leave()\" operation, we shouldn't\n        // care for the WS close code and we shouldn't ever attempt to reconnect\n        if (this.isLeaving) return;\n        // do nothing if the connection was closed on purpose\n        if (e.code === StreamSfuClient.NORMAL_CLOSURE) return;\n        // do nothing if the connection was closed because of a policy violation\n        // e.g., the user has been blocked by an admin or moderator\n        if (e.code === KnownCodes.WS_POLICY_VIOLATION) return;\n        // When the SFU is being shut down, it sends a goAway message.\n        // While we migrate to another SFU, we might have the WS connection\n        // to the old SFU closed abruptly. In this case, we don't want\n        // to reconnect to the old SFU, but rather to the new one.\n        const isMigratingAway =\n          e.code === KnownCodes.WS_CLOSED_ABRUPTLY && sfuClient.isMigratingAway;\n        const isFastReconnecting =\n          e.code === KnownCodes.WS_CLOSED_ABRUPTLY &&\n          sfuClient.isFastReconnecting;\n        if (isMigratingAway || isFastReconnecting) return;\n\n        // do nothing if the connection was closed because of a fast reconnect\n        if (e.code === StreamSfuClient.ERROR_CONNECTION_BROKEN) return;\n\n        if (this.reconnectAttempts < this.maxReconnectAttempts) {\n          sfuClient.isFastReconnecting = this.reconnectAttempts === 0;\n          const strategy = sfuClient.isFastReconnecting ? 'fast' : 'full';\n          reconnect(strategy, `SFU closed the WS with code: ${e.code}`).catch(\n            (err) => {\n              this.logger(\n                'error',\n                `[Rejoin]: ${strategy} rejoin failed for ${this.reconnectAttempts} times. Giving up.`,\n                err,\n              );\n              this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n            },\n          );\n        } else {\n          this.logger(\n            'error',\n            '[Rejoin]: Reconnect attempts exceeded. Giving up...',\n          );\n          this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n        }\n      });\n    });\n\n    // handlers for connection online/offline events\n    const unsubscribeOnlineEvent = this.streamClient.on(\n      'connection.changed',\n      async (e) => {\n        if (e.type !== 'connection.changed') return;\n        if (!e.online) return;\n        unsubscribeOnlineEvent();\n        const currentCallingState = this.state.callingState;\n        const shouldReconnect =\n          currentCallingState === CallingState.OFFLINE ||\n          currentCallingState === CallingState.RECONNECTING_FAILED;\n        if (!shouldReconnect) return;\n        this.logger('info', '[Rejoin]: Going online...');\n        let isFirstReconnectAttempt = true;\n        do {\n          try {\n            sfuClient.isFastReconnecting = isFirstReconnectAttempt;\n            await reconnect(\n              isFirstReconnectAttempt ? 'fast' : 'full',\n              'Network: online',\n            );\n            return; // break the loop if rejoin is successful\n          } catch (err) {\n            this.logger(\n              'error',\n              `[Rejoin][Network]: Rejoin failed for attempt ${this.reconnectAttempts}`,\n              err,\n            );\n          }\n          // wait for a bit before trying to reconnect again\n          await sleep(retryInterval(this.reconnectAttempts));\n          isFirstReconnectAttempt = false;\n        } while (this.reconnectAttempts < this.maxReconnectAttempts);\n\n        // if we're here, it means that we've exhausted all the reconnect attempts\n        this.logger('error', `[Rejoin][Network]: Rejoin failed. Giving up.`);\n        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n      },\n    );\n    const unsubscribeOfflineEvent = this.streamClient.on(\n      'connection.changed',\n      (e) => {\n        if (e.type !== 'connection.changed') return;\n        if (e.online) return;\n        unsubscribeOfflineEvent();\n        this.state.setCallingState(CallingState.OFFLINE);\n      },\n    );\n\n    this.leaveCallHooks.add(() => {\n      unsubscribeOnlineEvent();\n      unsubscribeOfflineEvent();\n    });\n\n    if (!this.subscriber) {\n      this.subscriber = new Subscriber({\n        sfuClient,\n        dispatcher: this.dispatcher,\n        state: this.state,\n        connectionConfig,\n      });\n    }\n\n    // anonymous users can't publish anything hence, there is no need\n    // to create Publisher Peer Connection for them\n    const isAnonymous = this.streamClient.user?.type === 'anonymous';\n    if (!this.publisher && !isAnonymous) {\n      const audioSettings = this.state.settings?.audio;\n      const isDtxEnabled = !!audioSettings?.opus_dtx_enabled;\n      const isRedEnabled = !!audioSettings?.redundant_coding_enabled;\n      this.publisher = new Publisher({\n        sfuClient,\n        dispatcher: this.dispatcher,\n        state: this.state,\n        connectionConfig,\n        isDtxEnabled,\n        isRedEnabled,\n      });\n    }\n\n    if (!this.statsReporter) {\n      this.statsReporter = createStatsReporter({\n        subscriber: this.subscriber,\n        publisher: this.publisher,\n        state: this.state,\n        datacenter: this.sfuClient.edgeName,\n      });\n    }\n\n    const clientDetails = getClientDetails();\n    if (!this.sfuStatsReporter && statsOptions) {\n      this.sfuStatsReporter = new SfuStatsReporter(sfuClient, {\n        clientDetails,\n        options: statsOptions,\n        subscriber: this.subscriber,\n        publisher: this.publisher,\n      });\n      this.sfuStatsReporter.start();\n    }\n\n    try {\n      // 1. wait for the signal server to be ready before sending \"joinRequest\"\n      sfuClient.signalReady\n        .catch((err) => this.logger('error', 'Signal ready failed', err))\n        // prepare a generic SDP and send it to the SFU.\n        // this is a throw-away SDP that the SFU will use to determine\n        // the capabilities of the client (codec support, etc.)\n        .then(() => getGenericSdp('recvonly'))\n        .then((sdp) => {\n          const subscriptions = getCurrentValue(this.trackSubscriptionsSubject);\n          const migration: Migration | undefined = isMigrating\n            ? {\n                fromSfuId: data?.migrating_from || '',\n                subscriptions: subscriptions.data || [],\n                announcedTracks: this.publisher?.getCurrentTrackInfos() || [],\n              }\n            : undefined;\n\n          return sfuClient.join({\n            subscriberSdp: sdp || '',\n            clientDetails,\n            migration,\n            fastReconnect: previousSfuClient?.isFastReconnecting ?? false,\n          });\n        });\n\n      // 2. in parallel, wait for the SFU to send us the \"joinResponse\"\n      // this will throw an error if the SFU rejects the join request or\n      // fails to respond in time\n      const { callState, reconnected } = await this.waitForJoinResponse();\n      if (isReconnecting) {\n        this.logger('debug', '[Rejoin] fast reconnected:', reconnected);\n      }\n      if (isMigrating) {\n        await this.subscriber.migrateTo(sfuClient, connectionConfig);\n        await this.publisher?.migrateTo(sfuClient, connectionConfig);\n      } else if (isReconnecting) {\n        if (reconnected) {\n          // update the SFU client instance on the subscriber and publisher\n          this.subscriber.setSfuClient(sfuClient);\n          // publisher might not be there (anonymous users)\n          if (this.publisher) {\n            this.publisher.setSfuClient(sfuClient);\n            // and perform a full ICE restart on the publisher\n            await this.publisher.restartIce();\n          }\n        } else if (previousSfuClient?.isFastReconnecting) {\n          // reconnection wasn't possible, so we need to do a full rejoin\n          return await reconnect('full', 're-attempting').catch((err) => {\n            this.logger(\n              'error',\n              `[Rejoin]: Rejoin failed forced full rejoin.`,\n              err,\n            );\n          });\n        }\n      }\n      const currentParticipants = callState?.participants || [];\n      const participantCount = callState?.participantCount;\n      const startedAt = callState?.startedAt\n        ? Timestamp.toDate(callState.startedAt)\n        : new Date();\n      const pins = callState?.pins ?? [];\n      this.state.setParticipants(() => {\n        const participantLookup = this.state.getParticipantLookupBySessionId();\n        return currentParticipants.map<StreamVideoParticipant>((p) => {\n          // We need to preserve the local state of the participant\n          // (e.g. videoDimension, visibilityState, pinnedAt, etc.)\n          // as it doesn't exist on the server.\n          const existingParticipant = participantLookup[p.sessionId];\n          return Object.assign(p, existingParticipant, {\n            isLocalParticipant: p.sessionId === sfuClient.sessionId,\n            viewportVisibilityState:\n              existingParticipant?.viewportVisibilityState ?? {\n                videoTrack: VisibilityState.UNKNOWN,\n                screenShareTrack: VisibilityState.UNKNOWN,\n              },\n          } satisfies Partial<StreamVideoParticipant>);\n        });\n      });\n      this.state.setParticipantCount(participantCount?.total || 0);\n      this.state.setAnonymousParticipantCount(participantCount?.anonymous || 0);\n      this.state.setStartedAt(startedAt);\n      this.state.setServerSidePins(pins);\n\n      this.reconnectAttempts = 0; // reset the reconnect attempts counter\n      this.state.setCallingState(CallingState.JOINED);\n\n      try {\n        await this.initCamera({ setStatus: true });\n        await this.initMic({ setStatus: true });\n      } catch (error) {\n        this.logger(\n          'warn',\n          'Camera and/or mic init failed during join call',\n          error,\n        );\n      }\n\n      // 3. once we have the \"joinResponse\", and possibly reconciled the local state\n      // we schedule a fast subscription update for all remote participants\n      // that were visible before we reconnected or migrated to a new SFU.\n      const { remoteParticipants } = this.state;\n      if (remoteParticipants.length > 0) {\n        this.updateSubscriptions(remoteParticipants, DebounceType.FAST);\n      }\n\n      this.logger('info', `Joined call ${this.cid}`);\n    } catch (err) {\n      // join failed, try to rejoin\n      if (this.reconnectAttempts < this.maxReconnectAttempts) {\n        this.logger(\n          'error',\n          `[Rejoin]: Rejoin ${this.reconnectAttempts} failed.`,\n          err,\n        );\n        await reconnect('full', 'previous attempt failed');\n        this.logger(\n          'info',\n          `[Rejoin]: Rejoin ${this.reconnectAttempts} successful!`,\n        );\n      } else {\n        this.logger(\n          'error',\n          `[Rejoin]: Rejoin failed for ${this.reconnectAttempts} times. Giving up.`,\n        );\n        this.state.setCallingState(CallingState.RECONNECTING_FAILED);\n        throw new Error('Join failed');\n      }\n    }\n  };\n\n  private waitForJoinResponse = (timeout: number = 5000) => {\n    return new Promise<JoinResponse>((resolve, reject) => {\n      const unsubscribe = this.on('joinResponse', (event) => {\n        clearTimeout(timeoutId);\n        unsubscribe();\n        resolve(event);\n      });\n\n      const timeoutId = setTimeout(() => {\n        unsubscribe();\n        reject(new Error('Waiting for \"joinResponse\" has timed out'));\n      }, timeout);\n    });\n  };\n\n  /**\n   * Starts publishing the given video stream to the call.\n   * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n   *\n   * Consecutive calls to this method will replace the previously published stream.\n   * The previous video stream will be stopped.\n   *\n   * @param videoStream the video stream to publish.\n   * @param opts the options to use when publishing the stream.\n   */\n  publishVideoStream = async (\n    videoStream: MediaStream,\n    opts: PublishOptions = {},\n  ) => {\n    // we should wait until we get a JoinResponse from the SFU,\n    // otherwise we risk breaking the ICETrickle flow.\n    await this.assertCallJoined();\n    if (!this.publisher) {\n      this.logger('error', 'Trying to publish video before join is completed');\n      throw new Error(`Call not joined yet.`);\n    }\n\n    const [videoTrack] = videoStream.getVideoTracks();\n    if (!videoTrack) {\n      this.logger('error', `There is no video track to publish in the stream.`);\n      return;\n    }\n\n    await this.publisher.publishStream(\n      videoStream,\n      videoTrack,\n      TrackType.VIDEO,\n      opts,\n    );\n  };\n\n  /**\n   * Starts publishing the given audio stream to the call.\n   * The stream will be stopped if the user changes an input device, or if the user leaves the call.\n   *\n   * Consecutive calls to this method will replace the audio stream that is currently being published.\n   * The previous audio stream will be stopped.\n   *\n   * @param audioStream the audio stream to publish.\n   */\n  publishAudioStream = async (audioStream: MediaStream) => {\n    // we should wait until we get a JoinResponse from the SFU,\n    // otherwise we risk breaking the ICETrickle flow.\n    await this.assertCallJoined();\n    if (!this.publisher) {\n      this.logger('error', 'Trying to publish audio before join is completed');\n      throw new Error(`Call not joined yet.`);\n    }\n\n    const [audioTrack] = audioStream.getAudioTracks();\n    if (!audioTrack) {\n      this.logger('error', `There is no audio track in the stream to publish`);\n      return;\n    }\n\n    await this.publisher.publishStream(\n      audioStream,\n      audioTrack,\n      TrackType.AUDIO,\n    );\n  };\n\n  /**\n   * Starts publishing the given screen-share stream to the call.\n   *\n   * Consecutive calls to this method will replace the previous screen-share stream.\n   * The previous screen-share stream will be stopped.\n   *\n   * @param screenShareStream the screen-share stream to publish.\n   * @param opts the options to use when publishing the stream.\n   */\n  publishScreenShareStream = async (\n    screenShareStream: MediaStream,\n    opts: PublishOptions = {},\n  ) => {\n    // we should wait until we get a JoinResponse from the SFU,\n    // otherwise we risk breaking the ICETrickle flow.\n    await this.assertCallJoined();\n    if (!this.publisher) {\n      this.logger(\n        'error',\n        'Trying to publish screen share before join is completed',\n      );\n      throw new Error(`Call not joined yet.`);\n    }\n\n    const [screenShareTrack] = screenShareStream.getVideoTracks();\n    if (!screenShareTrack) {\n      this.logger(\n        'error',\n        `There is no video track in the screen share stream to publish`,\n      );\n      return;\n    }\n\n    await this.publisher.publishStream(\n      screenShareStream,\n      screenShareTrack,\n      TrackType.SCREEN_SHARE,\n      opts,\n    );\n\n    const [screenShareAudioTrack] = screenShareStream.getAudioTracks();\n    if (screenShareAudioTrack) {\n      await this.publisher.publishStream(\n        screenShareStream,\n        screenShareAudioTrack,\n        TrackType.SCREEN_SHARE_AUDIO,\n        opts,\n      );\n    }\n  };\n\n  /**\n   * Stops publishing the given track type to the call, if it is currently being published.\n   * Underlying track will be stopped and removed from the publisher.\n   *\n   * @param trackType the track type to stop publishing.\n   * @param stopTrack if `true` the track will be stopped, else it will be just disabled\n   */\n  stopPublish = async (trackType: TrackType, stopTrack: boolean = true) => {\n    this.logger(\n      'info',\n      `stopPublish ${TrackType[trackType]}, stop tracks: ${stopTrack}`,\n    );\n    await this.publisher?.unpublishStream(trackType, stopTrack);\n  };\n\n  /**\n   * Notifies the SFU that a noise cancellation process has started.\n   *\n   * @internal\n   */\n  notifyNoiseCancellationStarting = async () => {\n    return this.sfuClient?.startNoiseCancellation().catch((err) => {\n      this.logger('warn', 'Failed to notify start of noise cancellation', err);\n    });\n  };\n\n  /**\n   * Notifies the SFU that a noise cancellation process has stopped.\n   *\n   * @internal\n   */\n  notifyNoiseCancellationStopped = async () => {\n    return this.sfuClient?.stopNoiseCancellation().catch((err) => {\n      this.logger('warn', 'Failed to notify stop of noise cancellation', err);\n    });\n  };\n\n  /**\n   * Update track subscription configuration for one or more participants.\n   * You have to create a subscription for each participant for all the different kinds of tracks you want to receive.\n   * You can only subscribe for tracks after the participant started publishing the given kind of track.\n   *\n   * @param trackType the kind of subscription to update.\n   * @param changes the list of subscription changes to do.\n   * @param type the debounce type to use for the update.\n   */\n  updateSubscriptionsPartial = (\n    trackType: VideoTrackType | 'video' | 'screen',\n    changes: SubscriptionChanges,\n    type: DebounceType = DebounceType.SLOW,\n  ) => {\n    if (trackType === 'video') {\n      this.logger(\n        'warn',\n        `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'videoTrack'`,\n      );\n      trackType = 'videoTrack';\n    } else if (trackType === 'screen') {\n      this.logger(\n        'warn',\n        `updateSubscriptionsPartial: ${trackType} is deprecated. Please switch to 'screenShareTrack'`,\n      );\n      trackType = 'screenShareTrack';\n    }\n\n    const participants = this.state.updateParticipants(\n      Object.entries(changes).reduce<StreamVideoParticipantPatches>(\n        (acc, [sessionId, change]) => {\n          if (change.dimension?.height) {\n            change.dimension.height = Math.ceil(change.dimension.height);\n          }\n          if (change.dimension?.width) {\n            change.dimension.width = Math.ceil(change.dimension.width);\n          }\n          const prop: keyof StreamVideoParticipant | undefined =\n            trackType === 'videoTrack'\n              ? 'videoDimension'\n              : trackType === 'screenShareTrack'\n              ? 'screenShareDimension'\n              : undefined;\n          if (prop) {\n            acc[sessionId] = {\n              [prop]: change.dimension,\n            };\n          }\n          return acc;\n        },\n        {},\n      ),\n    );\n\n    if (participants) {\n      this.updateSubscriptions(participants, type);\n    }\n  };\n\n  private updateSubscriptions = (\n    participants: StreamVideoParticipant[],\n    type: DebounceType = DebounceType.SLOW,\n  ) => {\n    const subscriptions: TrackSubscriptionDetails[] = [];\n    for (const p of participants) {\n      // we don't want to subscribe to our own tracks\n      if (p.isLocalParticipant) continue;\n\n      // NOTE: audio tracks don't have to be requested explicitly\n      // as the SFU will implicitly subscribe us to all of them,\n      // once they become available.\n      if (p.videoDimension && hasVideo(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.VIDEO,\n          dimension: p.videoDimension,\n        });\n      }\n      if (p.screenShareDimension && hasScreenShare(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE,\n          dimension: p.screenShareDimension,\n        });\n      }\n      if (hasScreenShareAudio(p)) {\n        subscriptions.push({\n          userId: p.userId,\n          sessionId: p.sessionId,\n          trackType: TrackType.SCREEN_SHARE_AUDIO,\n        });\n      }\n    }\n    // schedule update\n    this.trackSubscriptionsSubject.next({ type, data: subscriptions });\n  };\n\n  /**\n   * Will enhance the reported stats with additional participant-specific information (`callStatsReport$` state [store variable](./StreamVideoClient.md/#readonlystatestore)).\n   * This is usually helpful when detailed stats for a specific participant are needed.\n   *\n   * @param sessionId the sessionId to start reporting for.\n   */\n  startReportingStatsFor = (sessionId: string) => {\n    return this.statsReporter?.startReportingStatsFor(sessionId);\n  };\n\n  /**\n   * Opposite of `startReportingStatsFor`.\n   * Will turn off stats reporting for a specific participant.\n   *\n   * @param sessionId the sessionId to stop reporting for.\n   */\n  stopReportingStatsFor = (sessionId: string) => {\n    return this.statsReporter?.stopReportingStatsFor(sessionId);\n  };\n\n  /**\n   * Resets the last sent reaction for the user holding the given `sessionId`. This is a local action, it won't reset the reaction on the backend.\n   *\n   * @param sessionId the session id.\n   */\n  resetReaction = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      reaction: undefined,\n    });\n  };\n\n  /**\n   * Sets the list of criteria to sort the participants by.\n   *\n   * @param criteria the list of criteria to sort the participants by.\n   */\n  setSortParticipantsBy: CallState['setSortParticipantsBy'] = (criteria) => {\n    return this.state.setSortParticipantsBy(criteria);\n  };\n\n  /**\n   * Updates the list of video layers to publish.\n   *\n   * @internal\n   * @param enabledLayers the list of layers to enable.\n   */\n  updatePublishQuality = async (enabledLayers: VideoLayerSetting[]) => {\n    return this.publisher?.updateVideoPublishQuality(enabledLayers);\n  };\n\n  private assertCallJoined = () => {\n    return new Promise<void>((resolve) => {\n      this.state.callingState$\n        .pipe(\n          takeWhile((state) => state !== CallingState.JOINED, true),\n          filter((s) => s === CallingState.JOINED),\n        )\n        .subscribe(() => resolve());\n    });\n  };\n\n  /**\n   * Sends a reaction to the other call participants.\n   *\n   * @param reaction the reaction to send.\n   */\n  sendReaction = async (\n    reaction: SendReactionRequest,\n  ): Promise<SendReactionResponse> => {\n    return this.streamClient.post<SendReactionResponse, SendReactionRequest>(\n      `${this.streamClientBasePath}/reaction`,\n      reaction,\n    );\n  };\n\n  /**\n   * Blocks the user with the given `userId`.\n   *\n   * @param userId the id of the user to block.\n   */\n  blockUser = async (userId: string) => {\n    return this.streamClient.post<BlockUserResponse, BlockUserRequest>(\n      `${this.streamClientBasePath}/block`,\n      {\n        user_id: userId,\n      },\n    );\n  };\n\n  /**\n   * Unblocks the user with the given `userId`.\n   *\n   * @param userId the id of the user to unblock.\n   */\n  unblockUser = async (userId: string) => {\n    return this.streamClient.post<UnblockUserResponse, UnblockUserRequest>(\n      `${this.streamClientBasePath}/unblock`,\n      {\n        user_id: userId,\n      },\n    );\n  };\n\n  /**\n   * Mutes the current user.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteSelf = (type: TrackMuteType) => {\n    const myUserId = this.currentUserId;\n    if (myUserId) {\n      return this.muteUser(myUserId, type);\n    }\n  };\n\n  /**\n   * Mutes all the other participants.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteOthers = (type: TrackMuteType) => {\n    const trackType = muteTypeToTrackType(type);\n    if (!trackType) return;\n    const userIdsToMute: string[] = [];\n    for (const participant of this.state.remoteParticipants) {\n      if (participant.publishedTracks.includes(trackType)) {\n        userIdsToMute.push(participant.userId);\n      }\n    }\n\n    return this.muteUser(userIdsToMute, type);\n  };\n\n  /**\n   * Mutes the user with the given `userId`.\n   *\n   * @param userId the id of the user to mute.\n   * @param type the type of the mute operation.\n   */\n  muteUser = (userId: string | string[], type: TrackMuteType) => {\n    return this.streamClient.post<MuteUsersResponse, MuteUsersRequest>(\n      `${this.streamClientBasePath}/mute_users`,\n      {\n        user_ids: Array.isArray(userId) ? userId : [userId],\n        [type]: true,\n      },\n    );\n  };\n\n  /**\n   * Will mute all users in the call.\n   *\n   * @param type the type of the mute operation.\n   */\n  muteAllUsers = (type: TrackMuteType) => {\n    return this.streamClient.post<MuteUsersResponse, MuteUsersRequest>(\n      `${this.streamClientBasePath}/mute_users`,\n      {\n        mute_all_users: true,\n        [type]: true,\n      },\n    );\n  };\n\n  /**\n   * Starts recording the call\n   */\n  startRecording = async (request?: StartRecordingRequest) => {\n    return this.streamClient.post<\n      StartRecordingResponse,\n      StartRecordingRequest\n    >(`${this.streamClientBasePath}/start_recording`, request ? request : {});\n  };\n\n  /**\n   * Stops recording the call\n   */\n  stopRecording = async () => {\n    return this.streamClient.post<StopRecordingResponse>(\n      `${this.streamClientBasePath}/stop_recording`,\n      {},\n    );\n  };\n\n  /**\n   * Starts the transcription of the call.\n   *\n   * @param request the request data.\n   */\n  startTranscription = async (\n    request?: StartTranscriptionRequest,\n  ): Promise<StartTranscriptionResponse> => {\n    return this.streamClient.post<\n      StartTranscriptionResponse,\n      StartTranscriptionRequest\n    >(`${this.streamClientBasePath}/start_transcription`, request);\n  };\n\n  /**\n   * Stops the transcription of the call.\n   */\n  stopTranscription = async (): Promise<StopTranscriptionResponse> => {\n    return this.streamClient.post<StopTranscriptionResponse>(\n      `${this.streamClientBasePath}/stop_transcription`,\n    );\n  };\n\n  /**\n   * Sends a `call.permission_request` event to all users connected to the call. The call settings object contains infomration about which permissions can be requested during a call (for example a user might be allowed to request permission to publish audio, but not video).\n   */\n  requestPermissions = async (\n    data: RequestPermissionRequest,\n  ): Promise<RequestPermissionResponse> => {\n    const { permissions } = data;\n    const canRequestPermissions = permissions.every((permission) =>\n      this.permissionsContext.canRequest(permission as OwnCapability),\n    );\n    if (!canRequestPermissions) {\n      throw new Error(\n        `You are not allowed to request permissions: ${permissions.join(', ')}`,\n      );\n    }\n    return this.streamClient.post<\n      RequestPermissionResponse,\n      RequestPermissionRequest\n    >(`${this.streamClientBasePath}/request_permission`, data);\n  };\n\n  /**\n   * Allows you to grant certain permissions to a user in a call.\n   * The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * Supported permissions that can be granted are:\n   * - `send-audio`\n   * - `send-video`\n   * - `screenshare`\n   *\n   * @param userId the id of the user to grant permissions to.\n   * @param permissions the permissions to grant.\n   */\n  grantPermissions = async (userId: string, permissions: string[]) => {\n    return this.updateUserPermissions({\n      user_id: userId,\n      grant_permissions: permissions,\n    });\n  };\n\n  /**\n   * Allows you to revoke certain permissions from a user in a call.\n   * The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * Supported permissions that can be revoked are:\n   * - `send-audio`\n   * - `send-video`\n   * - `screenshare`\n   *\n   * @param userId the id of the user to revoke permissions from.\n   * @param permissions the permissions to revoke.\n   */\n  revokePermissions = async (userId: string, permissions: string[]) => {\n    return this.updateUserPermissions({\n      user_id: userId,\n      revoke_permissions: permissions,\n    });\n  };\n\n  /**\n   * Allows you to grant or revoke a specific permission to a user in a call. The permissions are specific to the call experience and do not survive the call itself.\n   *\n   * When revoking a permission, this endpoint will also mute the relevant track from the user. This is similar to muting a user with the difference that the user will not be able to unmute afterwards.\n   *\n   * Supported permissions that can be granted or revoked: `send-audio`, `send-video` and `screenshare`.\n   *\n   * `call.permissions_updated` event is sent to all members of the call.\n   *\n   */\n  updateUserPermissions = async (data: UpdateUserPermissionsRequest) => {\n    return this.streamClient.post<\n      UpdateUserPermissionsResponse,\n      UpdateUserPermissionsRequest\n    >(`${this.streamClientBasePath}/user_permissions`, data);\n  };\n\n  /**\n   * Starts the livestreaming of the call.\n   *\n   * @param data the request data.\n   * @param params the request params.\n   */\n  goLive = async (data: GoLiveRequest = {}, params?: { notify?: boolean }) => {\n    return this.streamClient.post<GoLiveResponse, GoLiveRequest>(\n      `${this.streamClientBasePath}/go_live`,\n      data,\n      params,\n    );\n  };\n\n  /**\n   * Stops the livestreaming of the call.\n   */\n  stopLive = async () => {\n    return this.streamClient.post<StopLiveResponse>(\n      `${this.streamClientBasePath}/stop_live`,\n      {},\n    );\n  };\n\n  /**\n   * Starts the broadcasting of the call.\n   */\n  startHLS = async () => {\n    return this.streamClient.post<StartHLSBroadcastingResponse>(\n      `${this.streamClientBasePath}/start_broadcasting`,\n      {},\n    );\n  };\n\n  /**\n   * Stops the broadcasting of the call.\n   */\n  stopHLS = async () => {\n    return this.streamClient.post<StopHLSBroadcastingResponse>(\n      `${this.streamClientBasePath}/stop_broadcasting`,\n      {},\n    );\n  };\n\n  /**\n   * Updates the call settings or custom data.\n   *\n   * @param updates the updates to apply to the call.\n   */\n  update = async (updates: UpdateCallRequest) => {\n    const response = await this.streamClient.patch<\n      UpdateCallResponse,\n      UpdateCallRequest\n    >(`${this.streamClientBasePath}`, updates);\n\n    const { call, members, own_capabilities } = response;\n    this.state.updateFromCallResponse(call);\n    this.state.setMembers(members);\n    this.state.setOwnCapabilities(own_capabilities);\n\n    return response;\n  };\n\n  /**\n   * Ends the call. Once the call is ended, it cannot be re-joined.\n   */\n  endCall = async () => {\n    return this.streamClient.post<EndCallResponse>(\n      `${this.streamClientBasePath}/mark_ended`,\n    );\n  };\n\n  /**\n   * Pins the given session to the top of the participants list.\n   *\n   * @param sessionId the sessionId to pin.\n   */\n  pin = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      pin: {\n        isLocalPin: true,\n        pinnedAt: Date.now(),\n      },\n    });\n  };\n\n  /**\n   * Unpins the given session from the top of the participants list.\n   *\n   * @param sessionId the sessionId to unpin.\n   */\n  unpin = (sessionId: string) => {\n    this.state.updateParticipant(sessionId, {\n      pin: undefined,\n    });\n  };\n\n  /**\n   * Pins the given session to the top of the participants list for everyone\n   * in the call.\n   * You can execute this method only if you have the `pin-for-everyone` capability.\n   *\n   * @param request the request object.\n   */\n  pinForEveryone = async (request: PinRequest) => {\n    return this.streamClient.post<PinResponse, PinRequest>(\n      `${this.streamClientBasePath}/pin`,\n      request,\n    );\n  };\n\n  /**\n   * Unpins the given session from the top of the participants list for everyone\n   * in the call.\n   * You can execute this method only if you have the `pin-for-everyone` capability.\n   *\n   * @param request the request object.\n   */\n  unpinForEveryone = async (request: UnpinRequest) => {\n    return this.streamClient.post<UnpinResponse, UnpinRequest>(\n      `${this.streamClientBasePath}/unpin`,\n      request,\n    );\n  };\n\n  /**\n   * Query call members with filter query. The result won't be stored in call state.\n   * @param request\n   * @returns\n   */\n  queryMembers = (request?: Omit<QueryMembersRequest, 'type' | 'id'>) => {\n    return this.streamClient.post<QueryMembersResponse, QueryMembersRequest>(\n      '/call/members',\n      {\n        ...(request || {}),\n        id: this.id,\n        type: this.type,\n      },\n    );\n  };\n\n  /**\n   * Will update the call members.\n   *\n   * @param data the request data.\n   */\n  updateCallMembers = async (\n    data: UpdateCallMembersRequest,\n  ): Promise<UpdateCallMembersResponse> => {\n    return this.streamClient.post<\n      UpdateCallMembersResponse,\n      UpdateCallMembersRequest\n    >(`${this.streamClientBasePath}/members`, data);\n  };\n\n  /**\n   * Schedules an auto-drop timeout based on the call settings.\n   * Applicable only for ringing calls.\n   */\n  private scheduleAutoDrop = () => {\n    clearTimeout(this.dropTimeout);\n    this.leaveCallHooks.add(\n      createSubscription(this.state.settings$, (settings) => {\n        if (!settings) return;\n        // ignore if the call is not ringing\n        if (this.state.callingState !== CallingState.RINGING) return;\n\n        const timeoutInMs = settings.ring.auto_cancel_timeout_ms;\n        // 0 means no auto-drop\n        if (timeoutInMs <= 0) return;\n\n        clearTimeout(this.dropTimeout);\n        this.dropTimeout = setTimeout(() => {\n          this.leave({ reason: 'ring: timeout' }).catch((err) => {\n            this.logger('error', 'Failed to drop call', err);\n          });\n        }, timeoutInMs);\n      }),\n    );\n  };\n\n  /**\n   * Retrieves the list of recordings for the current call or call session.\n   *\n   * If `callSessionId` is provided, it will return the recordings for that call session.\n   * Otherwise, all recordings for the current call will be returned.\n   *\n   * @param callSessionId the call session id to retrieve recordings for.\n   */\n  queryRecordings = async (\n    callSessionId?: string,\n  ): Promise<ListRecordingsResponse> => {\n    let endpoint = this.streamClientBasePath;\n    if (callSessionId) {\n      endpoint = `${endpoint}/${callSessionId}`;\n    }\n    return this.streamClient.get<ListRecordingsResponse>(\n      `${endpoint}/recordings`,\n    );\n  };\n\n  /**\n   * Retrieves the list of transcriptions for the current call.\n   *\n   * @returns the list of transcriptions.\n   */\n  queryTranscriptions = async (): Promise<ListTranscriptionsResponse> => {\n    return this.streamClient.get<ListTranscriptionsResponse>(\n      `${this.streamClientBasePath}/transcriptions`,\n    );\n  };\n\n  /**\n   * Retrieve call statistics for a particular call session (historical).\n   * Here `callSessionID` is mandatory.\n   *\n   * @param callSessionID the call session ID to retrieve statistics for.\n   * @returns The call stats.\n   */\n  getCallStats = async (callSessionID: string) => {\n    const endpoint = `${this.streamClientBasePath}/stats/${callSessionID}`;\n    return this.streamClient.get<GetCallStatsResponse>(endpoint);\n  };\n\n  /**\n   * Submit user feedback for the call\n   *\n   * @param rating Rating between 1 and 5 denoting the experience of the user in the call\n   * @param reason The reason/description for the rating\n   * @param custom Custom data\n   * @returns\n   */\n  submitFeedback = async (\n    rating: number,\n    {\n      reason,\n      custom,\n    }: {\n      reason?: string;\n      custom?: Record<string, any>;\n    } = {},\n  ) => {\n    if (rating < 1 || rating > 5) {\n      throw new Error('Rating must be between 1 and 5');\n    }\n    const callSessionId = this.state.session?.id;\n    if (!callSessionId) {\n      throw new Error(\n        'Feedback can be submitted only in the context of a call session',\n      );\n    }\n\n    const { sdkName, sdkVersion, ...platform } = getSdkSignature(\n      getClientDetails(),\n    );\n\n    // user sessionId is not available once the call has been left\n    // until we relax the backend validation, we'll send N/A\n    const userSessionId = this.sfuClient?.sessionId ?? 'N/A';\n    const endpoint = `${this.streamClientBasePath}/feedback/${callSessionId}`;\n    return this.streamClient.post<\n      CollectUserFeedbackResponse,\n      CollectUserFeedbackRequest\n    >(endpoint, {\n      rating,\n      reason,\n      user_session_id: userSessionId,\n      sdk: sdkName,\n      sdk_version: sdkVersion,\n      custom: {\n        ...custom,\n        'x-stream-platform-data': platform,\n      },\n    });\n  };\n\n  /**\n   * Sends a custom event to all call participants.\n   *\n   * @param payload the payload to send.\n   */\n  sendCustomEvent = async (payload: { [key: string]: any }) => {\n    return this.streamClient.post<SendEventResponse, SendEventRequest>(\n      `${this.streamClientBasePath}/event`,\n      { custom: payload },\n    );\n  };\n\n  applyDeviceConfig = () => {\n    this.initCamera({ setStatus: false });\n    this.initMic({ setStatus: false });\n  };\n\n  private async initCamera(options: { setStatus: boolean }) {\n    // Wait for any in progress camera operation\n    await this.camera.statusChangePromise;\n\n    if (\n      this.state.localParticipant?.videoStream ||\n      !this.permissionsContext.hasPermission('send-video')\n    ) {\n      return;\n    }\n\n    // Set camera direction if it's not yet set\n    if (!this.camera.state.direction && !this.camera.state.selectedDevice) {\n      let defaultDirection: CameraDirection = 'front';\n      const backendSetting = this.state.settings?.video.camera_facing;\n      if (backendSetting) {\n        defaultDirection = backendSetting === 'front' ? 'front' : 'back';\n      }\n      this.camera.state.setDirection(defaultDirection);\n    }\n\n    // Set target resolution\n    const targetResolution = this.state.settings?.video.target_resolution;\n    if (targetResolution) {\n      await this.camera.selectTargetResolution(targetResolution);\n    }\n\n    if (options.setStatus) {\n      // Publish already that was set before we joined\n      if (\n        this.camera.state.status === 'enabled' &&\n        this.camera.state.mediaStream &&\n        !this.publisher?.isPublishing(TrackType.VIDEO)\n      ) {\n        await this.publishVideoStream(this.camera.state.mediaStream, {\n          preferredCodec: this.camera.preferredCodec,\n        });\n      }\n\n      // Start camera if backend config specifies, and there is no local setting\n      if (\n        this.camera.state.status === undefined &&\n        this.state.settings?.video.camera_default_on\n      ) {\n        await this.camera.enable();\n      }\n    }\n  }\n\n  private async initMic(options: { setStatus: boolean }) {\n    // Wait for any in progress mic operation\n    await this.microphone.statusChangePromise;\n\n    if (\n      this.state.localParticipant?.audioStream ||\n      !this.permissionsContext.hasPermission('send-audio')\n    ) {\n      return;\n    }\n\n    if (options.setStatus) {\n      // Publish media stream that was set before we joined\n      if (\n        this.microphone.state.status === 'enabled' &&\n        this.microphone.state.mediaStream &&\n        !this.publisher?.isPublishing(TrackType.AUDIO)\n      ) {\n        await this.publishAudioStream(this.microphone.state.mediaStream);\n      }\n\n      // Start mic if backend config specifies, and there is no local setting\n      if (\n        this.microphone.state.status === undefined &&\n        this.state.settings?.audio.mic_default_on\n      ) {\n        await this.microphone.enable();\n      }\n    }\n  }\n\n  /**\n   * Will begin tracking the given element for visibility changes within the\n   * configured viewport element (`call.setViewport`).\n   *\n   * @param element the element to track.\n   * @param sessionId the session id.\n   * @param trackType the video mode.\n   */\n  trackElementVisibility = <T extends HTMLElement>(\n    element: T,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    return this.dynascaleManager.trackElementVisibility(\n      element,\n      sessionId,\n      trackType,\n    );\n  };\n\n  /**\n   * Sets the viewport element to track bound video elements for visibility.\n   *\n   * @param element the viewport element.\n   */\n  setViewport = <T extends HTMLElement>(element: T) => {\n    return this.dynascaleManager.setViewport(element);\n  };\n\n  /**\n   * Binds a DOM <video> element to the given session id.\n   * This method will make sure that the video element will play\n   * the correct video stream for the given session id.\n   *\n   * Under the hood, it would also keep track of the video element dimensions\n   * and update the subscription accordingly in order to optimize the bandwidth.\n   *\n   * If a \"viewport\" is configured, the video element will be automatically\n   * tracked for visibility and the subscription will be updated accordingly.\n   *\n   * @param videoElement the video element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of video.\n   */\n  bindVideoElement = (\n    videoElement: HTMLVideoElement,\n    sessionId: string,\n    trackType: VideoTrackType,\n  ) => {\n    const unbind = this.dynascaleManager.bindVideoElement(\n      videoElement,\n      sessionId,\n      trackType,\n    );\n\n    if (!unbind) return;\n    this.leaveCallHooks.add(unbind);\n    return () => {\n      this.leaveCallHooks.delete(unbind);\n      unbind();\n    };\n  };\n\n  /**\n   * Binds a DOM <audio> element to the given session id.\n   *\n   * This method will make sure that the audio element will\n   * play the correct audio stream for the given session id.\n   *\n   * @param audioElement the audio element to bind to.\n   * @param sessionId the session id.\n   * @param trackType the kind of audio.\n   */\n  bindAudioElement = (\n    audioElement: HTMLAudioElement,\n    sessionId: string,\n    trackType: AudioTrackType = 'audioTrack',\n  ) => {\n    const unbind = this.dynascaleManager.bindAudioElement(\n      audioElement,\n      sessionId,\n      trackType,\n    );\n\n    if (!unbind) return;\n    this.leaveCallHooks.add(unbind);\n    return () => {\n      this.leaveCallHooks.delete(unbind);\n      unbind();\n    };\n  };\n\n  /**\n   * Binds a DOM <img> element to this call's thumbnail (if enabled in settings).\n   *\n   * @param imageElement the image element to bind to.\n   * @param opts options for the binding.\n   */\n  bindCallThumbnailElement = (\n    imageElement: HTMLImageElement,\n    opts: {\n      fallbackImageSource?: string;\n    } = {},\n  ) => {\n    const handleError = () => {\n      imageElement.src =\n        opts.fallbackImageSource ||\n        'https://getstream.io/random_svg/?name=x&id=x';\n    };\n\n    const unsubscribe = createSubscription(\n      this.state.thumbnails$,\n      (thumbnails) => {\n        if (!thumbnails) return;\n        imageElement.addEventListener('error', handleError);\n\n        const thumbnailUrl = new URL(thumbnails.image_url);\n        thumbnailUrl.searchParams.set('w', String(imageElement.clientWidth));\n        thumbnailUrl.searchParams.set('h', String(imageElement.clientHeight));\n\n        imageElement.src = thumbnailUrl.toString();\n      },\n    );\n\n    return () => {\n      unsubscribe();\n      imageElement.removeEventListener('error', handleError);\n    };\n  };\n}\n","export default null;","import axios from 'axios';\nimport { StableWSConnection } from './connection';\nimport { randomId, sleep } from './utils';\n\nexport type InsightTypes =\n  | 'ws_fatal'\n  | 'ws_success_after_failure'\n  | 'http_hi_failed';\nexport class InsightMetrics {\n  connectionStartTimestamp: number | null;\n  wsConsecutiveFailures: number;\n  wsTotalFailures: number;\n  instanceClientId: string;\n\n  constructor() {\n    this.connectionStartTimestamp = null;\n    this.wsTotalFailures = 0;\n    this.wsConsecutiveFailures = 0;\n    this.instanceClientId = randomId();\n  }\n}\n\n/**\n * postInsights is not supposed to be used by end users directly within chat application, and thus is kept isolated\n * from all the client/connection code/logic.\n *\n * @param insightType\n * @param insights\n */\nexport const postInsights = async (\n  insightType: InsightTypes,\n  insights: Record<string, unknown>,\n) => {\n  const maxAttempts = 3;\n  for (let i = 0; i < maxAttempts; i++) {\n    try {\n      await axios.post(\n        `https://chat-insights.getstream.io/insights/${insightType}`,\n        insights,\n      );\n    } catch (e) {\n      await sleep((i + 1) * 3000);\n      continue;\n    }\n    break;\n  }\n};\n\nexport function buildWsFatalInsight(\n  connection: StableWSConnection,\n  event: Record<string, unknown>,\n) {\n  return {\n    ...event,\n    ...buildWsBaseInsight(connection),\n  };\n}\n\nfunction buildWsBaseInsight(connection: StableWSConnection) {\n  const { client } = connection;\n  return {\n    ready_state: connection.ws?.readyState,\n    url: connection._buildUrl(),\n    api_key: client.key,\n    start_ts: client.insightMetrics.connectionStartTimestamp,\n    end_ts: new Date().getTime(),\n    auth_type: client.getAuthType(),\n    token: client.tokenManager.token,\n    user_id: client.userID,\n    user_details: client._user,\n    // device: client.options.device,\n    device: 'browser',\n    client_id: connection.connectionID,\n    ws_details: connection.ws,\n    ws_consecutive_failures: client.insightMetrics.wsConsecutiveFailures,\n    ws_total_failures: client.insightMetrics.wsTotalFailures,\n    request_id: connection.requestID,\n    online: typeof navigator !== 'undefined' ? navigator?.onLine : null,\n    user_agent: typeof navigator !== 'undefined' ? navigator?.userAgent : null,\n    instance_client_id: client.insightMetrics.instanceClientId,\n  };\n}\n\nexport function buildWsSuccessAfterFailureInsight(\n  connection: StableWSConnection,\n) {\n  return buildWsBaseInsight(connection);\n}\n","import WebSocket from 'isomorphic-ws';\nimport { StreamClient } from './client';\nimport {\n  buildWsFatalInsight,\n  buildWsSuccessAfterFailureInsight,\n  postInsights,\n} from './insights';\nimport {\n  addConnectionEventListeners,\n  convertErrorToJson,\n  KnownCodes,\n  randomId,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport type {\n  ConnectAPIResponse,\n  LogLevel,\n  StreamVideoEvent,\n  UR,\n} from './types';\nimport type {\n  ConnectedEvent,\n  WSAuthMessageRequest,\n} from '../../gen/coordinator';\n\n// Type guards to check WebSocket error type\nconst isCloseEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.CloseEvent =>\n  (res as WebSocket.CloseEvent).code !== undefined;\n\nconst isErrorEvent = (\n  res: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n): res is WebSocket.ErrorEvent =>\n  (res as WebSocket.ErrorEvent).error !== undefined;\n\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n  // local vars\n  connectionID?: string;\n  connectionOpen?: ConnectAPIResponse;\n  authenticationSent: boolean;\n  consecutiveFailures: number;\n  pingInterval: number;\n  healthCheckTimeoutRef?: NodeJS.Timeout;\n  isConnecting: boolean;\n  isDisconnected: boolean;\n  isHealthy: boolean;\n  isResolved?: boolean;\n  lastEvent: Date | null;\n  connectionCheckTimeout: number;\n  connectionCheckTimeoutRef?: NodeJS.Timeout;\n  rejectPromise?: (\n    reason?: Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    },\n  ) => void;\n  requestID: string | undefined;\n  resolvePromise?: (value: ConnectedEvent) => void;\n  totalFailures: number;\n  ws?: WebSocket;\n  wsID: number;\n\n  client: StreamClient;\n\n  constructor(client: StreamClient) {\n    this.client = client;\n    /** consecutive failures influence the duration of the timeout */\n    this.consecutiveFailures = 0;\n    /** keep track of the total number of failures */\n    this.totalFailures = 0;\n    /** We only make 1 attempt to reconnect at the same time.. */\n    this.isConnecting = false;\n    /** True after the auth payload is sent to the server */\n    this.authenticationSent = false;\n    /** To avoid reconnect if client is disconnected */\n    this.isDisconnected = false;\n    /** Boolean that indicates if the connection promise is resolved */\n    this.isResolved = false;\n    /** Boolean that indicates if we have a working connection to the server */\n    this.isHealthy = false;\n    /** Incremented when a new WS connection is made */\n    this.wsID = 1;\n    /** Store the last event time for health checks */\n    this.lastEvent = null;\n    /** Send a health check message every 25 seconds */\n    this.pingInterval = 25 * 1000;\n    this.connectionCheckTimeout = this.pingInterval + 10 * 1000;\n\n    addConnectionEventListeners(this.onlineStatusChanged);\n  }\n\n  _log = (msg: string, extra: UR = {}, level: LogLevel = 'info') => {\n    this.client.logger(level, 'connection:' + msg, {\n      ...extra,\n    });\n  };\n\n  setClient = (client: StreamClient) => {\n    this.client = client;\n  };\n\n  /**\n   * connect - Connect to the WS URL\n   * the default 15s timeout allows between 2~3 tries\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async connect(timeout = 15000) {\n    if (this.isConnecting) {\n      throw Error(\n        `You've called connect twice, can only attempt 1 connection at the time`,\n      );\n    }\n\n    this.isDisconnected = false;\n\n    try {\n      const healthCheck = await this._connect();\n      this.consecutiveFailures = 0;\n\n      this._log(\n        `connect() - Established ws connection with healthcheck: ${healthCheck}`,\n      );\n    } catch (error) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n\n      if (\n        // @ts-ignore\n        error.code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        this._log(\n          'connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n        this._reconnect({ refreshToken: true });\n      } else {\n        // @ts-ignore\n        if (!error.isWSFailure) {\n          // API rejected the connection and we should not retry\n          throw new Error(\n            JSON.stringify({\n              // @ts-ignore\n              code: error.code,\n              // @ts-ignore\n              StatusCode: error.StatusCode,\n              // @ts-ignore\n              message: error.message,\n              // @ts-ignore\n              isWSFailure: error.isWSFailure,\n            }),\n          );\n        }\n      }\n    }\n\n    return await this._waitForHealthy(timeout);\n  }\n\n  /**\n   * _waitForHealthy polls the promise connection to see if its resolved until it times out\n   * the default 15s timeout allows between 2~3 tries\n   * @param timeout duration(ms)\n   */\n  async _waitForHealthy(timeout = 15000) {\n    return Promise.race([\n      (async () => {\n        const interval = 50; // ms\n        for (let i = 0; i <= timeout; i += interval) {\n          try {\n            return await this.connectionOpen;\n          } catch (error: any) {\n            if (i === timeout) {\n              throw new Error(\n                JSON.stringify({\n                  code: error.code,\n                  StatusCode: error.StatusCode,\n                  message: error.message,\n                  isWSFailure: error.isWSFailure,\n                }),\n              );\n            }\n            await sleep(interval);\n          }\n        }\n      })(),\n      (async () => {\n        await sleep(timeout);\n        this.isConnecting = false;\n        throw new Error(\n          JSON.stringify({\n            code: '',\n            StatusCode: '',\n            message: 'initial WS connection could not be established',\n            isWSFailure: true,\n          }),\n        );\n      })(),\n    ]);\n  }\n\n  /**\n   * Builds and returns the url for websocket.\n   * @private\n   * @returns url string\n   */\n  _buildUrl = () => {\n    const params = new URLSearchParams();\n    // const qs = encodeURIComponent(this.client._buildWSPayload(this.requestID));\n    // params.set('json', qs);\n    params.set('api_key', this.client.key);\n    params.set('stream-auth-type', this.client.getAuthType());\n    params.set('X-Stream-Client', this.client.getUserAgent());\n    // params.append('authorization', this.client._getToken()!);\n\n    return `${this.client.wsBaseURL}/connect?${params.toString()}`;\n  };\n\n  /**\n   * disconnect - Disconnect the connection and doesn't recover...\n   *\n   */\n  disconnect(timeout?: number) {\n    this._log(\n      `disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n    );\n\n    this.wsID += 1;\n    this.isConnecting = false;\n    this.isDisconnected = true;\n\n    // start by removing all the listeners\n    if (this.healthCheckTimeoutRef) {\n      clearInterval(this.healthCheckTimeoutRef);\n    }\n    if (this.connectionCheckTimeoutRef) {\n      clearInterval(this.connectionCheckTimeoutRef);\n    }\n\n    removeConnectionEventListeners(this.onlineStatusChanged);\n\n    this.isHealthy = false;\n\n    // remove ws handlers...\n    if (this.ws && this.ws.removeAllListeners) {\n      this.ws.removeAllListeners();\n    }\n\n    let isClosedPromise: Promise<void>;\n    // and finally close...\n    // Assigning to local here because we will remove it from this before the\n    // promise resolves.\n    const { ws } = this;\n    if (ws && ws.close && ws.readyState === ws.OPEN) {\n      isClosedPromise = new Promise((resolve) => {\n        const onclose = (event: WebSocket.CloseEvent) => {\n          this._log(\n            `disconnect() - resolving isClosedPromise ${\n              event ? 'with' : 'without'\n            } close frame`,\n            { event },\n          );\n          resolve();\n        };\n\n        ws.onclose = onclose;\n        // In case we don't receive close frame websocket server in time,\n        // lets not wait for more than 1 second.\n        setTimeout(onclose, timeout != null ? timeout : 1000);\n      });\n\n      this._log(\n        `disconnect() - Manually closed connection by calling client.disconnect()`,\n      );\n\n      ws.close(\n        KnownCodes.WS_CLOSED_SUCCESS,\n        'Manually closed connection by calling client.disconnect()',\n      );\n    } else {\n      this._log(\n        `disconnect() - ws connection doesn't exist or it is already closed.`,\n      );\n      isClosedPromise = Promise.resolve();\n    }\n\n    delete this.ws;\n\n    return isClosedPromise;\n  }\n\n  /**\n   * _connect - Connect to the WS endpoint\n   *\n   * @return {ConnectAPIResponse<ConnectedEvent>} Promise that completes once the first health check message is received\n   */\n  async _connect() {\n    if (\n      this.isConnecting ||\n      (this.isDisconnected && this.client.options.enableWSFallback)\n    )\n      return; // simply ignore _connect if it's currently trying to connect\n    this.isConnecting = true;\n    this.requestID = randomId();\n    this.client.insightMetrics.connectionStartTimestamp = new Date().getTime();\n    let isTokenReady = false;\n    try {\n      this._log(`_connect() - waiting for token`);\n      await this.client.tokenManager.tokenReady();\n      isTokenReady = true;\n    } catch (e) {\n      // token provider has failed before, so try again\n    }\n\n    try {\n      if (!isTokenReady) {\n        this._log(\n          `_connect() - tokenProvider failed before, so going to retry`,\n        );\n        await this.client.tokenManager.loadToken();\n      }\n\n      this._setupConnectionPromise();\n      const wsURL = this._buildUrl();\n      this._log(`_connect() - Connecting to ${wsURL}`, {\n        wsURL,\n        requestID: this.requestID,\n      });\n      this.ws = new WebSocket(wsURL);\n      this.ws.onopen = this.onopen.bind(this, this.wsID);\n      this.ws.onclose = this.onclose.bind(this, this.wsID);\n      this.ws.onerror = this.onerror.bind(this, this.wsID);\n      this.ws.onmessage = this.onmessage.bind(this, this.wsID);\n      const response = await this.connectionOpen;\n      this.isConnecting = false;\n\n      if (response) {\n        this.connectionID = response.connection_id;\n        this.client.resolveConnectionId?.(this.connectionID);\n        if (\n          this.client.insightMetrics.wsConsecutiveFailures > 0 &&\n          this.client.options.enableInsights\n        ) {\n          postInsights(\n            'ws_success_after_failure',\n            buildWsSuccessAfterFailureInsight(\n              this as unknown as StableWSConnection,\n            ),\n          );\n          this.client.insightMetrics.wsConsecutiveFailures = 0;\n        }\n        return response;\n      }\n    } catch (err) {\n      this.isConnecting = false;\n      // @ts-ignore\n      this._log(`_connect() - Error - `, err);\n      if (this.client.options.enableInsights) {\n        this.client.insightMetrics.wsConsecutiveFailures++;\n        this.client.insightMetrics.wsTotalFailures++;\n\n        const insights = buildWsFatalInsight(\n          this as unknown as StableWSConnection,\n          convertErrorToJson(err as Error),\n        );\n        postInsights?.('ws_fatal', insights);\n      }\n      this.client.rejectConnectionId?.();\n      throw err;\n    }\n  }\n\n  /**\n   * _reconnect - Retry the connection to WS endpoint\n   *\n   * @param {{ interval?: number; refreshToken?: boolean }} options Following options are available\n   *\n   * - `interval`\t{int}\t\t\tnumber of ms that function should wait before reconnecting\n   * - `refreshToken` {boolean}\treload/refresh user token be refreshed before attempting reconnection.\n   */\n  async _reconnect(\n    options: { interval?: number; refreshToken?: boolean } = {},\n  ): Promise<void> {\n    this._log('_reconnect() - Initiating the reconnect');\n\n    // only allow 1 connection at the time\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (1) since already connecting or healthy');\n      return;\n    }\n\n    // reconnect in case of on error or on close\n    // also reconnect if the health check cycle fails\n    let interval = options.interval;\n    if (!interval) {\n      interval = retryInterval(this.consecutiveFailures);\n    }\n    // reconnect, or try again after a little while...\n    await sleep(interval);\n\n    // Check once again if by some other call to _reconnect is active or connection is\n    // already restored, then no need to proceed.\n    if (this.isConnecting || this.isHealthy) {\n      this._log('_reconnect() - Abort (2) since already connecting or healthy');\n      return;\n    }\n\n    if (this.isDisconnected && this.client.options.enableWSFallback) {\n      this._log('_reconnect() - Abort (3) since disconnect() is called');\n      return;\n    }\n\n    this._log('_reconnect() - Destroying current WS connection');\n\n    // cleanup the old connection\n    this._destroyCurrentWSConnection();\n\n    if (options.refreshToken) {\n      await this.client.tokenManager.loadToken();\n    }\n\n    try {\n      await this._connect();\n      this._log('_reconnect() - Waiting for recoverCallBack');\n      // await this.client.recoverState();\n      this._log('_reconnect() - Finished recoverCallBack');\n\n      this.consecutiveFailures = 0;\n    } catch (error: any) {\n      this.isHealthy = false;\n      this.consecutiveFailures += 1;\n      if (\n        error.code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        this._log(\n          '_reconnect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n\n        return this._reconnect({ refreshToken: true });\n      }\n\n      // reconnect on WS failures, don't reconnect if there is a code bug\n      if (error.isWSFailure) {\n        this._log('_reconnect() - WS failure, so going to try to reconnect');\n\n        this._reconnect();\n      }\n    }\n    this._log('_reconnect() - == END ==');\n  }\n\n  /**\n   * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n   *\n   * @param {Event} event Event with type online or offline\n   *\n   */\n  onlineStatusChanged = (event: Event) => {\n    if (event.type === 'offline') {\n      // mark the connection as down\n      this._log('onlineStatusChanged() - Status changing to offline');\n      // we know that the app is offline so dispatch the unhealthy connection event immediately\n      this._setHealth(false, true);\n    } else if (event.type === 'online') {\n      // retry right now...\n      // We check this.isHealthy, not sure if it's always\n      // smart to create a new WS connection if the old one is still up and running.\n      // it's possible we didn't miss any messages, so this process is just expensive and not needed.\n      this._log(\n        `onlineStatusChanged() - Status changing to online. isHealthy: ${this.isHealthy}`,\n      );\n      if (!this.isHealthy) {\n        this._reconnect({ interval: 10 });\n      }\n    }\n  };\n\n  onopen = (wsID: number) => {\n    if (this.wsID !== wsID) return;\n\n    const user = this.client.user;\n    if (!user) {\n      this.client.logger('error', `User not set, can't connect to WS`);\n      return;\n    }\n\n    const token = this.client._getToken();\n    if (!token) {\n      this.client.logger('error', `Token not set, can't connect authenticate`);\n      return;\n    }\n\n    const authMessage: WSAuthMessageRequest = {\n      token,\n      user_details: {\n        id: user.id,\n        name: user.name,\n        image: user.image,\n        custom: user.custom,\n      },\n    };\n\n    this.authenticationSent = true;\n    this.ws?.send(JSON.stringify(authMessage));\n    this._log('onopen() - onopen callback', { wsID });\n  };\n\n  onmessage = (wsID: number, event: WebSocket.MessageEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onmessage() - onmessage callback', { event, wsID });\n    const data =\n      typeof event.data === 'string'\n        ? (JSON.parse(event.data) as StreamVideoEvent)\n        : null;\n\n    // we wait till the first message before we consider the connection open.\n    // the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n    // after that a ws.onclose.\n    if (!this.isResolved && data && data.type === 'connection.error') {\n      this.isResolved = true;\n      if (data.error) {\n        // @ts-expect-error - the types of _errorFromWSEvent are incorrect\n        this.rejectPromise?.(this._errorFromWSEvent(data, false));\n        return;\n      }\n    }\n\n    // trigger the event..\n    this.lastEvent = new Date();\n\n    if (\n      data &&\n      (data.type === 'health.check' || data.type === 'connection.ok')\n    ) {\n      // the initial health-check should come from the client\n      this.scheduleNextPing();\n    }\n\n    if (data && data.type === 'connection.ok') {\n      this.resolvePromise?.(data);\n      this._setHealth(true);\n    }\n\n    if (data && data.type === 'connection.error' && data.error) {\n      const { code } = data.error;\n      this.isHealthy = false;\n      this.isConnecting = false;\n      this.consecutiveFailures += 1;\n      if (\n        code === KnownCodes.TOKEN_EXPIRED &&\n        !this.client.tokenManager.isStatic()\n      ) {\n        clearTimeout(this.connectionCheckTimeoutRef);\n        this._log(\n          'connect() - WS failure due to expired token, so going to try to reload token and reconnect',\n        );\n        this._reconnect({ refreshToken: true });\n      }\n    }\n\n    if (data) {\n      this.client.dispatchEvent(data);\n    }\n    this.scheduleConnectionCheck();\n  };\n\n  onclose = (wsID: number, event: WebSocket.CloseEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this._log('onclose() - onclose callback - ' + event.code, { event, wsID });\n\n    if (event.code === KnownCodes.WS_CLOSED_SUCCESS) {\n      // this is a permanent error raised by stream..\n      // usually caused by invalid auth details\n      const error = new Error(\n        `WS connection reject with error ${event.reason}`,\n      ) as Error & WebSocket.CloseEvent;\n\n      error.reason = event.reason;\n      error.code = event.code;\n      error.wasClean = event.wasClean;\n      error.target = event.target;\n\n      this.rejectPromise?.(error);\n      this._log(`onclose() - WS connection reject with error ${event.reason}`, {\n        event,\n      });\n    } else {\n      this.consecutiveFailures += 1;\n      this.totalFailures += 1;\n      this._setHealth(false);\n      this.isConnecting = false;\n\n      this.rejectPromise?.(this._errorFromWSEvent(event));\n\n      this._log(`onclose() - WS connection closed. Calling reconnect ...`, {\n        event,\n      });\n\n      // reconnect if its an abnormal failure\n      this._reconnect();\n    }\n  };\n\n  onerror = (wsID: number, event: WebSocket.ErrorEvent) => {\n    if (this.wsID !== wsID) return;\n\n    this.consecutiveFailures += 1;\n    this.totalFailures += 1;\n    this._setHealth(false);\n    this.isConnecting = false;\n    this.rejectPromise?.(this._errorFromWSEvent(event));\n    this._log(`onerror() - WS connection resulted into error`, { event });\n\n    this._reconnect();\n  };\n\n  /**\n   * _setHealth - Sets the connection to healthy or unhealthy.\n   * Broadcasts an event in case the connection status changed.\n   *\n   * @param {boolean} healthy boolean indicating if the connection is healthy or not\n   * @param {boolean} dispatchImmediately boolean indicating to dispatch event immediately even if the connection is unhealthy\n   *\n   */\n  _setHealth = (healthy: boolean, dispatchImmediately = false) => {\n    if (healthy === this.isHealthy) return;\n\n    this.isHealthy = healthy;\n\n    if (this.isHealthy || dispatchImmediately) {\n      this.client.dispatchEvent({\n        type: 'connection.changed',\n        online: this.isHealthy,\n      });\n      return;\n    }\n\n    // we're offline, wait few seconds and fire and event if still offline\n    setTimeout(() => {\n      if (this.isHealthy) return;\n      this.client.dispatchEvent({\n        type: 'connection.changed',\n        online: this.isHealthy,\n      });\n    }, 5000);\n  };\n\n  /**\n   * _errorFromWSEvent - Creates an error object for the WS event\n   *\n   */\n  _errorFromWSEvent = (\n    event: WebSocket.CloseEvent | WebSocket.Data | WebSocket.ErrorEvent,\n    isWSFailure = true,\n  ) => {\n    let code;\n    let statusCode;\n    let message;\n    if (isCloseEvent(event)) {\n      code = event.code;\n      statusCode = 'unknown';\n      message = event.reason;\n    }\n\n    if (isErrorEvent(event)) {\n      code = event.error.code;\n      statusCode = event.error.StatusCode;\n      message = event.error.message;\n    }\n\n    // Keeping this `warn` level log, to avoid cluttering of error logs from ws failures.\n    this._log(\n      `_errorFromWSEvent() - WS failed with code ${code}`,\n      { event },\n      'warn',\n    );\n\n    const error = new Error(\n      `WS failed with code ${code} and reason - ${message}`,\n    ) as Error & {\n      code?: string | number;\n      isWSFailure?: boolean;\n      StatusCode?: string | number;\n    };\n    error.code = code;\n    /**\n     * StatusCode does not exist on any event types but has been left\n     * as is to preserve JS functionality during the TS implementation\n     */\n    error.StatusCode = statusCode;\n    error.isWSFailure = isWSFailure;\n    return error;\n  };\n\n  /**\n   * _destroyCurrentWSConnection - Removes the current WS connection\n   *\n   */\n  _destroyCurrentWSConnection() {\n    // increment the ID, meaning we will ignore all messages from the old\n    // ws connection from now on.\n    this.wsID += 1;\n\n    try {\n      this?.ws?.removeAllListeners();\n      this?.ws?.close();\n    } catch (e) {\n      // we don't care\n    }\n  }\n\n  /**\n   * _setupPromise - sets up the this.connectOpen promise\n   */\n  _setupConnectionPromise = () => {\n    this.isResolved = false;\n    /** a promise that is resolved once ws.open is called */\n    this.connectionOpen = new Promise<ConnectedEvent>((resolve, reject) => {\n      this.resolvePromise = resolve;\n      this.rejectPromise = reject;\n    });\n  };\n\n  /**\n   * Schedules a next health check ping for websocket.\n   */\n  scheduleNextPing = () => {\n    if (this.healthCheckTimeoutRef) {\n      clearTimeout(this.healthCheckTimeoutRef);\n    }\n\n    // 30 seconds is the recommended interval (messenger uses this)\n    this.healthCheckTimeoutRef = setTimeout(() => {\n      // send the healthcheck..., server replies with a health check event\n      const data = [{ type: 'health.check', client_id: this.client.clientID }];\n      // try to send on the connection\n      try {\n        this.ws?.send(JSON.stringify(data));\n      } catch (e) {\n        // error will already be detected elsewhere\n      }\n    }, this.pingInterval);\n  };\n\n  /**\n   * scheduleConnectionCheck - schedules a check for time difference between last received event and now.\n   * If the difference is more than 35 seconds, it means our health check logic has failed and websocket needs\n   * to be reconnected.\n   */\n  scheduleConnectionCheck = () => {\n    if (this.connectionCheckTimeoutRef) {\n      clearTimeout(this.connectionCheckTimeoutRef);\n    }\n\n    this.connectionCheckTimeoutRef = setTimeout(() => {\n      const now = new Date();\n      if (\n        this.lastEvent &&\n        now.getTime() - this.lastEvent.getTime() > this.connectionCheckTimeout\n      ) {\n        this._log('scheduleConnectionCheck - going to reconnect');\n        this._setHealth(false);\n        this._reconnect();\n      }\n    }, this.connectionCheckTimeout);\n  };\n}\n","import { fromByteArray } from 'base64-js';\n\nfunction isString<T>(arrayOrString: string | T[]): arrayOrString is string {\n  return typeof (arrayOrString as string) === 'string';\n}\n\ntype MapGenericCallback<T, U> = (value: T, index: number, array: T[]) => U;\ntype MapStringCallback<U> = (value: string, index: number, string: string) => U;\n\nfunction isMapStringCallback<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): callback is MapStringCallback<U> {\n  return !!callback && isString(arrayOrString);\n}\n\n// source - https://github.com/beatgammit/base64-js/blob/master/test/convert.js#L72\nfunction map<T, U>(array: T[], callback: MapGenericCallback<T, U>): U[];\nfunction map<U>(string: string, callback: MapStringCallback<U>): U[];\nfunction map<T, U>(\n  arrayOrString: string | T[],\n  callback: MapGenericCallback<T, U> | MapStringCallback<U>,\n): U[] {\n  const res = [];\n\n  if (isString(arrayOrString) && isMapStringCallback(arrayOrString, callback)) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (arrayOrString.charAt(k)) {\n        const kValue = arrayOrString.charAt(k);\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  } else if (\n    !isString(arrayOrString) &&\n    !isMapStringCallback(arrayOrString, callback)\n  ) {\n    for (let k = 0, len = arrayOrString.length; k < len; k++) {\n      if (k in arrayOrString) {\n        const kValue = arrayOrString[k];\n        const mappedValue = callback(kValue, k, arrayOrString);\n        res[k] = mappedValue;\n      }\n    }\n  }\n\n  return res;\n}\n\nexport const encodeBase64 = (data: string): string =>\n  fromByteArray(new Uint8Array(map(data, (char) => char.charCodeAt(0))));\n\n// base-64 decoder throws exception if encoded string is not padded by '=' to make string length\n// in multiples of 4. So gonna use our own method for this purpose to keep backwards compatibility\n// https://github.com/beatgammit/base64-js/blob/master/index.js#L26\nexport const decodeBase64 = (s: string): string => {\n  const e = {} as { [key: string]: number },\n    w = String.fromCharCode,\n    L = s.length;\n  let i,\n    b = 0,\n    c,\n    x,\n    l = 0,\n    a,\n    r = '';\n  const A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  for (i = 0; i < 64; i++) {\n    e[A.charAt(i)] = i;\n  }\n  for (x = 0; x < L; x++) {\n    c = e[s.charAt(x)];\n    b = (b << 6) + c;\n    l += 6;\n    while (l >= 8) {\n      ((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n    }\n  }\n  return r;\n};\n","import { decodeBase64, encodeBase64 } from './base64';\n\n/**\n *\n * @param {string} userId the id of the user\n * @return {string}\n */\nexport function DevToken(userId: string) {\n  return [\n    'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n    encodeBase64(JSON.stringify({ user_id: userId })),\n    'devtoken', // hardcoded signature\n  ].join('.');\n}\n\nexport function UserFromToken(token: string) {\n  const fragments = token.split('.');\n  if (fragments.length !== 3) {\n    return '';\n  }\n  const b64Payload = fragments[1];\n  const payload = decodeBase64(b64Payload);\n  const data = JSON.parse(payload);\n  return data.user_id as string;\n}\n","import { UserFromToken } from './signing';\nimport { isFunction } from './utils';\nimport type { TokenOrProvider, UserWithId } from './types';\n\n/**\n * TokenManager\n *\n * Handles all the operations around user token.\n */\nexport class TokenManager {\n  loadTokenPromise: Promise<string> | null;\n  type: 'static' | 'provider';\n  secret?: string;\n  token?: string;\n  tokenProvider?: TokenOrProvider;\n  user?: UserWithId;\n  /**\n   * Constructor\n   *\n   * @param {Secret} secret\n   */\n  constructor(secret?: string) {\n    this.loadTokenPromise = null;\n    if (secret) {\n      this.secret = secret;\n    }\n\n    this.type = 'static';\n  }\n\n  /**\n   * Set the static string token or token provider.\n   * Token provider should return a token string or a promise which resolves to string token.\n   *\n   * @param {TokenOrProvider} tokenOrProvider - the token or token provider.\n   * @param {UserResponse} user - the user object.\n   * @param {boolean} isAnonymous - whether the user is anonymous or not.\n   */\n  setTokenOrProvider = async (\n    tokenOrProvider: TokenOrProvider,\n    user: UserWithId,\n    isAnonymous: boolean,\n  ) => {\n    this.validateToken(tokenOrProvider, user, isAnonymous);\n    this.user = user;\n\n    if (isFunction(tokenOrProvider)) {\n      this.tokenProvider = tokenOrProvider;\n      this.type = 'provider';\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      this.token = tokenOrProvider;\n      this.type = 'static';\n    }\n\n    await this.loadToken();\n  };\n\n  /**\n   * Resets the token manager.\n   * Useful for client disconnection or switching user.\n   */\n  reset = () => {\n    this.token = undefined;\n    this.user = undefined;\n    this.loadTokenPromise = null;\n  };\n\n  // Validates the user token.\n  validateToken = (\n    tokenOrProvider: TokenOrProvider,\n    user: UserWithId,\n    isAnonymous: boolean,\n  ) => {\n    // allow empty token for anon user\n    if (user && isAnonymous && !tokenOrProvider) return;\n\n    // Don't allow empty token for non-server side client.\n    if (!this.secret && !tokenOrProvider) {\n      throw new Error('UserWithId token can not be empty');\n    }\n\n    if (\n      tokenOrProvider &&\n      typeof tokenOrProvider !== 'string' &&\n      !isFunction(tokenOrProvider)\n    ) {\n      throw new Error('user token should either be a string or a function');\n    }\n\n    if (typeof tokenOrProvider === 'string') {\n      // Allow empty token for anonymous users\n      if (isAnonymous && tokenOrProvider === '') return;\n\n      const tokenUserId = UserFromToken(tokenOrProvider);\n      if (\n        tokenOrProvider != null &&\n        (tokenUserId == null ||\n          tokenUserId === '' ||\n          (!isAnonymous && tokenUserId !== user.id))\n      ) {\n        throw new Error(\n          'userToken does not have a user_id or is not matching with user.id',\n        );\n      }\n    }\n  };\n\n  // Resolves when token is ready. This function is simply to check if loadToken is in progress, in which\n  // case a function should wait.\n  tokenReady = () => this.loadTokenPromise;\n\n  // Fetches a token from tokenProvider function and sets in tokenManager.\n  // In case of static token, it will simply resolve to static token.\n  loadToken = () => {\n    // eslint-disable-next-line no-async-promise-executor\n    this.loadTokenPromise = new Promise(async (resolve, reject) => {\n      if (this.type === 'static') {\n        return resolve(this.token as string);\n      }\n\n      if (this.tokenProvider && typeof this.tokenProvider !== 'string') {\n        try {\n          this.token = await this.tokenProvider();\n        } catch (e) {\n          return reject(\n            new Error(`Call to tokenProvider failed with message: ${e}`),\n          );\n        }\n        resolve(this.token);\n      }\n    });\n\n    return this.loadTokenPromise;\n  };\n\n  // Returns a current token\n  getToken = () => {\n    if (this.token) {\n      return this.token;\n    }\n\n    if (this.user && !this.token) {\n      return this.token;\n    }\n\n    throw new Error(\n      `Both secret and user tokens are not set. Either client.connectUser wasn't called or client.disconnect was called`,\n    );\n  };\n\n  isStatic = () => this.type === 'static';\n}\n","import { AxiosResponse } from 'axios';\nimport { APIErrorResponse } from './types';\n\nexport const APIErrorCodes: Record<\n  string,\n  { name: string; retryable: boolean }\n> = {\n  '-1': { name: 'InternalSystemError', retryable: true },\n  '2': { name: 'AccessKeyError', retryable: false },\n  '3': { name: 'AuthenticationFailedError', retryable: true },\n  '4': { name: 'InputError', retryable: false },\n  '6': { name: 'DuplicateUsernameError', retryable: false },\n  '9': { name: 'RateLimitError', retryable: true },\n  '16': { name: 'DoesNotExistError', retryable: false },\n  '17': { name: 'NotAllowedError', retryable: false },\n  '18': { name: 'EventNotSupportedError', retryable: false },\n  '19': { name: 'ChannelFeatureNotSupportedError', retryable: false },\n  '20': { name: 'MessageTooLongError', retryable: false },\n  '21': { name: 'MultipleNestingLevelError', retryable: false },\n  '22': { name: 'PayloadTooBigError', retryable: false },\n  '23': { name: 'RequestTimeoutError', retryable: true },\n  '24': { name: 'MaxHeaderSizeExceededError', retryable: false },\n  '40': { name: 'AuthErrorTokenExpired', retryable: false },\n  '41': { name: 'AuthErrorTokenNotValidYet', retryable: false },\n  '42': { name: 'AuthErrorTokenUsedBeforeIssuedAt', retryable: false },\n  '43': { name: 'AuthErrorTokenSignatureInvalid', retryable: false },\n  '44': { name: 'CustomCommandEndpointMissingError', retryable: false },\n  '45': { name: 'CustomCommandEndpointCallError', retryable: true },\n  '46': { name: 'ConnectionIDNotFoundError', retryable: false },\n  '60': { name: 'CoolDownError', retryable: true },\n  '69': { name: 'ErrWrongRegion', retryable: false },\n  '70': { name: 'ErrQueryChannelPermissions', retryable: false },\n  '71': { name: 'ErrTooManyConnections', retryable: true },\n  '99': { name: 'AppSuspendedError', retryable: false },\n};\n\n// todo: this is not a correct error declaration. /recordings endpoint returns error objects as follows:\n// {\n//     \"code\": 16,\n//     \"message\": \"ListRecordings failed with error: \\\"Can't find call with id default:bbbb\\\"\",\n//     \"StatusCode\": 404,\n//     \"duration\": \"0.00ms\",\n//     \"more_info\": \"https://getstream.io/chat/docs/api_errors_response\",\n//     \"details\": []\n// }\n\ntype APIError = Error & { code: number; isWSFailure?: boolean };\n\nexport function isAPIError(error: Error): error is APIError {\n  return (error as APIError).code !== undefined;\n}\n\nexport function isErrorRetryable(error: APIError) {\n  if (!error.code) return false;\n  const err = APIErrorCodes[`${error.code}`];\n  if (!err) return false;\n  return err.retryable;\n}\n\nexport function isConnectionIDError(error: APIError) {\n  return error.code === 46; // ConnectionIDNotFoundError\n}\n\nexport function isWSFailure(err: APIError): boolean {\n  if (typeof err.isWSFailure === 'boolean') {\n    return err.isWSFailure;\n  }\n\n  try {\n    return JSON.parse(err.message).isWSFailure;\n  } catch (_) {\n    return false;\n  }\n}\n\nexport function isErrorResponse(\n  res: AxiosResponse<unknown>,\n): res is AxiosResponse<APIErrorResponse> {\n  return !res.status || res.status < 200 || 300 <= res.status;\n}\n","import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\nimport { StreamClient } from './client';\nimport {\n  addConnectionEventListeners,\n  removeConnectionEventListeners,\n  retryInterval,\n  sleep,\n} from './utils';\nimport { isAPIError, isConnectionIDError, isErrorRetryable } from './errors';\nimport { LogLevel, StreamVideoEvent, UR } from './types';\nimport { ConnectedEvent } from '../../gen/coordinator';\n\nexport enum ConnectionState {\n  Closed = 'CLOSED',\n  Connected = 'CONNECTED',\n  Connecting = 'CONNECTING',\n  Disconnected = 'DISCONNECTED',\n  Init = 'INIT',\n}\n\nexport class WSConnectionFallback {\n  client: StreamClient;\n  state: ConnectionState;\n  consecutiveFailures: number;\n  connectionID?: string;\n  cancelToken?: CancelTokenSource;\n\n  constructor(client: StreamClient) {\n    this.client = client;\n    this.state = ConnectionState.Init;\n    this.consecutiveFailures = 0;\n\n    addConnectionEventListeners(this._onlineStatusChanged);\n  }\n\n  _log(msg: string, extra: UR = {}, level: LogLevel = 'info') {\n    this.client.logger(level, 'WSConnectionFallback:' + msg, {\n      ...extra,\n    });\n  }\n\n  _setState(state: ConnectionState) {\n    this._log(`_setState() - ${state}`);\n\n    // transition from connecting => connected\n    if (\n      this.state === ConnectionState.Connecting &&\n      state === ConnectionState.Connected\n    ) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: true });\n    }\n\n    if (\n      state === ConnectionState.Closed ||\n      state === ConnectionState.Disconnected\n    ) {\n      this.client.dispatchEvent({ type: 'connection.changed', online: false });\n    }\n\n    this.state = state;\n  }\n\n  /** @private */\n  _onlineStatusChanged = (event: { type: string }) => {\n    this._log(`_onlineStatusChanged() - ${event.type}`);\n\n    if (event.type === 'offline') {\n      this._setState(ConnectionState.Closed);\n      this.cancelToken?.cancel('disconnect() is called');\n      this.cancelToken = undefined;\n      return;\n    }\n\n    if (event.type === 'online' && this.state === ConnectionState.Closed) {\n      this.connect(true);\n    }\n  };\n\n  /** @private */\n  _req = async <T = UR>(\n    params: UR,\n    config: AxiosRequestConfig,\n    retry: boolean,\n  ): Promise<T> => {\n    if (!this.cancelToken && !params.close) {\n      this.cancelToken = axios.CancelToken.source();\n    }\n\n    try {\n      const res = await this.client.doAxiosRequest<T>(\n        'get',\n        (this.client.baseURL as string).replace(':3030', ':8900') + '/longpoll', // replace port if present for testing with local API\n        undefined,\n        {\n          config: { ...config, cancelToken: this.cancelToken?.token },\n          params,\n          publicEndpoint: true,\n        },\n      );\n\n      this.consecutiveFailures = 0; // always reset in case of no error\n      return res;\n    } catch (err) {\n      this.consecutiveFailures += 1;\n\n      // @ts-ignore\n      if (retry && isErrorRetryable(err)) {\n        this._log(`_req() - Retryable error, retrying request`);\n        await sleep(retryInterval(this.consecutiveFailures));\n        return this._req<T>(params, config, retry);\n      }\n\n      throw err;\n    }\n  };\n\n  /** @private */\n  _poll = async () => {\n    while (this.state === ConnectionState.Connected) {\n      try {\n        const data = await this._req<{\n          events: StreamVideoEvent[];\n        }>(\n          {},\n          {\n            timeout: 30000,\n          },\n          true,\n        ); // 30s => API responds in 20s if there is no event\n\n        if (data.events?.length) {\n          for (let i = 0; i < data.events.length; i++) {\n            this.client.dispatchEvent(data.events[i]);\n          }\n        }\n      } catch (err) {\n        if (axios.isCancel(err)) {\n          this._log(`_poll() - axios canceled request`);\n          return;\n        }\n\n        /** client.doAxiosRequest will take care of TOKEN_EXPIRED error */\n\n        // @ts-ignore\n        if (isConnectionIDError(err)) {\n          this._log(`_poll() - ConnectionID error, connecting without ID...`);\n          this._setState(ConnectionState.Disconnected);\n          this.connect(true);\n          return;\n        }\n\n        // @ts-ignore\n        if (isAPIError(err) && !isErrorRetryable(err)) {\n          this._setState(ConnectionState.Closed);\n          return;\n        }\n\n        await sleep(retryInterval(this.consecutiveFailures));\n      }\n    }\n  };\n\n  /**\n   * connect try to open a longpoll request\n   * @param reconnect should be false for first call and true for subsequent calls to keep the connection alive and call recoverState\n   */\n  connect = async (reconnect = false) => {\n    if (this.state === ConnectionState.Connecting) {\n      this._log(\n        'connect() - connecting already in progress',\n        { reconnect },\n        'warn',\n      );\n      return;\n    }\n    if (this.state === ConnectionState.Connected) {\n      this._log(\n        'connect() - already connected and polling',\n        { reconnect },\n        'warn',\n      );\n      return;\n    }\n\n    this._setState(ConnectionState.Connecting);\n    this.connectionID = undefined; // connect should be sent with empty connection_id so API creates one\n    try {\n      const { event } = await this._req<{\n        event: ConnectedEvent;\n      }>(\n        { json: this.client._buildWSPayload() },\n        {\n          timeout: 8000, // 8s\n        },\n        reconnect,\n      );\n\n      this._setState(ConnectionState.Connected);\n      this.connectionID = event.connection_id;\n      this.client.resolveConnectionId?.();\n      // @ts-expect-error\n      this.client.dispatchEvent(event);\n      this._poll();\n      return event;\n    } catch (err) {\n      this._setState(ConnectionState.Closed);\n      this.client.rejectConnectionId?.();\n      throw err;\n    }\n  };\n\n  /**\n   * isHealthy checks if there is a connectionID and connection is in Connected state\n   */\n  isHealthy = () => {\n    return !!this.connectionID && this.state === ConnectionState.Connected;\n  };\n\n  disconnect = async (timeout = 2000) => {\n    removeConnectionEventListeners(this._onlineStatusChanged);\n\n    this._setState(ConnectionState.Disconnected);\n    this.cancelToken?.cancel('disconnect() is called');\n    this.cancelToken = undefined;\n\n    const connection_id = this.connectionID;\n    this.connectionID = undefined;\n\n    try {\n      await this._req(\n        { close: true, connection_id },\n        {\n          timeout,\n        },\n        false,\n      );\n      this._log(`disconnect() - Closed connectionID`);\n    } catch (err) {\n      this._log(`disconnect() - Failed`, { err }, 'error');\n    }\n  };\n}\n","import { getLogger } from '../../logger';\n\nconst logger = getLogger(['location']);\nconst HINT_URL = `https://hint.stream-io-video.com/`;\n\nexport const getLocationHint = async (\n  hintUrl: string = HINT_URL,\n  timeout: number = 2000,\n) => {\n  const abortController = new AbortController();\n  const timeoutId = setTimeout(() => abortController.abort(), timeout);\n  try {\n    const response = await fetch(hintUrl, {\n      method: 'HEAD',\n      signal: abortController.signal,\n    });\n    const awsPop = response.headers.get('x-amz-cf-pop') || 'ERR';\n    logger('debug', `Location header: ${awsPop}`);\n    return awsPop.substring(0, 3); // AMS1-P2 -> AMS\n  } catch (e) {\n    logger('warn', `Failed to get location hint from ${hintUrl}`, e);\n    return 'ERR';\n  } finally {\n    clearTimeout(timeoutId);\n  }\n};\n","import axios, {\n  AxiosError,\n  AxiosHeaders,\n  AxiosInstance,\n  AxiosRequestConfig,\n  AxiosResponse,\n} from 'axios';\nimport https from 'https';\nimport { StableWSConnection } from './connection';\nimport { DevToken } from './signing';\nimport { TokenManager } from './token_manager';\nimport { WSConnectionFallback } from './connection_fallback';\nimport { isErrorResponse, isWSFailure } from './errors';\nimport {\n  isFunction,\n  isOnline,\n  KnownCodes,\n  randomId,\n  retryInterval,\n  sleep,\n} from './utils';\n\nimport {\n  AllClientEvents,\n  AllClientEventTypes,\n  APIErrorResponse,\n  ClientEventListener,\n  ConnectAPIResponse,\n  ErrorFromResponse,\n  Logger,\n  StreamClientOptions,\n  StreamVideoEvent,\n  TokenOrProvider,\n  User,\n  UserWithId,\n} from './types';\nimport { InsightMetrics, postInsights } from './insights';\nimport { getLocationHint } from './location';\nimport { CreateGuestRequest, CreateGuestResponse } from '../../gen/coordinator';\n\nexport class StreamClient {\n  _user?: UserWithId;\n  anonymous: boolean;\n  persistUserOnConnectionFailure?: boolean;\n  axiosInstance: AxiosInstance;\n  baseURL?: string;\n  browser: boolean;\n  cleaningIntervalRef?: NodeJS.Timeout;\n  clientID?: string;\n  key: string;\n  listeners: Partial<\n    Record<AllClientEventTypes, ClientEventListener<any>[] | undefined>\n  > = {};\n  logger: Logger;\n\n  private locationHint: Promise<string> | undefined;\n\n  node: boolean;\n  options: StreamClientOptions;\n  secret?: string;\n  setUserPromise: ConnectAPIResponse | null;\n  tokenManager: TokenManager;\n  user?: UserWithId;\n  userAgent?: string;\n  userID?: string;\n  wsBaseURL?: string;\n  wsConnection: StableWSConnection | null;\n  wsFallback?: WSConnectionFallback;\n  wsPromise: ConnectAPIResponse | null;\n  consecutiveFailures: number;\n  insightMetrics: InsightMetrics;\n  defaultWSTimeoutWithFallback: number;\n  defaultWSTimeout: number;\n  resolveConnectionId?: Function;\n  rejectConnectionId?: Function;\n  connectionIdPromise?: Promise<string | undefined>;\n  guestUserCreatePromise?: Promise<CreateGuestResponse>;\n  private nextRequestAbortController: AbortController | null = null;\n\n  /**\n   * Initialize a client.\n   *\n   * @param {string} key - the api key\n   * @param {StreamClientOptions} [options] - additional options, here you can pass custom options to axios instance\n   * @param {string} [options.secret] - the api secret\n   * @param {boolean} [options.browser] - enforce the client to be in browser mode\n   * @param {boolean} [options.warmUp] - default to false, if true, client will open a connection as soon as possible to speed up following requests\n   * @param {Logger} [options.Logger] - custom logger\n   * @param {number} [options.timeout] - default to 3000\n   * @param {httpsAgent} [options.httpsAgent] - custom httpsAgent, in node it's default to https.agent()\n   */\n  constructor(key: string, options?: StreamClientOptions) {\n    // set the key\n    this.key = key;\n\n    // set the secret\n    this.secret = options?.secret;\n\n    // set the options... and figure out defaults...\n    const inputOptions = options\n      ? options\n      : ({\n          browser: typeof window !== 'undefined',\n        } as Partial<StreamClientOptions>);\n\n    this.browser = inputOptions.browser || typeof window !== 'undefined';\n    this.node = !this.browser;\n\n    if (this.browser) {\n      this.locationHint = getLocationHint(\n        options?.locationHintUrl,\n        options?.locationHintTimeout,\n      );\n    }\n\n    this.options = {\n      timeout: 5000,\n      withCredentials: false, // making sure cookies are not sent\n      warmUp: false,\n      ...inputOptions,\n    };\n\n    if (this.node && !this.options.httpsAgent) {\n      this.options.httpsAgent = new https.Agent({\n        keepAlive: true,\n        keepAliveMsecs: 3000,\n      });\n    }\n\n    this.setBaseURL(\n      this.options.baseURL || 'https://video.stream-io-api.com/video',\n    );\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n      this.setBaseURL('http://localhost:3030/video');\n    }\n\n    if (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_HOST) {\n      this.setBaseURL(`http://${process.env.STREAM_LOCAL_TEST_HOST}/video`);\n    }\n\n    this.axiosInstance = axios.create({\n      ...this.options,\n      baseURL: this.baseURL,\n    });\n\n    // WS connection is initialized when setUser is called\n    this.wsConnection = null;\n    this.wsPromise = null;\n    this.setUserPromise = null;\n\n    // mapping between channel groups and configs\n    this.anonymous = false;\n    this.persistUserOnConnectionFailure =\n      this.options?.persistUserOnConnectionFailure;\n\n    // If it is a server-side client, then lets initialize the tokenManager, since token will be\n    // generated from secret.\n    this.tokenManager = new TokenManager(this.secret);\n    this.consecutiveFailures = 0;\n    this.insightMetrics = new InsightMetrics();\n\n    this.defaultWSTimeoutWithFallback = 6000;\n    this.defaultWSTimeout = 15000;\n\n    this.logger = isFunction(inputOptions.logger)\n      ? inputOptions.logger\n      : () => null;\n  }\n\n  devToken = (userID: string) => {\n    return DevToken(userID);\n  };\n\n  getAuthType = () => {\n    return this.anonymous ? 'anonymous' : 'jwt';\n  };\n\n  setBaseURL = (baseURL: string) => {\n    this.baseURL = baseURL;\n    this.wsBaseURL = this.baseURL\n      .replace('http', 'ws')\n      .replace(':3030', ':8800');\n  };\n\n  getLocationHint = async (\n    hintUrl?: string,\n    timeout?: number,\n  ): Promise<string> => {\n    const hint = await this.locationHint;\n    if (!hint || hint === 'ERR') {\n      this.locationHint = getLocationHint(\n        hintUrl ?? this.options.locationHintUrl,\n        timeout ?? this.options.locationHintTimeout,\n      );\n      return this.locationHint;\n    }\n    return hint;\n  };\n\n  _getConnectionID = () =>\n    this.wsConnection?.connectionID || this.wsFallback?.connectionID;\n\n  _hasConnectionID = () => Boolean(this._getConnectionID());\n\n  /**\n   * connectUser - Set the current user and open a WebSocket connection\n   *\n   * @param user Data about this user. IE {name: \"john\"}\n   * @param {TokenOrProvider} userTokenOrProvider Token or provider\n   *\n   * @return {ConnectAPIResponse} Returns a promise that resolves when the connection is setup\n   */\n  connectUser = async (\n    user: UserWithId,\n    userTokenOrProvider: TokenOrProvider,\n  ) => {\n    if (!user.id) {\n      throw new Error('The \"id\" field on the user is missing');\n    }\n\n    /**\n     * Calling connectUser multiple times is potentially the result of a  bad integration, however,\n     * If the user id remains the same we don't throw error\n     */\n    if (this.userID === user.id && this.setUserPromise) {\n      this.logger(\n        'warn',\n        'Consecutive calls to connectUser is detected, ideally you should only call this function once in your app.',\n      );\n      return this.setUserPromise;\n    }\n\n    if (this.userID) {\n      throw new Error(\n        'Use client.disconnect() before trying to connect as a different user. connectUser was called twice.',\n      );\n    }\n\n    if (\n      (this._isUsingServerAuth() || this.node) &&\n      !this.options.allowServerSideConnect\n    ) {\n      this.logger(\n        'warn',\n        'Please do not use connectUser server side. connectUser impacts MAU and concurrent connection usage and thus your bill. If you have a valid use-case, add \"allowServerSideConnect: true\" to the client options to disable this warning.',\n      );\n    }\n\n    // we generate the client id client side\n    this.userID = user.id;\n    this.anonymous = false;\n\n    const setTokenPromise = this._setToken(\n      user,\n      userTokenOrProvider,\n      this.anonymous,\n    );\n    this._setUser(user);\n\n    const wsPromise = this.openConnection();\n\n    this.setUserPromise = Promise.all([setTokenPromise, wsPromise]).then(\n      (result) => result[1], // We only return connection promise;\n    );\n\n    try {\n      return await this.setUserPromise;\n    } catch (err) {\n      if (this.persistUserOnConnectionFailure) {\n        // cleanup client to allow the user to retry connectUser again\n        this.closeConnection();\n      } else {\n        this.disconnectUser();\n      }\n      throw err;\n    }\n  };\n\n  _setToken = (\n    user: UserWithId,\n    userTokenOrProvider: TokenOrProvider,\n    isAnonymous: boolean,\n  ) =>\n    this.tokenManager.setTokenOrProvider(\n      userTokenOrProvider,\n      user,\n      isAnonymous,\n    );\n\n  _setUser = (user: UserWithId) => {\n    /**\n     * This one is used by the frontend. This is a copy of the current user object stored on backend.\n     * It contains reserved properties and own user properties which are not present in `this._user`.\n     */\n    this.user = user;\n    this.userID = user.id;\n    // this one is actually used for requests. This is a copy of current user provided to `connectUser` function.\n    this._user = { ...user };\n  };\n\n  /**\n   * Disconnects the websocket connection, without removing the user set on client.\n   * client.closeConnection will not trigger default auto-retry mechanism for reconnection. You need\n   * to call client.openConnection to reconnect to websocket.\n   *\n   * This is mainly useful on mobile side. You can only receive push notifications\n   * if you don't have active websocket connection.\n   * So when your app goes to background, you can call `client.closeConnection`.\n   * And when app comes back to foreground, call `client.openConnection`.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming succesful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  closeConnection = async (timeout?: number) => {\n    if (this.cleaningIntervalRef != null) {\n      clearInterval(this.cleaningIntervalRef);\n      this.cleaningIntervalRef = undefined;\n    }\n\n    await Promise.all([\n      this.wsConnection?.disconnect(timeout),\n      this.wsFallback?.disconnect(timeout),\n    ]);\n    return Promise.resolve();\n  };\n\n  /**\n   * Creates a new WebSocket connection with the current user. Returns empty promise, if there is an active connection\n   */\n  openConnection = async () => {\n    if (!this.userID) {\n      throw Error(\n        'UserWithId is not set on client, use client.connectUser or client.connectAnonymousUser instead',\n      );\n    }\n\n    if (this.wsConnection?.isConnecting && this.wsPromise) {\n      this.logger(\n        'info',\n        'client:openConnection() - connection already in progress',\n      );\n      return this.wsPromise;\n    }\n\n    if (\n      (this.wsConnection?.isHealthy || this.wsFallback?.isHealthy()) &&\n      this._hasConnectionID()\n    ) {\n      this.logger(\n        'info',\n        'client:openConnection() - openConnection called twice, healthy connection already exists',\n      );\n\n      return Promise.resolve();\n    }\n\n    this.connectionIdPromise = new Promise<string | undefined>(\n      (resolve, reject) => {\n        this.resolveConnectionId = resolve;\n        this.rejectConnectionId = reject;\n      },\n    );\n\n    this.clientID = `${this.userID}--${randomId()}`;\n    this.wsPromise = this.connect();\n    return this.wsPromise;\n  };\n\n  _normalizeDate = (before: Date | string | null): string | null => {\n    if (before instanceof Date) {\n      before = before.toISOString();\n    }\n\n    if (before === '') {\n      throw new Error(\n        \"Don't pass blank string for since, use null instead if resetting the token revoke\",\n      );\n    }\n\n    return before;\n  };\n\n  /**\n   * Disconnects the websocket and removes the user from client.\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    this.logger('info', 'client:disconnect() - Disconnecting the client');\n\n    // remove the user specific fields\n    delete this.user;\n    delete this._user;\n    delete this.userID;\n\n    this.anonymous = false;\n\n    await this.closeConnection(timeout);\n\n    this.tokenManager.reset();\n\n    this.connectionIdPromise = undefined;\n    this.rejectConnectionId = undefined;\n    this.resolveConnectionId = undefined;\n  };\n\n  connectGuestUser = async (user: User & { type: 'guest' }) => {\n    this.guestUserCreatePromise = this.doAxiosRequest<\n      CreateGuestResponse,\n      CreateGuestRequest\n    >(\n      'post',\n      '/guest',\n      {\n        user: {\n          ...user,\n        },\n      },\n      { publicEndpoint: true },\n    );\n\n    const response = await this.guestUserCreatePromise;\n    this.guestUserCreatePromise.finally(\n      () => (this.guestUserCreatePromise = undefined),\n    );\n\n    return this.connectUser(response.user, response.access_token);\n  };\n\n  /**\n   * connectAnonymousUser - Set an anonymous user and open a WebSocket connection\n   */\n  connectAnonymousUser = async (\n    user: UserWithId,\n    tokenOrProvider: TokenOrProvider,\n  ) => {\n    this.connectionIdPromise = new Promise<string | undefined>(\n      (resolve, reject) => {\n        this.resolveConnectionId = resolve;\n        this.rejectConnectionId = reject;\n      },\n    );\n\n    this.anonymous = true;\n    await this._setToken(user, tokenOrProvider, this.anonymous);\n\n    this._setUser(user);\n    // some endpoints require a connection_id to be resolved.\n    // as anonymous users aren't allowed to open WS connections, we just\n    // resolve the connection_id here.\n    this.resolveConnectionId?.();\n  };\n\n  /**\n   * on - Listen to events on all channels and users your watching\n   *\n   * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n   *\n   * @param eventName The event type to listen for (optional)\n   * @param callback The callback to call\n   *\n   * @return  Returns a function which, when called, unsubscribes the event handler.\n   */\n  on = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.logger('debug', `Adding listener for ${eventName} event`);\n    this.listeners[eventName]?.push(callback as ClientEventListener<any>);\n    return () => {\n      this.off(eventName, callback);\n    };\n  };\n\n  /**\n   * off - Remove the event handler\n   */\n  off = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    if (!this.listeners[eventName]) {\n      this.listeners[eventName] = [];\n    }\n\n    this.logger('debug', `Removing listener for ${eventName} event`);\n    this.listeners[eventName] = this.listeners[eventName]?.filter(\n      (value) => value !== callback,\n    );\n  };\n\n  _logApiRequest = (\n    type: string,\n    url: string,\n    data: unknown,\n    config: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    },\n  ) => {\n    this.logger('trace', `client: ${type} - Request - ${url}`, {\n      payload: data,\n      config,\n    });\n  };\n\n  _logApiResponse = <T>(\n    type: string,\n    url: string,\n    response: AxiosResponse<T>,\n  ) => {\n    this.logger(\n      'trace',\n      `client:${type} - Response - url: ${url} > status ${response.status}`,\n      {\n        response,\n      },\n    );\n  };\n\n  _logApiError = (type: string, url: string, error: unknown) => {\n    this.logger('error', `client:${type} - Error - url: ${url}`, {\n      url,\n      error,\n    });\n  };\n\n  doAxiosRequest = async <T, D = unknown>(\n    type: string,\n    url: string,\n    data?: D,\n    options: AxiosRequestConfig & {\n      config?: AxiosRequestConfig & { maxBodyLength?: number };\n    } & { publicEndpoint?: boolean } = {},\n  ): Promise<T> => {\n    if (!options.publicEndpoint) {\n      await Promise.all([\n        this.tokenManager.tokenReady(),\n        this.guestUserCreatePromise,\n        this.connectionIdPromise,\n      ]);\n    }\n    const requestConfig = this._enrichAxiosOptions(options);\n    try {\n      let response: AxiosResponse<T>;\n      this._logApiRequest(type, url, data, requestConfig);\n      switch (type) {\n        case 'get':\n          response = await this.axiosInstance.get(url, requestConfig);\n          break;\n        case 'delete':\n          response = await this.axiosInstance.delete(url, requestConfig);\n          break;\n        case 'post':\n          response = await this.axiosInstance.post(url, data, requestConfig);\n          break;\n        case 'put':\n          response = await this.axiosInstance.put(url, data, requestConfig);\n          break;\n        case 'patch':\n          response = await this.axiosInstance.patch(url, data, requestConfig);\n          break;\n        case 'options':\n          response = await this.axiosInstance.options(url, requestConfig);\n          break;\n        default:\n          throw new Error('Invalid request type');\n      }\n      this._logApiResponse<T>(type, url, response);\n      this.consecutiveFailures = 0;\n      return this.handleResponse(response);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } catch (e: any /**TODO: generalize error types  */) {\n      e.client_request_id = requestConfig.headers?.['x-client-request-id'];\n      this.consecutiveFailures += 1;\n      if (e.response) {\n        this._logApiError(type, url, e.response);\n        /** connection_fallback depends on this token expiration logic */\n        if (\n          e.response.data.code === KnownCodes.TOKEN_EXPIRED &&\n          !this.tokenManager.isStatic()\n        ) {\n          if (this.consecutiveFailures > 1) {\n            await sleep(retryInterval(this.consecutiveFailures));\n          }\n          await this.tokenManager.loadToken();\n          return await this.doAxiosRequest<T, D>(type, url, data, options);\n        }\n        return this.handleResponse(e.response);\n      } else {\n        this._logApiError(type, url, e);\n        // eslint-disable-next-line no-throw-literal\n        throw e as AxiosError<APIErrorResponse>;\n      }\n    }\n  };\n\n  get = <T>(url: string, params?: AxiosRequestConfig['params']) => {\n    return this.doAxiosRequest<T, unknown>('get', url, null, {\n      params,\n    });\n  };\n\n  put = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('put', url, data, { params });\n  };\n\n  post = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('post', url, data, { params });\n  };\n\n  patch = <T, D = unknown>(\n    url: string,\n    data?: D,\n    params?: AxiosRequestConfig['params'],\n  ) => {\n    return this.doAxiosRequest<T, D>('patch', url, data, { params });\n  };\n\n  delete = <T>(url: string, params?: AxiosRequestConfig['params']) => {\n    return this.doAxiosRequest<T, unknown>('delete', url, null, {\n      params,\n    });\n  };\n\n  errorFromResponse = (\n    response: AxiosResponse<APIErrorResponse>,\n  ): ErrorFromResponse<APIErrorResponse> => {\n    let err: ErrorFromResponse<APIErrorResponse>;\n    err = new ErrorFromResponse(`Stream error HTTP code: ${response.status}`);\n    if (response.data && response.data.code) {\n      err = new Error(\n        `Stream error code ${response.data.code}: ${response.data.message}`,\n      );\n      err.code = response.data.code;\n    }\n    err.response = response;\n    err.status = response.status;\n    return err;\n  };\n\n  handleResponse = <T>(response: AxiosResponse<T>) => {\n    const data = response.data;\n    if (isErrorResponse(response)) {\n      throw this.errorFromResponse(response);\n    }\n    return data;\n  };\n\n  dispatchEvent = (event: StreamVideoEvent) => {\n    if (!event.received_at) event.received_at = new Date();\n    this.logger('debug', `Dispatching event: ${event.type}`, event);\n    if (!this.listeners) return;\n\n    // call generic listeners\n    for (const listener of this.listeners.all || []) {\n      listener(event);\n    }\n\n    // call type specific listeners\n    for (const listener of this.listeners[event.type] || []) {\n      listener(event);\n    }\n  };\n\n  /**\n   * @private\n   */\n  connect = async () => {\n    if (!this.userID || !this._user) {\n      throw Error(\n        'Call connectUser or connectAnonymousUser before starting the connection',\n      );\n    }\n    if (!this.wsBaseURL) {\n      throw Error('Websocket base url not set');\n    }\n    if (!this.clientID) {\n      throw Error('clientID is not set');\n    }\n\n    if (\n      !this.wsConnection &&\n      (this.options.warmUp || this.options.enableInsights)\n    ) {\n      this._sayHi();\n    }\n    // The StableWSConnection handles all the reconnection logic.\n    if (this.options.wsConnection && this.node) {\n      // Intentionally avoiding adding ts generics on wsConnection in options since its only useful for unit test purpose.\n      (this.options.wsConnection as unknown as StableWSConnection).setClient(\n        this,\n      );\n      this.wsConnection = this.options\n        .wsConnection as unknown as StableWSConnection;\n    } else {\n      this.wsConnection = new StableWSConnection(this);\n    }\n\n    try {\n      // if fallback is used before, continue using it instead of waiting for WS to fail\n      if (this.wsFallback) {\n        return await this.wsFallback.connect();\n      }\n      this.logger('info', 'StreamClient.connect: this.wsConnection.connect()');\n      // if WSFallback is enabled, ws connect should timeout faster so fallback can try\n      return await this.wsConnection.connect(\n        this.options.enableWSFallback\n          ? this.defaultWSTimeoutWithFallback\n          : this.defaultWSTimeout,\n      );\n    } catch (err) {\n      // run fallback only if it's WS/Network error and not a normal API error\n      // make sure browser is online before even trying the longpoll\n      if (\n        this.options.enableWSFallback &&\n        // @ts-ignore\n        isWSFailure(err) &&\n        isOnline(this.logger)\n      ) {\n        this.logger(\n          'warn',\n          'client:connect() - WS failed, fallback to longpoll',\n        );\n        this.dispatchEvent({ type: 'transport.changed', mode: 'longpoll' });\n\n        this.wsConnection._destroyCurrentWSConnection();\n        this.wsConnection.disconnect().then(); // close WS so no retry\n        this.wsFallback = new WSConnectionFallback(this);\n        return await this.wsFallback.connect();\n      }\n\n      throw err;\n    }\n  };\n\n  /**\n   * Check the connectivity with server for warmup purpose.\n   *\n   * @private\n   */\n  _sayHi = () => {\n    const client_request_id = randomId();\n    const opts = {\n      headers: AxiosHeaders.from({\n        'x-client-request-id': client_request_id,\n      }),\n    };\n    this.doAxiosRequest('get', this.baseURL + '/hi', null, opts).catch((e) => {\n      if (this.options.enableInsights) {\n        postInsights('http_hi_failed', {\n          api_key: this.key,\n          err: e,\n          client_request_id,\n        });\n      }\n    });\n  };\n\n  getUserAgent = () => {\n    const version = process.env.PKG_VERSION || '0.0.0-development';\n    return (\n      this.userAgent ||\n      `stream-video-javascript-client-${\n        this.node ? 'node' : 'browser'\n      }-${version}`\n    );\n  };\n\n  setUserAgent = (userAgent: string) => {\n    this.userAgent = userAgent;\n  };\n\n  /**\n   * _isUsingServerAuth - Returns true if we're using server side auth\n   */\n  _isUsingServerAuth = () => !!this.secret;\n\n  _enrichAxiosOptions = (\n    options: AxiosRequestConfig & { config?: AxiosRequestConfig } & {\n      publicEndpoint?: boolean;\n    } = {\n      params: {},\n      headers: {},\n      config: {},\n    },\n  ): AxiosRequestConfig => {\n    const token =\n      options.publicEndpoint && !this.user ? undefined : this._getToken();\n    const authorization = token ? { Authorization: token } : undefined;\n    let signal: AbortSignal | null = null;\n    if (this.nextRequestAbortController !== null) {\n      signal = this.nextRequestAbortController.signal;\n      this.nextRequestAbortController = null;\n    }\n\n    if (!options.headers?.['x-client-request-id']) {\n      options.headers = {\n        ...options.headers,\n        'x-client-request-id': randomId(),\n      };\n    }\n\n    return {\n      params: {\n        user_id: this.userID,\n        connection_id: this._getConnectionID(),\n        api_key: this.key,\n        ...options.params,\n      },\n      headers: {\n        ...authorization,\n        'stream-auth-type':\n          options.publicEndpoint && !this.user\n            ? 'anonymous'\n            : this.getAuthType(),\n        'X-Stream-Client': this.getUserAgent(),\n        ...options.headers,\n      },\n      ...(signal ? { signal } : {}),\n      ...options.config,\n      ...this.options.axiosRequestConfig,\n    };\n  };\n\n  _getToken = () => {\n    if (!this.tokenManager) return null;\n\n    return this.tokenManager.getToken();\n  };\n\n  /**\n   * encode ws url payload\n   * @private\n   * @returns json string\n   */\n  _buildWSPayload = (client_request_id?: string) => {\n    return JSON.stringify({\n      user_id: this.userID,\n      user_details: this._user,\n      client_request_id,\n    });\n  };\n\n  /**\n   * creates an abort controller that will be used by the next HTTP Request.\n   */\n  createAbortControllerForNextRequest = () => {\n    return (this.nextRequestAbortController = new AbortController());\n  };\n}\n","import { Call } from './Call';\nimport { StreamClient } from './coordinator/connection/client';\nimport {\n  StreamVideoReadOnlyStateStore,\n  StreamVideoWriteableStateStore,\n} from './store';\nimport type {\n  ConnectedEvent,\n  CreateDeviceRequest,\n  CreateGuestRequest,\n  CreateGuestResponse,\n  GetEdgesResponse,\n  ListDevicesResponse,\n  QueryCallsRequest,\n  QueryCallsResponse,\n  QueryCallStatsRequest,\n  QueryCallStatsResponse,\n} from './gen/coordinator';\nimport {\n  AllClientEvents,\n  ClientEventListener,\n  Logger,\n  LogLevel,\n  StreamClientOptions,\n  TokenOrProvider,\n  TokenProvider,\n  User,\n  UserWithId,\n} from './coordinator/connection/types';\nimport { getLogger, logToConsole, setLogger } from './logger';\nimport { getSdkInfo } from './client-details';\nimport { SdkType } from './gen/video/sfu/models/models';\n\n/**\n * A `StreamVideoClient` instance lets you communicate with our API, and authenticate users.\n */\nexport class StreamVideoClient {\n  /**\n   * A reactive store that exposes all the state variables in a reactive manner - you can subscribe to changes of the different state variables. Our library is built in a way that all state changes are exposed in this store, so all UI changes in your application should be handled by subscribing to these variables.\n   */\n  readonly readOnlyStateStore: StreamVideoReadOnlyStateStore;\n  readonly logLevel: LogLevel = 'warn';\n  readonly logger: Logger;\n\n  protected readonly writeableStateStore: StreamVideoWriteableStateStore;\n  streamClient: StreamClient;\n\n  protected eventHandlersToUnregister: Array<() => void> = [];\n  protected connectionPromise: Promise<void | ConnectedEvent> | undefined;\n  protected disconnectionPromise: Promise<void> | undefined;\n\n  /**\n   * You should create only one instance of `StreamVideoClient`.\n   */\n  constructor(apiKey: string, opts?: StreamClientOptions);\n  constructor(args: {\n    apiKey: string;\n    options?: StreamClientOptions;\n    user?: User;\n    token?: string;\n    tokenProvider?: TokenProvider;\n  });\n  constructor(\n    apiKeyOrArgs:\n      | string\n      | {\n          apiKey: string;\n          options?: StreamClientOptions;\n          user?: User;\n          token?: string;\n          tokenProvider?: TokenProvider;\n        },\n    opts?: StreamClientOptions,\n  ) {\n    let logger: Logger = logToConsole;\n    let logLevel: LogLevel = 'warn';\n    if (typeof apiKeyOrArgs === 'string') {\n      logLevel = opts?.logLevel || logLevel;\n      logger = opts?.logger || logger;\n    } else {\n      logLevel = apiKeyOrArgs.options?.logLevel || logLevel;\n      logger = apiKeyOrArgs.options?.logger || logger;\n    }\n\n    setLogger(logger, logLevel);\n    this.logger = getLogger(['client']);\n\n    if (typeof apiKeyOrArgs === 'string') {\n      this.streamClient = new StreamClient(apiKeyOrArgs, {\n        persistUserOnConnectionFailure: true,\n        ...opts,\n        logLevel,\n        logger: this.logger,\n      });\n    } else {\n      this.streamClient = new StreamClient(apiKeyOrArgs.apiKey, {\n        persistUserOnConnectionFailure: true,\n        ...apiKeyOrArgs.options,\n        logLevel,\n        logger: this.logger,\n      });\n\n      const sdkInfo = getSdkInfo();\n      if (sdkInfo) {\n        this.streamClient.setUserAgent(\n          this.streamClient.getUserAgent() +\n            `-video-${SdkType[sdkInfo.type].toLowerCase()}-sdk-${\n              sdkInfo.major\n            }.${sdkInfo.minor}.${sdkInfo.patch}`,\n        );\n      }\n    }\n\n    this.writeableStateStore = new StreamVideoWriteableStateStore();\n    this.readOnlyStateStore = new StreamVideoReadOnlyStateStore(\n      this.writeableStateStore,\n    );\n\n    if (typeof apiKeyOrArgs !== 'string') {\n      const user = apiKeyOrArgs.user;\n      const token = apiKeyOrArgs.token || apiKeyOrArgs.tokenProvider;\n      if (user) {\n        this.connectUser(user, token);\n      }\n    }\n  }\n\n  /**\n   * Return the reactive state store, use this if you want to be notified about changes to the client state\n   */\n  get state() {\n    return this.readOnlyStateStore;\n  }\n\n  /**\n   * Connects the given user to the client.\n   * Only one user can connect at a time, if you want to change users, call `disconnectUser` before connecting a new user.\n   * If the connection is successful, the connected user [state variable](#readonlystatestore) will be updated accordingly.\n   *\n   * @param user the user to connect.\n   * @param token a token or a function that returns a token.\n   */\n  async connectUser(\n    user: User,\n    token?: TokenOrProvider,\n  ): Promise<void | ConnectedEvent> {\n    if (user.type === 'anonymous') {\n      user.id = '!anon';\n      return this.connectAnonymousUser(user as UserWithId, token);\n    }\n    let connectUser = () => {\n      return this.streamClient.connectUser(user, token);\n    };\n    if (user.type === 'guest') {\n      connectUser = async () => {\n        return this.streamClient.connectGuestUser(user);\n      };\n    }\n    this.connectionPromise = this.disconnectionPromise\n      ? this.disconnectionPromise.then(() => connectUser())\n      : connectUser();\n\n    this.connectionPromise?.finally(() => (this.connectionPromise = undefined));\n    const connectUserResponse = await this.connectionPromise;\n    // connectUserResponse will be void if connectUser called twice for the same user\n    if (connectUserResponse?.me) {\n      this.writeableStateStore.setConnectedUser(connectUserResponse.me);\n    }\n\n    this.eventHandlersToUnregister.push(\n      this.on('connection.changed', (event) => {\n        if (event.online) {\n          const callsToReWatch = this.writeableStateStore.calls\n            .filter((call) => call.watching)\n            .map((call) => call.cid);\n\n          this.logger(\n            'info',\n            `Rewatching calls after connection changed ${callsToReWatch.join(\n              ', ',\n            )}`,\n          );\n          if (callsToReWatch.length > 0) {\n            this.queryCalls({\n              watch: true,\n              filter_conditions: {\n                cid: { $in: callsToReWatch },\n              },\n              sort: [{ field: 'cid', direction: 1 }],\n            }).catch((err) => {\n              this.logger('error', 'Failed to re-watch calls', err);\n            });\n          }\n        }\n      }),\n    );\n\n    this.eventHandlersToUnregister.push(\n      this.on('call.created', (event) => {\n        const { call, members } = event;\n        if (user.id === call.created_by.id) {\n          this.logger(\n            'warn',\n            'Received `call.created` sent by the current user',\n          );\n          return;\n        }\n\n        this.logger('info', `New call created and registered: ${call.cid}`);\n        const newCall = new Call({\n          streamClient: this.streamClient,\n          type: call.type,\n          id: call.id,\n          members,\n          clientStore: this.writeableStateStore,\n        });\n        newCall.state.updateFromCallResponse(call);\n        this.writeableStateStore.registerCall(newCall);\n      }),\n    );\n\n    this.eventHandlersToUnregister.push(\n      this.on('call.ring', async (event) => {\n        const { call, members } = event;\n        if (user.id === call.created_by.id) {\n          this.logger(\n            'debug',\n            'Received `call.ring` sent by the current user so ignoring the event',\n          );\n          return;\n        }\n\n        // The call might already be tracked by the client,\n        // if `call.created` was received before `call.ring`.\n        // In that case, we cleanup the already tracked call.\n        const prevCall = this.writeableStateStore.findCall(call.type, call.id);\n        await prevCall?.leave({ reason: 'cleaning-up in call.ring' });\n        // we create a new call\n        const theCall = new Call({\n          streamClient: this.streamClient,\n          type: call.type,\n          id: call.id,\n          members,\n          clientStore: this.writeableStateStore,\n          ringing: true,\n        });\n        theCall.state.updateFromCallResponse(call);\n        // we fetch the latest metadata for the call from the server\n        await theCall.get();\n        this.writeableStateStore.registerCall(theCall);\n      }),\n    );\n\n    return connectUserResponse;\n  }\n\n  /**\n   * Disconnects the currently connected user from the client.\n   *\n   * If the connection is successfully disconnected, the connected user [state variable](#readonlystatestore) will be updated accordingly\n   *\n   * @param timeout Max number of ms, to wait for close event of websocket, before forcefully assuming successful disconnection.\n   *                https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent\n   */\n  disconnectUser = async (timeout?: number) => {\n    if (!this.streamClient.user && !this.connectionPromise) {\n      return;\n    }\n    const disconnectUser = () => this.streamClient.disconnectUser(timeout);\n    this.disconnectionPromise = this.connectionPromise\n      ? this.connectionPromise.then(() => disconnectUser())\n      : disconnectUser();\n    this.disconnectionPromise.finally(\n      () => (this.disconnectionPromise = undefined),\n    );\n    await this.disconnectionPromise;\n    this.eventHandlersToUnregister.forEach((unregister) => unregister());\n    this.eventHandlersToUnregister = [];\n    this.writeableStateStore.setConnectedUser(undefined);\n  };\n\n  /**\n   * You can subscribe to WebSocket events provided by the API.\n   * To remove a subscription, call the `off` method or, execute the returned unsubscribe function.\n   * Please note that subscribing to WebSocket events is an advanced use-case, for most use-cases it should be enough to watch for changes in the reactive [state store](#readonlystatestore).\n   *\n   * @param eventName the event name or 'all'.\n   * @param callback the callback which will be called when the event is emitted.\n   * @returns an unsubscribe function.\n   */\n  on = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    return this.streamClient.on(eventName, callback);\n  };\n\n  /**\n   * Remove subscription for WebSocket events that were created by the `on` method.\n   *\n   * @param eventName the event name.\n   * @param callback the callback which was passed to the `on` method.\n   */\n  off = <E extends keyof AllClientEvents>(\n    eventName: E,\n    callback: ClientEventListener<E>,\n  ) => {\n    return this.streamClient.off(eventName, callback);\n  };\n\n  /**\n   * Creates a new call.\n   *\n   * @param type the type of the call.\n   * @param id the id of the call.\n   */\n  call = (type: string, id: string) => {\n    return new Call({\n      streamClient: this.streamClient,\n      id: id,\n      type: type,\n      clientStore: this.writeableStateStore,\n    });\n  };\n\n  /**\n   * Creates a new guest user with the given data.\n   *\n   * @param data the data for the guest user.\n   */\n  createGuestUser = async (data: CreateGuestRequest) => {\n    return this.streamClient.doAxiosRequest<\n      CreateGuestResponse,\n      CreateGuestRequest\n    >('post', '/guest', data, { publicEndpoint: true });\n  };\n\n  /**\n   * Will query the API for calls matching the given filters.\n   *\n   * @param data the query data.\n   */\n  queryCalls = async (data: QueryCallsRequest = {}) => {\n    const response = await this.streamClient.post<\n      QueryCallsResponse,\n      QueryCallsRequest\n    >('/calls', data);\n    const calls = response.calls.map((c) => {\n      const call = new Call({\n        streamClient: this.streamClient,\n        id: c.call.id,\n        type: c.call.type,\n        members: c.members,\n        ownCapabilities: c.own_capabilities,\n        watching: data.watch,\n        clientStore: this.writeableStateStore,\n      });\n      call.state.updateFromCallResponse(c.call);\n      call.applyDeviceConfig();\n      if (data.watch) {\n        this.writeableStateStore.registerCall(call);\n      }\n      return call;\n    });\n    return {\n      ...response,\n      calls: calls,\n    };\n  };\n\n  /**\n   * Retrieve the list of available call statistics reports matching a particular condition.\n   *\n   * @param data Filter and sort conditions for retrieving available call report summaries.\n   * @returns List with summary of available call reports matching the condition.\n   */\n  queryCallStats = async (data: QueryCallStatsRequest = {}) => {\n    return this.streamClient.post<\n      QueryCallStatsResponse,\n      QueryCallStatsRequest\n    >(`/call/stats`, data);\n  };\n\n  /**\n   * Returns a list of available data centers available for hosting calls.\n   */\n  edges = async () => {\n    return this.streamClient.get<GetEdgesResponse>(`/edges`);\n  };\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {string} push_provider the push provider name (eg. apn, firebase)\n   * @param {string} push_provider_name user provided push provider name\n   * @param {string} [userID] the user id (defaults to current user)\n   * @param {boolean} [voip_token] enables use of VoIP token for push notifications on iOS platform\n   */\n  addDevice = async (\n    id: string,\n    push_provider: string,\n    push_provider_name?: string,\n    userID?: string,\n    voip_token?: boolean,\n  ) => {\n    return await this.streamClient.post<CreateDeviceRequest>('/devices', {\n      id,\n      push_provider,\n      voip_token,\n      ...(userID != null ? { user_id: userID } : {}),\n      ...(push_provider_name != null ? { push_provider_name } : {}),\n    });\n  };\n\n  /**\n   * addDevice - Adds a push device for a user.\n   *\n   * @param {string} id the device id\n   * @param {string} push_provider the push provider name (eg. apn, firebase)\n   * @param {string} push_provider_name user provided push provider name\n   * @param {string} [userID] the user id (defaults to current user)\n   */\n  async addVoipDevice(\n    id: string,\n    push_provider: string,\n    push_provider_name: string,\n    userID?: string,\n  ) {\n    return await this.addDevice(\n      id,\n      push_provider,\n      push_provider_name,\n      userID,\n      true,\n    );\n  }\n\n  /**\n   * getDevices - Returns the devices associated with a current user\n   * @param {string} [userID] User ID. Only works on serverside\n   */\n  getDevices = async (userID?: string) => {\n    return await this.streamClient.get<ListDevicesResponse>(\n      '/devices',\n      userID ? { user_id: userID } : {},\n    );\n  };\n\n  /**\n   * removeDevice - Removes the device with the given id.\n   *\n   * @param {string} id The device id\n   * @param {string} [userID] The user id. Only specify this for serverside requests\n   */\n  removeDevice = async (id: string, userID?: string) => {\n    return await this.streamClient.delete('/devices', {\n      id,\n      ...(userID ? { user_id: userID } : {}),\n    });\n  };\n\n  /**\n   * A callback that can be used to create ringing calls from push notifications. If the call already exists, it will do nothing.\n   * @param call_cid\n   * @returns\n   */\n  onRingingCall = async (call_cid: string) => {\n    // if we find the call and is already ringing, we don't need to create a new call\n    // as client would have received the call.ring state because the app had WS alive when receiving push notifications\n    let call = this.readOnlyStateStore.calls.find(\n      (c) => c.cid === call_cid && c.ringing,\n    );\n    if (!call) {\n      // if not it means that WS is not alive when receiving the push notifications and we need to fetch the call\n      const [callType, callId] = call_cid.split(':');\n      call = new Call({\n        streamClient: this.streamClient,\n        type: callType,\n        id: callId,\n        clientStore: this.writeableStateStore,\n        ringing: true,\n      });\n      await call.get();\n    }\n\n    return call;\n  };\n\n  /**\n   * Connects the given anonymous user to the client.\n   *\n   * @param user the user to connect.\n   * @param tokenOrProvider a token or a function that returns a token.\n   */\n  protected connectAnonymousUser = async (\n    user: UserWithId,\n    tokenOrProvider: TokenOrProvider,\n  ) => {\n    const connectAnonymousUser = () =>\n      this.streamClient.connectAnonymousUser(user, tokenOrProvider);\n    this.connectionPromise = this.disconnectionPromise\n      ? this.disconnectionPromise.then(() => connectAnonymousUser())\n      : connectAnonymousUser();\n    this.connectionPromise.finally(() => (this.connectionPromise = undefined));\n    return this.connectionPromise;\n  };\n}\n"],"names":["CallState","ICETrickle","ICETrickle$Type","Call","Error","Error$Type","ICETrickle$","Error$","logger","RxUtils.getCurrentValue","RxUtils.setCurrentValue","map","AUDIO_LEVEL_THRESHOLD"],"mappings":"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"}