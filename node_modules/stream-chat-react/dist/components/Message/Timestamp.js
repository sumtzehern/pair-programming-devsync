import React, { useMemo } from 'react';
import { useMessageContext } from '../../context/MessageContext';
import { isDate, useTranslationContext } from '../../context/TranslationContext';
import { getDateString } from '../../i18n/utils';
export var defaultTimestampFormat = 'h:mmA';
export function Timestamp(props) {
    var timestamp = props.timestamp, _a = props.calendar, calendar = _a === void 0 ? false : _a, _b = props.customClass, customClass = _b === void 0 ? '' : _b, _c = props.format, format = _c === void 0 ? defaultTimestampFormat : _c;
    var formatDate = useMessageContext('MessageTimestamp').formatDate;
    var tDateTimeParser = useTranslationContext('MessageTimestamp').tDateTimeParser;
    var normalizedTimestamp = timestamp && isDate(timestamp) ? timestamp.toISOString() : timestamp;
    var when = useMemo(function () {
        return getDateString({
            calendar: calendar,
            format: format,
            formatDate: formatDate,
            messageCreatedAt: normalizedTimestamp,
            tDateTimeParser: tDateTimeParser,
        });
    }, [formatDate, calendar, tDateTimeParser, format, normalizedTimestamp]);
    if (!when) {
        return null;
    }
    return (React.createElement("time", { className: customClass, dateTime: normalizedTimestamp, title: normalizedTimestamp }, when));
}
