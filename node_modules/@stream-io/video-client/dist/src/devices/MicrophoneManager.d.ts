import { Observable } from 'rxjs';
import type { INoiseCancellation } from '@stream-io/audio-filters-web';
import { Call } from '../Call';
import { InputMediaDeviceManager } from './InputMediaDeviceManager';
import { MicrophoneManagerState } from './MicrophoneManagerState';
import { TrackDisableMode } from './InputMediaDeviceManagerState';
export declare class MicrophoneManager extends InputMediaDeviceManager<MicrophoneManagerState> {
    private speakingWhileMutedNotificationEnabled;
    private soundDetectorCleanup?;
    private rnSpeechDetector;
    private noiseCancellation;
    private noiseCancellationChangeUnsubscribe;
    private noiseCancellationRegistration?;
    constructor(call: Call, disableMode?: TrackDisableMode);
    /**
     * Enables noise cancellation for the microphone.
     *
     * Note: not supported in React Native.
     * @param noiseCancellation - a noise cancellation instance to use.
     */
    enableNoiseCancellation(noiseCancellation: INoiseCancellation): Promise<void>;
    /**
     * Disables noise cancellation for the microphone.
     *
     * Note: not supported in React Native.
     */
    disableNoiseCancellation(): Promise<void>;
    /**
     * Enables speaking while muted notification.
     */
    enableSpeakingWhileMutedNotification(): Promise<void>;
    /**
     * Disables speaking while muted notification.
     */
    disableSpeakingWhileMutedNotification(): Promise<void>;
    protected getDevices(): Observable<MediaDeviceInfo[]>;
    protected getStream(constraints: MediaTrackConstraints): Promise<MediaStream>;
    protected publishStream(stream: MediaStream): Promise<void>;
    protected stopPublishStream(stopTracks: boolean): Promise<void>;
    private startSpeakingWhileMutedDetection;
    private stopSpeakingWhileMutedDetection;
}
