import { StreamSfuClient } from '../StreamSfuClient';
import { TrackInfo, TrackType } from '../gen/video/sfu/models/models';
import { CallState } from '../store';
import { PublishOptions } from '../types';
import { Dispatcher } from './Dispatcher';
import { VideoLayerSetting } from '../gen/video/sfu/event/events';
export type PublisherConstructorOpts = {
    sfuClient: StreamSfuClient;
    state: CallState;
    dispatcher: Dispatcher;
    connectionConfig?: RTCConfiguration;
    isDtxEnabled: boolean;
    isRedEnabled: boolean;
    iceRestartDelay?: number;
};
/**
 * The `Publisher` is responsible for publishing/unpublishing media streams to/from the SFU
 * @internal
 */
export declare class Publisher {
    private pc;
    private readonly state;
    private readonly transceiverRegistry;
    private readonly publishOptionsPerTrackType;
    /**
     * An array maintaining the order how transceivers were added to the peer connection.
     * This is needed because some browsers (Firefox) don't reliably report
     * trackId and `mid` parameters.
     *
     * @private
     */
    private transceiverInitOrder;
    private readonly trackKindMapping;
    private readonly trackLayersCache;
    private readonly isDtxEnabled;
    private readonly isRedEnabled;
    private readonly unsubscribeOnIceRestart;
    private readonly iceRestartDelay;
    private isIceRestarting;
    private iceRestartTimeout?;
    private _connectionConfiguration;
    /**
     * Returns the current connection configuration.
     *
     * @internal
     */
    get connectionConfiguration(): RTCConfiguration | undefined;
    /**
     * The SFU client instance to use for publishing and signaling.
     */
    sfuClient: StreamSfuClient;
    /**
     * Constructs a new `Publisher` instance.
     *
     * @param connectionConfig the connection configuration to use.
     * @param sfuClient the SFU client to use.
     * @param state the call state to use.
     * @param dispatcher the dispatcher to use.
     * @param isDtxEnabled whether DTX is enabled.
     * @param isRedEnabled whether RED is enabled.
     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE once connection goes to `disconnected` state.
     */
    constructor({ connectionConfig, sfuClient, dispatcher, state, isDtxEnabled, isRedEnabled, iceRestartDelay, }: PublisherConstructorOpts);
    private createPeerConnection;
    /**
     * Closes the publisher PeerConnection and cleans up the resources.
     */
    close: ({ stopTracks }?: {
        stopTracks?: boolean | undefined;
    }) => void;
    /**
     * Starts publishing the given track of the given media stream.
     *
     * Consecutive calls to this method will replace the stream.
     * The previous stream will be stopped.
     *
     * @param mediaStream the media stream to publish.
     * @param track the track to publish.
     * @param trackType the track type to publish.
     * @param opts the optional publish options to use.
     */
    publishStream: (mediaStream: MediaStream, track: MediaStreamTrack, trackType: TrackType, opts?: PublishOptions) => Promise<void>;
    /**
     * Stops publishing the given track type to the SFU, if it is currently being published.
     * Underlying track will be stopped and removed from the publisher.
     * @param trackType the track type to unpublish.
     * @param stopTrack specifies whether track should be stopped or just disabled
     */
    unpublishStream: (trackType: TrackType, stopTrack: boolean) => Promise<void>;
    /**
     * Returns true if the given track type is currently being published to the SFU.
     *
     * @param trackType the track type to check.
     */
    isPublishing: (trackType: TrackType) => boolean;
    /**
     * Returns true if the given track type is currently live
     *
     * @param trackType the track type to check.
     */
    isLive: (trackType: TrackType) => boolean;
    private notifyTrackMuteStateChanged;
    /**
     * Stops publishing all tracks and stop all tracks.
     */
    stopPublishing: () => void;
    updateVideoPublishQuality: (enabledLayers: VideoLayerSetting[]) => Promise<void>;
    /**
     * Returns the result of the `RTCPeerConnection.getStats()` method
     * @param selector
     * @returns
     */
    getStats: (selector?: MediaStreamTrack | null | undefined) => Promise<RTCStatsReport>;
    private getCodecPreferences;
    private onIceCandidate;
    /**
     * Sets the SFU client to use.
     *
     * @param sfuClient the SFU client to use.
     */
    setSfuClient: (sfuClient: StreamSfuClient) => void;
    /**
     * Performs a migration of this publisher instance to a new SFU.
     *
     * Initiates a new `iceRestart` offer/answer exchange with the new SFU.
     *
     * @param sfuClient the new SFU client to migrate to.
     * @param connectionConfig the new connection configuration to use.
     */
    migrateTo: (sfuClient: StreamSfuClient, connectionConfig?: RTCConfiguration) => Promise<void>;
    /**
     * Restarts the ICE connection and renegotiates with the SFU.
     */
    restartIce: () => Promise<void>;
    private onNegotiationNeeded;
    /**
     * Initiates a new offer/answer exchange with the currently connected SFU.
     *
     * @param options the optional offer options to use.
     */
    private negotiate;
    private mungeCodecs;
    private extractMid;
    getCurrentTrackInfos: (sdp?: string) => TrackInfo[];
    private onIceCandidateError;
    private onIceConnectionStateChange;
    private onIceGatheringStateChange;
    private onSignalingStateChange;
    private ridToVideoQuality;
}
