import { StreamSfuClient } from '../StreamSfuClient';
import { Dispatcher } from './Dispatcher';
import { CallState } from '../store';
export type SubscriberOpts = {
    sfuClient: StreamSfuClient;
    dispatcher: Dispatcher;
    state: CallState;
    connectionConfig?: RTCConfiguration;
    iceRestartDelay?: number;
};
/**
 * A wrapper around the `RTCPeerConnection` that handles the incoming
 * media streams from the SFU.
 */
export declare class Subscriber {
    private pc;
    private sfuClient;
    private state;
    private readonly unregisterOnSubscriberOffer;
    private readonly unregisterOnIceRestart;
    private readonly iceRestartDelay;
    private isIceRestarting;
    private iceRestartTimeout?;
    private _connectionConfiguration;
    /**
     * Returns the current connection configuration.
     *
     * @internal
     */
    get connectionConfiguration(): RTCConfiguration | undefined;
    /**
     * Constructs a new `Subscriber` instance.
     *
     * @param sfuClient the SFU client to use.
     * @param dispatcher the dispatcher to use.
     * @param state the state of the call.
     * @param connectionConfig the connection configuration to use.
     * @param iceRestartDelay the delay in milliseconds to wait before restarting ICE when connection goes to `disconnected` state.
     */
    constructor({ sfuClient, dispatcher, state, connectionConfig, iceRestartDelay, }: SubscriberOpts);
    /**
     * Creates a new `RTCPeerConnection` instance with the given configuration.
     *
     * @param connectionConfig the connection configuration to use.
     */
    private createPeerConnection;
    /**
     * Closes the `RTCPeerConnection` and unsubscribes from the dispatcher.
     */
    close: () => void;
    /**
     * Returns the result of the `RTCPeerConnection.getStats()` method
     * @param selector
     * @returns
     */
    getStats: (selector?: MediaStreamTrack | null | undefined) => Promise<RTCStatsReport>;
    /**
     * Sets the SFU client to use.
     *
     * @param sfuClient the SFU client to use.
     */
    setSfuClient: (sfuClient: StreamSfuClient) => void;
    /**
     * Migrates the subscriber to a new SFU client.
     *
     * @param sfuClient the new SFU client to migrate to.
     * @param connectionConfig the new connection configuration to use.
     */
    migrateTo: (sfuClient: StreamSfuClient, connectionConfig?: RTCConfiguration) => void;
    /**
     * Restarts the ICE connection and renegotiates with the SFU.
     */
    restartIce: () => Promise<void>;
    private handleOnTrack;
    private onIceCandidate;
    private negotiate;
    private onIceConnectionStateChange;
    private onIceGatheringStateChange;
    private onIceCandidateError;
}
